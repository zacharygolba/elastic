var searchIndex = {};
searchIndex["aho_corasick"] = {"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"dense"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sparse"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["antidote"] = {"doc":"Mutex and RwLock types that do not poison themselves.","items":[[3,"WaitTimeoutResult","antidote","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",null,null],[3,"Mutex","","Like `std::sync::Mutex` except that it does not poison itself.",null,null],[3,"MutexGuard","","Like `std::sync::MutexGuard`.",null,null],[3,"Condvar","","Like `std::sync::Condvar`.",null,null],[3,"TryLockError","","Like `std::sync::TryLockError`.",null,null],[3,"RwLock","","Like `std::sync::RwLock` except that it does not poison itself.",null,null],[3,"RwLockReadGuard","","Like `std::sync::RwLockReadGuard`.",null,null],[3,"RwLockWriteGuard","","Like `std::sync::RwLockWriteGuard`.",null,null],[6,"TryLockResult","","Like `std::sync::TryLockResult`.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Like `std::sync::Mutex::new`.",0,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"into_inner","","Like `std::sync::Mutex::into_inner`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lock","","Like `std::sync::Mutex::lock`.",0,{"inputs":[{"name":"self"}],"output":{"name":"mutexguard"}}],[11,"try_lock","","Like `std::sync::Mutex::try_lock`.",0,{"inputs":[{"name":"self"}],"output":{"name":"trylockresult"}}],[11,"get_mut","","Like `std::sync::Mutex::get_mut`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Like `std::sync::Condvar::new`.",2,{"inputs":[],"output":{"name":"condvar"}}],[11,"wait","","Like `std::sync::Condvar::wait`.",2,{"inputs":[{"name":"self"},{"name":"mutexguard"}],"output":{"name":"mutexguard"}}],[11,"wait_timeout","","Like `std::sync::Condvar::wait_timeout`.",2,null],[11,"notify_one","","Like `std::sync::Condvar::notify_one`.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"notify_all","","Like `std::sync::Condvar::notify_all`.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Like `std::sync::RwLock::new`.",4,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"into_inner","","Like `std::sync::RwLock::into_inner`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read","","Like `std::sync::RwLock::read`.",4,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"try_read","","Like `std::sync::RwLock::try_read`.",4,{"inputs":[{"name":"self"}],"output":{"name":"trylockresult"}}],[11,"write","","Like `std::sync::RwLock::write`.",4,{"inputs":[{"name":"self"}],"output":{"name":"rwlockwriteguard"}}],[11,"try_write","","Like `std::sync::RwLock::try_write`.",4,{"inputs":[{"name":"self"}],"output":{"name":"trylockresult"}}],[11,"get_mut","","Like `std::sync::RwLock::get_mut`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"waittimeoutresult"}}]],"paths":[[3,"Mutex"],[3,"MutexGuard"],[3,"Condvar"],[3,"TryLockError"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"WaitTimeoutResult"]]};
searchIndex["backtrace"] = {"doc":"A library for acquiring a backtrace at runtime","items":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to the `trace` function of this crate.",null,null],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",null,null],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic accessors to the demangled name, the raw bytes, the raw string, etc.",null,null],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",null,null],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",null,null],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",null,null],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure provided to calculate a stack trace.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified closure.",null,null],[11,"ip","","Returns the current instruction pointer of this frame.",0,null],[11,"symbol_address","","Returns the starting symbol address of the frame of this function.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","Returns the name of this function.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"addr","","Returns the starting address of this function.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","Returns the file name where this function was defined.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"lineno","","Returns the line number for where this symbol is currently executing.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new symbol name from the raw underlying bytes.",2,null],[11,"as_str","","Returns the raw symbol name as `&str` if the symbols is valid utf-8.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"backtraceframe"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"backtracesymbol"}}],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",3,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",3,null],[11,"from","","",3,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"ip","","Same as `Frame::ip`",4,null],[11,"symbol_address","","Same as `Frame::symbol_address`",4,null],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",4,null],[11,"name","","Same as `Symbol::name`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"addr","","Same as `Symbol::addr`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"filename","","Same as `Symbol::filename`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"lineno","","Same as `Symbol::lineno`",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"backtrace"}}]],"paths":[[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"]]};
searchIndex["backtrace_sys"] = {"doc":"","items":[[4,"backtrace_state","backtrace_sys","",null,null],[5,"backtrace_create_state","","",null,null],[5,"backtrace_syminfo","","",null,null],[5,"backtrace_pcinfo","","",null,null],[6,"backtrace_syminfo_callback","","",null,null],[6,"backtrace_full_callback","","",null,null],[6,"backtrace_error_callback","","",null,null]],"paths":[]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style bitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["chrono"] = {"doc":"Chrono 0.3.0","items":[[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[4,"Weekday","","The day of week.",null,null],[13,"Mon","","Monday.",0,null],[13,"Tue","","Tuesday.",0,null],[13,"Wed","","Wednesday.",0,null],[13,"Thu","","Thursday.",0,null],[13,"Fri","","Friday.",0,null],[13,"Sat","","Saturday.",0,null],[13,"Sun","","Sunday.",0,null],[0,"prelude","","A convenience module appropriate for glob imports (`use chrono::prelude::*;`).",null,null],[0,"offset","","The time zone, which calculates offsets from the local time to UTC.",null,null],[4,"LocalResult","chrono::offset","The conversion result from the local time to the timezone-aware datetime types.",null,null],[13,"None","","Given local time representation is invalid. This can occur when, for example, the positive timezone transition.",1,null],[13,"Single","","Given local time representation has a single unique result.",1,null],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous. This can occur when, for example, the negative timezone transition.",1,null],[0,"utc","","The UTC (Coordinated Universal Time) time zone.",null,null],[3,"UTC","chrono::offset::utc","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"utc"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"utc"}],"output":{"name":"bool"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",2,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",2,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",2,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"offset_from_local_date","","",2,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",2,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",2,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"utc"}}],[11,"offset_from_utc_datetime","","",2,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"utc"}}],[11,"fix","","",2,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"fixed","chrono::offset","The time zone which has a fixed offset from UTC.",null,null],[3,"FixedOffset","chrono::offset::fixed","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"local_minus_utc","","Returns the number of seconds to add to convert from UTC to the local time.",3,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"utc_minus_local","","Returns the number of seconds to add to convert from the local time to UTC.",3,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_offset","","",3,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_local_date","","",3,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",3,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",3,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",3,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"fix","","",3,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"local","chrono::offset","The local (system) time zone.",null,null],[3,"Local","chrono::offset::local","The local timescale. This is implemented via the standard `time` crate.",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",4,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",4,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",4,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"local"}}],[11,"offset_from_local_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"from_local_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"from_local_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"from_utc_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"date"}}],[11,"from_utc_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"datetime"}}],[8,"Offset","chrono::offset","The offset from the local time to UTC.",null,null],[10,"fix","","Returns the fixed offset from UTC to the local time stored.",5,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[8,"TimeZone","","The time zone.",null,null],[16,"Offset","","An associated offset type. This type is used to store the actual offset in date and time types. The original `TimeZone` value can be recovered via `TimeZone::from_offset`.",6,null],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"yo","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"date"}}],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"localresult"}}],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",6,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",6,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"datetime_from_str","","Parses a string with the specified format string and returns a `DateTime` with the current offset. See the `format::strftime` module on the supported escape sequences.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[10,"from_offset","","Reconstructs the time zone from the offset.",6,null],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",6,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",6,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",6,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",6,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",6,null],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",6,null],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",6,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"date"}}],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",6,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"datetime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"localresult"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"map","","Maps a `LocalResult<T>` into `LocalResult<U>` with given function.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"localresult"}}],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"localresult"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"naive","chrono","Date and time types which do not concern about the timezones.",null,null],[0,"date","chrono::naive","ISO 8601 calendar date without timezone.",null,null],[3,"NaiveDate","chrono::naive::date","ISO 8601 calendar date without timezone. Allows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE. Also supports the conversion from ISO 8601 ordinal and week date.",null,null],[11,"serialize","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",7,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[17,"MIN","","The minimum possible `NaiveDate` (January 1, 262145 BCE).",null,null],[17,"MAX","","The maximum possible `NaiveDate` (December 31, 262143 CE).",null,null],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"ordering"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"from_ymd","","Makes a new `NaiveDate` from the calendar date (year, month and day).",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_ymd_opt","","Makes a new `NaiveDate` from the calendar date (year, month and day).",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_yo","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",7,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_yo_opt","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",7,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_isoywd","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"naivedate"}}],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"option"}}],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",7,{"inputs":[{"name":"i32"}],"output":{"name":"naivedate"}}],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",7,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`. See the `format::strftime` module on the supported escape sequences.",7,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",7,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"succ","","Makes a new `NaiveDate` for the next calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"succ_opt","","Makes a new `NaiveDate` for the next calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pred","","Makes a new `NaiveDate` for the previous calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"pred_opt","","Makes a new `NaiveDate` for the previous calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add_signed","","Adds the `days` part of given `Duration` to the current date.",7,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"checked_sub_signed","","Subtracts the `days` part of given `Duration` from the current date.",7,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"signed_duration_since","","Subtracts another `NaiveDate` from the current date. Returns a `Duration` of integral numbers.",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"oldduration"}}],[11,"format_with_items","","Formats the date with the specified formatting items. Otherwise it is same to the ordinary `format` method.",7,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","Returns the month number starting from 1.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","Returns the month number starting from 0.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","Returns the day of month starting from 1.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","Returns the day of week.",7,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",7,null],[11,"with_year","","Makes a new `NaiveDate` with the year number changed.",7,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","Makes a new `NaiveDate` with the month number (starting from 1) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","Makes a new `NaiveDate` with the month number (starting from 0) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","Makes a new `NaiveDate` with the day of month (starting from 1) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","Makes a new `NaiveDate` with the day of month (starting from 0) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDate` with the day of year (starting from 1) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDate` with the day of year (starting from 0) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hash","","",7,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedate"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedate"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"time","chrono::naive","ISO 8601 time without timezone.",null,null],[3,"NaiveTime","chrono::naive::time","ISO 8601 time without timezone. Allows for the nanosecond precision and optional leap second representation.",null,null],[11,"serialize","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"ordering"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`. See the `format::strftime` module on the supported escape sequences.",8,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"overflowing_add_signed","","Adds given `Duration` to the current time, and also returns the number of seconds in the integral number of days ignored from the addition. (We cannot return `Duration` because it is subject to overflow or underflow.)",8,null],[11,"overflowing_sub_signed","","Subtracts given `Duration` from the current time, and also returns the number of seconds in the integral number of days ignored from the subtraction. (We cannot return `Duration` because it is subject to overflow or underflow.)",8,null],[11,"signed_duration_since","","Subtracts another `NaiveTime` from the current time. Returns a `Duration` within +/- 1 day. This does not overflow or underflow at all.",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"oldduration"}}],[11,"format_with_items","","Formats the time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",8,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the time with the specified format string. See the `format::strftime` module on the supported escape sequences.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"hour","","Returns the hour number from 0 to 23.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","Makes a new `NaiveTime` with the hour number changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","Makes a new `NaiveTime` with the minute number changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","Makes a new `NaiveTime` with the second number changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hash","","",8,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivetime"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivetime"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"datetime","chrono::naive","ISO 8601 date and time without timezone.",null,null],[3,"NaiveDateTime","chrono::naive::datetime","ISO 8601 combined date and time without timezone.",null,null],[11,"serialize","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"ordering"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"new","","Makes a new `NaiveDateTime` from date and time components. Equivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",9,{"inputs":[{"name":"naivedate"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",9,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",9,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`. See the `format::strftime` module on the supported escape sequences.",9,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"date","","Retrieves a date component.",9,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"time","","Retrieves a time component.",9,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since the midnight on January 1, 1970.",9,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last whole non-leap second.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last whole non-leap second.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last whole non-leap second.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"signed_duration_since","","Subtracts another `NaiveDateTime` from the current date and time. This does not overflow or underflow at all.",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"oldduration"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",9,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",9,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","Returns the month number starting from 1.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","Returns the month number starting from 0.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","Returns the day of month starting from 1.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","Returns the day of week.",9,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",9,null],[11,"with_year","","Makes a new `NaiveDateTime` with the year number changed.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","Makes a new `NaiveDateTime` with the month number (starting from 1) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","Makes a new `NaiveDateTime` with the month number (starting from 0) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hour","","Returns the hour number from 0 to 23.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","Makes a new `NaiveDateTime` with the hour number changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","Makes a new `NaiveDateTime` with the minute number changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","Makes a new `NaiveDateTime` with the second number changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hash","","",9,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedatetime"}}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedatetime"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"date","chrono","ISO 8601 calendar date with time zone.",null,null],[3,"Date","chrono::date","ISO 8601 calendar date with time zone.",null,null],[17,"MIN","","The minimum possible `Date`.",null,null],[17,"MAX","","The maximum possible `Date`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"from_utc","","Makes a new `Date` with given UTC date and offset. The local date should be constructed via the `TimeZone` trait.",10,null],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"option"}}],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"succ","","Makes a new `Date` for the next date.",10,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"succ_opt","","Makes a new `Date` for the next date.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pred","","Makes a new `Date` for the prior date.",10,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"pred_opt","","Makes a new `Date` for the prior date.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"offset","","Retrieves an associated offset from UTC.",10,null],[11,"timezone","","Retrieves an associated time zone.",10,{"inputs":[{"name":"self"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `Date` (but will change the string representation).",10,{"inputs":[{"name":"self"},{"name":"tz2"}],"output":{"name":"date"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date.",10,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date.",10,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"signed_duration_since","","Subtracts another `Date` from the current date. Returns a `Duration` of integral numbers.",10,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"oldduration"}}],[11,"naive_utc","","Returns a view to the naive UTC date.",10,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"naive_local","","Returns a view to the naive local date.",10,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"format_with_items","","Formats the date with the specified formatting items.",10,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",10,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","",10,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",10,null],[11,"with_year","","",10,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"option"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"ordering"}}],[11,"hash","","",10,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",10,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"date"}}],[11,"sub","","",10,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"date"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"datetime","chrono","ISO 8601 date and time with time zone.",null,null],[3,"DateTime","chrono::datetime","ISO 8601 combined date and time with time zone.",null,null],[11,"serialize","","",11,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"datetime"}}],[11,"from_utc","","Makes a new `DateTime` with given UTC datetime and offset. The local datetime should be constructed via the `TimeZone` trait.",11,null],[11,"date","","Retrieves a date component.",11,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"time","","Retrieves a time component. Unlike `date`, this is not associated to the time zone.",11,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",11,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"offset","","Retrieves an associated offset from UTC.",11,null],[11,"timezone","","Retrieves an associated time zone.",11,{"inputs":[{"name":"self"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `DateTime` (but will change the string representation).",11,{"inputs":[{"name":"self"},{"name":"tz2"}],"output":{"name":"datetime"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"signed_duration_since","","Subtracts another `DateTime` from the current date and time. This does not overflow or underflow at all.",11,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"oldduration"}}],[11,"naive_utc","","Returns a view to the naive UTC datetime.",11,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"naive_local","","Returns a view to the naive local datetime.",11,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`, then returns a new `DateTime` with a parsed `FixedOffset`.",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`, then returns a new `DateTime` with a parsed `FixedOffset`.",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `DateTime` with a parsed `FixedOffset`. See the `format::strftime` module on the supported escape sequences.",11,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",11,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",11,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","",11,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",11,null],[11,"with_year","","",11,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hour","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"option"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"ordering"}}],[11,"hash","","",11,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"datetime"}}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"datetime"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"format","chrono","Formatting utilities for date and time.",null,null],[3,"InternalNumeric","chrono::format","An opaque type representing numeric item types for internal uses only.",null,null],[3,"InternalFixed","","An opaque type representing fixed-format item types for internal uses only.",null,null],[3,"ParseError","","An error from the `parse` function.",null,null],[3,"DelayedFormat","","A temporary object which can be used as an argument to `format!` or others. This is normally constructed via `format` methods of each date and time type.",null,null],[4,"Pad","","Padding characters for numeric items.",null,null],[13,"None","","No padding.",12,null],[13,"Zero","","Zero (`0`) padding.",12,null],[13,"Space","","Space padding.",12,null],[4,"Numeric","","Numeric item types. They have associated formatting width (FW) and parsing width (PW).",null,null],[13,"Year","","Full Gregorian year (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",13,null],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",13,null],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",13,null],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",13,null],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",13,null],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",13,null],[13,"Month","","Month (FW=PW=2).",13,null],[13,"Day","","Day of the month (FW=PW=2).",13,null],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",13,null],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",13,null],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",13,null],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",13,null],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",13,null],[13,"Ordinal","","Day of the year (FW=PW=3).",13,null],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",13,null],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",13,null],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",13,null],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",13,null],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9). Note that this is not left-aligned; see also `Fixed::Nanosecond`.",13,null],[13,"Timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞). For formatting, it assumes UTC upon the absence of time zone offset.",13,null],[13,"Internal","","Internal uses only.",13,null],[4,"Fixed","","Fixed-format item types.",null,null],[13,"ShortMonthName","","Abbreviated month names.",14,null],[13,"LongMonthName","","Full month names.",14,null],[13,"ShortWeekdayName","","Abbreviated day of the week names.",14,null],[13,"LongWeekdayName","","Full day of the week names.",14,null],[13,"LowerAmPm","","AM/PM.",14,null],[13,"UpperAmPm","","AM/PM.",14,null],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds. May print nothing, 3, 6 or 9 digits according to the available accuracy. See also `Numeric::Nanosecond`.",14,null],[13,"Nanosecond3","","Same to `Nanosecond` but the accuracy is fixed to 3.",14,null],[13,"Nanosecond6","","Same to `Nanosecond` but the accuracy is fixed to 6.",14,null],[13,"Nanosecond9","","Same to `Nanosecond` but the accuracy is fixed to 9.",14,null],[13,"TimezoneName","","Timezone name.",14,null],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",14,null],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",14,null],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",14,null],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",14,null],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",14,null],[13,"RFC3339","","RFC 3339 & ISO 8601 date and time syntax.",14,null],[13,"Internal","","Internal uses only.",14,null],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",null,null],[13,"Literal","","A literally printed and parsed text.",15,null],[13,"OwnedLiteral","","Same to `Literal` but with the string owned by the item.",15,null],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",15,null],[13,"OwnedSpace","","Same to `Space` but with the string owned by the item.",15,null],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting; the parser simply ignores any padded whitespace and zeroes.",15,null],[13,"Fixed","","Fixed-format item.",15,null],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",15,null],[5,"parse","","Tries to parse given string into `parsed` with given formatting items. Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used). There should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",null,{"inputs":[{"name":"parsed"},{"name":"str"},{"name":"i"}],"output":{"name":"parseresult"}}],[5,"format","","Tries to format given arguments with given formatting items. Internally used by `DelayedFormat`.",null,{"inputs":[{"name":"formatter"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"result"}}],[0,"parsed","","A collection of parsed date and time items. They can be constructed incrementally while being checked for consistency.",null,null],[3,"Parsed","chrono::format::parsed","Parsed parts of date and time. There are two classes of methods:",null,null],[12,"year","","Year.",16,null],[12,"year_div_100","","Year divided by 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"isoyear","","Year in the ISO week date.",16,null],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"month","","Month (1--12).",16,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January (0--53, 1--53 or 1--52 depending on the year).",16,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January (0--53, 1--53 or 1--52 depending on the year).",16,null],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",16,null],[12,"weekday","","Day of the week.",16,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",16,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",16,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",16,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",16,null],[12,"minute","","Minute number (0--59).",16,null],[12,"second","","Second number (0--60, accounting for leap seconds).",16,null],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",16,null],[12,"timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970.",16,null],[12,"offset","","Offset from the local time to UTC, in seconds.",16,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"parsed"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"parsed"}}],[11,"new","","Returns the initial value of parsed parts.",16,{"inputs":[],"output":{"name":"parsed"}}],[11,"set_year","","Tries to set the `year` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_month","","Tries to set the `month` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_weekday","","Tries to set the `weekday` field from given value.",16,{"inputs":[{"name":"self"},{"name":"weekday"}],"output":{"name":"parseresult"}}],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_day","","Tries to set the `day` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parseresult"}}],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_minute","","Tries to set the `minute` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_second","","Tries to set the `second` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_offset","","Tries to set the `offset` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",16,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",16,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields, except for the `offset` field (assumed to have a given value). This is required for parsing a local time or other known-timezone inputs.",16,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"parseresult"}}],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",16,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",16,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields, with an additional `TimeZone` used to interpret and validate the local date.",16,{"inputs":[{"name":"self"},{"name":"tz"}],"output":{"name":"parseresult"}}],[0,"strftime","chrono::format","`strftime`/`strptime`-inspired date and time formatting syntax.",null,null],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",null,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"strftimeitems"}}],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",17,{"inputs":[{"name":"str"}],"output":{"name":"strftimeitems"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"ParseResult","chrono::format","Same to `Result<T, ParseError>`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pad"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"pad"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"numeric"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"numeric"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"numeric"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"internalnumeric"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fixed"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"fixed"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"fixed"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"internalfixed"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",21,{"inputs":[{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",21,{"inputs":[{"name":"option"},{"name":"option"},{"name":"off"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Datelike","chrono","The common set of methods for date component.",null,null],[10,"year","","Returns the year number in the calendar date.",22,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",22,null],[10,"month","","Returns the month number starting from 1.",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"month0","","Returns the month number starting from 0.",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day","","Returns the day of month starting from 1.",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day0","","Returns the day of month starting from 0.",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal","","Returns the day of year starting from 1.",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal0","","Returns the day of year starting from 0.",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"weekday","","Returns the day of week.",22,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[10,"isoweekdate","","Returns the ISO week date: an adjusted year, week number and day of week. The adjusted year may differ from that of the calendar date.",22,null],[10,"with_year","","Makes a new value with the year number changed.",22,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",22,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",22,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",22,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",22,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",22,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",22,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",22,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",23,null],[10,"minute","","Returns the minute number from 0 to 59.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"second","","Returns the second number from 0 to 59.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"with_hour","","Makes a new value with the hour number changed.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_minute","","Makes a new value with the minute number changed.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_second","","Makes a new value with the second number changed.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"weekday"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"succ","","The next day in the week.",0,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"pred","","The previous day in the week.",0,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"number_from_monday","","Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"number_from_sunday","","Returns a day-of-week number starting from Sunday = 1.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_days_from_monday","","Returns a day-of-week number starting from Monday = 0.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_days_from_sunday","","Returns a day-of-week number starting from Sunday = 0.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",24,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",24,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",24,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",24,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",24,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",24,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",24,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",24,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 2^63 microseconds in either direction).",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 2^63 nanoseconds in either direction).",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",24,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",24,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",24,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",24,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"sub","","",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"div","","",24,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"mul","","",24,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"neg","","",24,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"cmp","","",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"add","chrono::naive::time","",8,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivetime"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivetime"}}],[11,"add","chrono::naive::datetime","",9,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivedatetime"}}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivedatetime"}}],[11,"add","chrono::datetime","",11,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"datetime"}}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"datetime"}}]],"paths":[[4,"Weekday"],[4,"LocalResult"],[3,"UTC"],[3,"FixedOffset"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"Date"],[3,"DateTime"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"Parsed"],[3,"StrftimeItems"],[3,"InternalNumeric"],[3,"InternalFixed"],[3,"ParseError"],[3,"DelayedFormat"],[8,"Datelike"],[8,"Timelike"],[3,"Duration"]]};
searchIndex["crossbeam"] = {"doc":"Support for concurrent and parallel programming.","items":[[3,"Scope","crossbeam","",null,null],[3,"ScopedJoinHandle","","A handle to a scoped thread",null,null],[5,"scope","","Create a new `scope`, for deferred destructors.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[0,"mem","","Memory management for concurrent data structures",null,null],[3,"CachePadded","crossbeam::mem","Pad `T` to the length of a cacheline.",null,null],[0,"epoch","","Epoch-based memory management",null,null],[3,"Atomic","crossbeam::mem::epoch","Like `std::sync::atomic::AtomicPtr`.",null,null],[3,"Guard","","An RAII-style guard for pinning the current epoch.",null,null],[3,"Owned","","Like `Box<T>`: an owned, heap-allocated data value of type `T`.",null,null],[3,"Shared","","Like `&'a T`: a shared reference valid for lifetime `'a`.",null,null],[5,"pin","","Pin the current epoch.",null,{"inputs":[],"output":{"name":"guard"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"null","","",0,{"inputs":[],"output":{"name":"atomic"}}],[11,"new","","Create a new atomic pointer",0,{"inputs":[{"name":"t"}],"output":{"name":"atomic"}}],[11,"load","","Do an atomic load with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"option"}}],[11,"store","","Do an atomic store with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"ordering"}],"output":null}],[11,"store_and_ref","","Do an atomic store with the given memory ordering, immediately yielding a shared reference to the pointer that was stored.",0,{"inputs":[{"name":"self"},{"name":"owned"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"store_shared","","Do an atomic store of a `Shared` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"ordering"}],"output":null}],[11,"cas","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"cas_and_ref","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the given memory ordering, immediatley acquiring a new `Shared` reference to the previously-owned pointer if successful.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"owned"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"result"}}],[11,"cas_shared","","Do a compare-and-set from a `Shared` to another `Shared` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"swap","","Do an atomic swap with an `Owned` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"option"}}],[11,"swap_shared","","Do an atomic swap with a `Shared` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlinked","","Assert that the value is no longer reachable from a lock-free data structure and should be collected when sufficient epochs have passed.",1,{"inputs":[{"name":"self"},{"name":"shared"}],"output":null}],[11,"migrate_garbage","","Move the thread-local garbage into the global set of garbage.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Move `t` to a new heap allocation.",2,{"inputs":[{"name":"t"}],"output":{"name":"owned"}}],[11,"into_inner","","Move data out of the owned box, deallocating the box.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"shared"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"shared"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_raw","","",3,null],[11,"fmt","crossbeam::mem","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zeroed","","A const fn equivalent to mem::zeroed().",4,{"inputs":[],"output":{"name":"cachepadded"}}],[11,"new","","Wrap `t` with cacheline padding.",4,{"inputs":[{"name":"t"}],"output":{"name":"cachepadded"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ZerosValid","","Types for which mem::zeroed() is safe.",null,null],[0,"sync","crossbeam","Synchronization primitives.",null,null],[3,"MsQueue","crossbeam::sync","A Michael-Scott lock-free queue, with support for blocking `pop`s.",null,null],[3,"AtomicOption","","",null,null],[3,"TreiberStack","","Treiber's lock-free stack.",null,null],[3,"SegQueue","","A Michael-Scott queue that allocates \"segments\" (arrays of nodes) for efficiency.",null,null],[3,"ArcCell","","A type providing atomic storage and retrieval of an `Arc<T>`.",null,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",5,{"inputs":[],"output":{"name":"atomicoption"}}],[11,"swap_box","","",5,{"inputs":[{"name":"self"},{"name":"box"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"swap","","",5,{"inputs":[{"name":"self"},{"name":"t"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"take","","",5,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty queue.",6,{"inputs":[],"output":{"name":"msqueue"}}],[11,"push","","Add `t` to the back of the queue, possibly waking up threads blocked on `pop`.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"is_empty","","Check if this queue is empty.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_pop","","Attempt to dequeue from the front.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop","","Dequeue an element from the front of the queue, blocking if the queue is empty.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty stack.",7,{"inputs":[],"output":{"name":"treiberstack"}}],[11,"push","","Push `t` on top of the stack.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Attempt to pop the top element of the stack. Deprecated method, use try_pop",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_pop","","Attempt to pop the top element of the stack.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","Check if this queue is empty.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty queue.",8,{"inputs":[],"output":{"name":"segqueue"}}],[11,"push","","Add `t` to the back of the queue.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"try_pop","","Attempt to dequeue from the front.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"chase_lev","","A lock-free concurrent work-stealing deque",null,null],[3,"Worker","crossbeam::sync::chase_lev","Worker half of the work-stealing deque. This worker has exclusive access to one side of the deque, and uses `push` and `try_pop` method to manipulate it.",null,null],[3,"Stealer","","The stealing half of the work-stealing deque. Stealers have access to the opposite end of the deque from the worker, and they only have access to the `steal` method.",null,null],[4,"Steal","","When stealing some data, this is an enumeration of the possible outcomes.",null,null],[13,"Empty","","The deque was empty at the time of stealing",9,null],[13,"Abort","","The stealer lost the race for stealing data, and a retry may return more data.",9,null],[13,"Data","","The stealer has successfully stolen some data.",9,null],[5,"deque","","Creates a new empty deque",null,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"push","","Pushes data onto the front of this work queue.",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"try_pop","","Pops data off the front of the work queue, returning `None` on an empty queue.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"steal","","Steals work off the end of the queue (opposite of the worker's end)",11,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"stealer"}}],[11,"fmt","crossbeam::sync","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new `ArcCell`.",12,{"inputs":[{"name":"arc"}],"output":{"name":"arccell"}}],[11,"set","","Stores a new value in the `ArcCell`, returning the previous value.",12,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"arc"}}],[11,"get","","Returns a copy of the value stored by the `ArcCell`.",12,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"fmt","crossbeam","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"defer","","Schedule code to be executed when exiting the scope.",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"spawn","","Create a scoped thread.",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scopedjoinhandle"}}],[11,"join","","Join the scoped thread, returning the result it produced.",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"thread","","Get the underlying thread handle.",14,{"inputs":[{"name":"self"}],"output":{"name":"thread"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Atomic"],[3,"Guard"],[3,"Owned"],[3,"Shared"],[3,"CachePadded"],[3,"AtomicOption"],[3,"MsQueue"],[3,"TreiberStack"],[3,"SegQueue"],[4,"Steal"],[3,"Worker"],[3,"Stealer"],[3,"ArcCell"],[3,"Scope"],[3,"ScopedJoinHandle"]]};
searchIndex["dbghelp"] = {"doc":"","items":[],"paths":[]};
searchIndex["dtoa"] = {"doc":"","items":[[5,"write","dtoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Floating","","",null,null],[10,"write","","",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[14,"diyfp","","",null,null],[14,"dtoa","","",null,null]],"paths":[[8,"Floating"]]};
searchIndex["elastic"] = {"doc":"Elasticsearch API Client","items":[[0,"error","elastic","Client-side error types.",null,null],[3,"JsonError","elastic::error","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[4,"HttpError","","The Errors that may occur when processing a `Request`.",null,null],[13,"Http","","An HTTP error from the `hyper` crate.",0,null],[13,"Serialize","","An error trying to serialize a value.",0,null],[13,"TooManyRedirects","","A request tried to redirect too many times.",0,null],[13,"RedirectLoop","","An infinite redirect loop was detected.",0,null],[4,"ApiError","","A REST API error response.",null,null],[13,"IndexNotFound","","",1,null],[12,"index","elastic::error::ApiError","",1,null],[13,"Parsing","elastic::error","",1,null],[12,"line","elastic::error::ApiError","",1,null],[12,"col","","",1,null],[12,"reason","","",1,null],[13,"Other","elastic::error","",1,null],[4,"ResponseError","","An error parsing a REST API response to a success value.",null,null],[13,"Api","","",2,null],[13,"Json","","",2,null],[3,"Error","","The Error type.",null,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",3,null],[13,"Api","","",3,null],[13,"Json","","",3,null],[13,"Http","","",3,null],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",5,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",5,null],[11,"kind","","",5,null],[11,"iter","","",5,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extract_backtrace","","",5,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",5,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",5,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",5,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"apierror"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"jsonerror"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"httperror"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"deref","","",5,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"responseerror"}],"output":{"name":"self"}}],[0,"http","elastic","HTTP headers and status codes.",null,null],[0,"header","elastic::http","Headers container, and common header fields.",null,null],[0,"parsing","elastic::http::header","Utility functions for Header implementations.",null,null],[5,"from_one_raw_str","elastic::http::header::parsing","Reads a single raw string when parsing a header.",null,null],[5,"from_raw_str","","Reads a raw string into a value.",null,null],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec.",null,null],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string.",null,null],[3,"ExtendedValue","","An extended header parameter value (i.e., tagged with a character set and optionally, a language), as defined in RFC 5987.",null,null],[12,"charset","","The character set that is used to encode the `value` to a string.",6,null],[12,"language_tag","","The human language details of the `value`, if available.",6,null],[12,"value","","The parameter value, as expressed in octets.",6,null],[5,"parse_extended_value","","Parses extended header parameter values (`ext-value`), as defined in RFC 5987.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"HTTP_VALUE","","This encode set is used for HTTP header values and is defined at https://tools.ietf.org/html/rfc5987#section-3.2",null,null],[8,"Header","elastic::http::header","A trait for any object that will represent a header field and value.",null,null],[10,"header_name","","Returns the name of the header field this belongs to.",7,{"inputs":[],"output":{"name":"str"}}],[10,"parse_header","","Parse a header from a raw stream of bytes.",7,null],[8,"HeaderFormat","","A trait for any object that will represent a header field and value.",null,null],[10,"fmt_header","","Format a header to be output into a TcpStream.",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Headers","","A map of header fields on requests and responses.",null,null],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map.",null,null],[3,"HeaderView","","Returned with the `HeadersItems` iterator.",null,null],[3,"HeaderFormatter","","",null,null],[12,"0","","",9,null],[4,"Range","","`Range` header, defined in RFC7233",null,null],[13,"Bytes","","Byte range",10,null],[13,"Unregistered","","Custom range, with unit not registered at IANA (`other-range-unit`: String , `other-range-set`: String)",10,null],[4,"Vary","","`Vary` header, defined in RFC7231",null,null],[13,"Any","","Any value is a match",11,null],[13,"Items","","Only the listed items are a match",11,null],[4,"CacheDirective","","`CacheControl` contains a list of these directives.",null,null],[13,"NoCache","","\"no-cache\"",12,null],[13,"NoStore","","\"no-store\"",12,null],[13,"NoTransform","","\"no-transform\"",12,null],[13,"OnlyIfCached","","\"only-if-cached\"",12,null],[13,"MaxAge","","\"max-age=delta\"",12,null],[13,"MaxStale","","\"max-stale=delta\"",12,null],[13,"MinFresh","","\"min-fresh=delta\"",12,null],[13,"MustRevalidate","","\"must-revalidate\"",12,null],[13,"Public","","\"public\"",12,null],[13,"Private","","\"private\"",12,null],[13,"ProxyRevalidate","","\"proxy-revalidate\"",12,null],[13,"SMaxAge","","\"s-maxage=delta\"",12,null],[13,"Extension","","Extension directives. Optionally include an argument.",12,null],[3,"Quality","","Represents a quality used in quality values.",null,null],[12,"0","","",13,null],[4,"RangeUnit","","Range Units, described in RFC7233",null,null],[13,"Bytes","","Indicating byte-range requests are supported.",14,null],[13,"None","","Reserved as keyword, indicating no ranges are supported.",14,null],[13,"Unregistered","","The given range unit is not registered at IANA.",14,null],[4,"Preference","","Prefer contains a list of these preferences.",null,null],[13,"RespondAsync","","\"respond-async\"",15,null],[13,"ReturnRepresentation","","\"return=representation\"",15,null],[13,"ReturnMinimal","","\"return=minimal\"",15,null],[13,"HandlingStrict","","\"handling=strict\"",15,null],[13,"HandlingLeniant","","\"handling=leniant\"",15,null],[13,"Wait","","\"wait=delta\"",15,null],[13,"Extension","","Extension preferences. Always has a value, if none is specified it is just \"\". A preference can also have a list of parameters.",15,null],[3,"Expires","","`Expires` header, defined in RFC7234",null,null],[12,"0","","",16,null],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of CORS",null,null],[12,"0","","",17,null],[5,"q","","Convenience function to create a `Quality` from a float.",null,{"inputs":[{"name":"f32"}],"output":{"name":"quality"}}],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of CORS",null,null],[12,"0","","",18,null],[3,"Server","","`Server` header, defined in RFC7231",null,null],[12,"0","","",19,null],[3,"Host","","The `Host` header.",null,null],[12,"hostname","","The hostname, such a example.domain.",20,null],[12,"port","","An optional port number.",20,null],[4,"ConnectionOption","","Values that can be in the `Connection` header.",null,null],[13,"KeepAlive","","The `keep-alive` connection value.",21,null],[13,"Close","","The `close` connection value.",21,null],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",21,null],[3,"ContentEncoding","","`Content-Encoding` header, defined in RFC7231",null,null],[12,"0","","",22,null],[5,"qitem","","Convinience function to wrap a value in a `QualityItem` Sets `q` to the default 1.0",null,{"inputs":[{"name":"t"}],"output":{"name":"qualityitem"}}],[3,"QualityItem","","Represents an item with a quality value as defined in RFC7231.",null,null],[12,"item","","The actual contents of the field.",23,null],[12,"quality","","The quality (client or server preference) for the value.",23,null],[3,"HttpDate","","A `time::Time` with HTTP formatting and parsing",null,null],[12,"0","","",24,null],[3,"UserAgent","","`User-Agent` header, defined in RFC7231",null,null],[12,"0","","",25,null],[3,"ContentType","","`Content-Type` header, defined in RFC7231",null,null],[12,"0","","",26,null],[4,"IfRange","","`If-Range` header, defined in RFC7233",null,null],[13,"EntityTag","","The entity-tag the client has of the resource",27,null],[13,"Date","","The date when the client retrieved the resource",27,null],[4,"IfMatch","","`If-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",28,null],[13,"Items","","Only the listed items are a match",28,null],[4,"DispositionType","","The implied disposition of the content of the HTTP body",null,null],[13,"Inline","","Inline implies default processing",29,null],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally, rather than process it normally (as per its media type).",29,null],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",29,null],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding` or `Accept-Encoding` header.",null,null],[13,"Chunked","","The `chunked` encoding.",30,null],[13,"Gzip","","The `gzip` encoding.",30,null],[13,"Deflate","","The `deflate` encoding.",30,null],[13,"Compress","","The `compress` encoding.",30,null],[13,"Identity","","The `identity` encoding.",30,null],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",30,null],[3,"Allow","","`Allow` header, defined in RFC7231",null,null],[12,"0","","",31,null],[4,"IfNoneMatch","","`If-None-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",32,null],[13,"Items","","Only the listed items are a match",32,null],[3,"AcceptCharset","","`Accept-Charset` header, defined in RFC7231",null,null],[12,"0","","",33,null],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in RFC7230",null,null],[12,"0","","",34,null],[3,"ContentLength","","`Content-Length` header, defined in RFC7230",null,null],[12,"0","","",35,null],[4,"Charset","","A Mime charset.",null,null],[13,"Us_Ascii","","US ASCII",36,null],[13,"Iso_8859_1","","ISO-8859-1",36,null],[13,"Iso_8859_2","","ISO-8859-2",36,null],[13,"Iso_8859_3","","ISO-8859-3",36,null],[13,"Iso_8859_4","","ISO-8859-4",36,null],[13,"Iso_8859_5","","ISO-8859-5",36,null],[13,"Iso_8859_6","","ISO-8859-6",36,null],[13,"Iso_8859_7","","ISO-8859-7",36,null],[13,"Iso_8859_8","","ISO-8859-8",36,null],[13,"Iso_8859_9","","ISO-8859-9",36,null],[13,"Iso_8859_10","","ISO-8859-10",36,null],[13,"Shift_Jis","","Shift_JIS",36,null],[13,"Euc_Jp","","EUC-JP",36,null],[13,"Iso_2022_Kr","","ISO-2022-KR",36,null],[13,"Euc_Kr","","EUC-KR",36,null],[13,"Iso_2022_Jp","","ISO-2022-JP",36,null],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",36,null],[13,"Iso_8859_6_E","","ISO-8859-6-E",36,null],[13,"Iso_8859_6_I","","ISO-8859-6-I",36,null],[13,"Iso_8859_8_E","","ISO-8859-8-E",36,null],[13,"Iso_8859_8_I","","ISO-8859-8-I",36,null],[13,"Gb2312","","GB2312",36,null],[13,"Big5","","Big5",36,null],[13,"Koi8_R","","KOI8-R",36,null],[13,"Ext","","An arbitrary charset specified as a string",36,null],[3,"EntityTag","","An entity tag, defined in RFC7232",null,null],[12,"weak","","Weakness indicator for the tag",37,null],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in RFC6797",null,null],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as any subdomains of the host's domain name.",38,null],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header field, during which the UA regards the host (from whom the message was received) as a Known HSTS Host.",38,null],[3,"LastModified","","`Last-Modified` header, defined in RFC7232",null,null],[12,"0","","",39,null],[3,"Basic","","Credential holder for Basic Authentication",null,null],[12,"username","","The username as a possibly empty string",40,null],[12,"password","","The password. `None` if the `:` delimiter character was not part of the parsed input.",40,null],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in RFC7232",null,null],[12,"0","","",41,null],[4,"ByteRangeSpec","","Each `Range::Bytes` header can contain one or more `ByteRangeSpecs`. Each `ByteRangeSpec` defines a range of bytes to fetch",null,null],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",42,null],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",42,null],[13,"Last","","Get last x bytes (\"-x\")",42,null],[3,"Upgrade","","`Upgrade` header, defined in RFC7230",null,null],[12,"0","","",43,null],[3,"Authorization","","`Authorization` header, defined in RFC7235",null,null],[12,"0","","",44,null],[8,"Scheme","","An Authorization scheme to be used in the header.",null,null],[10,"scheme","","An optional Scheme name.",45,{"inputs":[],"output":{"name":"option"}}],[10,"fmt_scheme","","Format the Scheme data into a header value.",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header, part of CORS",null,null],[13,"Any","","Allow all origins",46,null],[13,"Null","","A hidden origin",46,null],[13,"Value","","Allow one particular origin",46,null],[3,"Location","","`Location` header, defined in RFC7231",null,null],[12,"0","","",47,null],[3,"ContentLanguage","","`Content-Language` header, defined in RFC7231",null,null],[12,"0","","",48,null],[3,"CacheControl","","`Cache-Control` header, defined in RFC7234",null,null],[12,"0","","",49,null],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in RFC7232",null,null],[12,"0","","",50,null],[3,"Origin","","The `Origin` header.",null,null],[12,"scheme","","The scheme, such as http or https",51,null],[12,"host","","The host, such as Host{hostname: \"hyper.rs\".to_owned(), port: None}",51,null],[3,"Date","","`Date` header, defined in RFC7231",null,null],[12,"0","","",52,null],[4,"ContentRangeSpec","","Content-Range, described in RFC7233",null,null],[13,"Bytes","","Byte range",53,null],[12,"range","elastic::http::header::ContentRangeSpec","First and last bytes of the range, omitted if request could not be satisfied",53,null],[12,"instance_length","","Total length of the instance, can be omitted if unknown",53,null],[13,"Unregistered","elastic::http::header","Custom range, with unit not registered at IANA",53,null],[12,"unit","elastic::http::header::ContentRangeSpec","other-range-unit",53,null],[12,"resp","","other-range-resp",53,null],[3,"AcceptRanges","elastic::http::header","`Accept-Ranges` header, defined in RFC7233",null,null],[12,"0","","",54,null],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of CORS",null,null],[12,"0","","",55,null],[3,"From","","`From` header, defined in RFC7231",null,null],[12,"0","","",56,null],[3,"Prefer","","`Prefer` header, defined in RFC7240",null,null],[12,"0","","",57,null],[3,"SetCookie","","`Set-Cookie` header, defined RFC6265",null,null],[12,"0","","",58,null],[3,"Accept","","`Accept` header, defined in RFC7231",null,null],[12,"0","","",59,null],[4,"DispositionParam","","A parameter to the disposition type",null,null],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of bytes representing the filename",60,null],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized parameters.",60,null],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in RFC7231",null,null],[12,"0","","",61,null],[4,"Expect","","The `Expect` header.",null,null],[13,"Continue","","The value `100-continue`.",62,null],[3,"Connection","","`Connection` header, defined in RFC7230",null,null],[12,"0","","",63,null],[3,"ContentRange","","`Content-Range` header, defined in RFC7233",null,null],[12,"0","","",64,null],[3,"Referer","","`Referer` header, defined in RFC7231",null,null],[12,"0","","",65,null],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of CORS",null,null],[12,"0","","",66,null],[3,"PreferenceApplied","","`Preference-Applied` header, defined in RFC7240",null,null],[12,"0","","",67,null],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of CORS",null,null],[12,"0","","",68,null],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of CORS",null,null],[12,"0","","",69,null],[4,"ReferrerPolicy","","`Referrer-Policy` header, part of Referrer Policy",null,null],[13,"NoReferrer","","`no-referrer`",70,null],[13,"NoReferrerWhenDowngrade","","`no-referrer-when-downgrade`",70,null],[13,"SameOrigin","","`same-origin`",70,null],[13,"Origin","","`origin`",70,null],[13,"OriginWhenCrossOrigin","","`origin-when-cross-origin`",70,null],[13,"UnsafeUrl","","`unsafe-url`",70,null],[13,"StrictOrigin","","`strict-origin`",70,null],[13,"StrictOriginWhenCrossOrigin","","`strict-origin-when-cross-origin`",70,null],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in RFC6266",null,null],[12,"disposition","","The disposition",71,null],[12,"parameters","","Disposition parameters",71,null],[3,"Cookie","","`Cookie` header, defined in RFC6265",null,null],[12,"0","","",72,null],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",null,null],[12,"token","","Actual bearer token as a string",73,null],[3,"AcceptLanguage","","`Accept-Language` header, defined in RFC7231",null,null],[12,"0","","",74,null],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of CORS",null,null],[3,"ETag","","`ETag` header, defined in RFC7232",null,null],[12,"0","","",75,null],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",null,null],[12,"name","","The protocol identifier",76,null],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",76,null],[4,"ProtocolName","","A protocol name used to identify a spefic protocol. Names are case-sensitive except for the `WebSocket` value.",null,null],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",77,null],[13,"Tls","","`TLS` value, Transport Layer Security RFC2817",77,null],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol RFC6455",77,null],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",77,null],[13,"Unregistered","","Any other protocol name not known to hyper",77,null],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",null,null],[13,"NoCache","","Corresponds to the `no-cache` value.",78,null],[13,"Ext","","Every value other than `no-cache`.",78,null],[0,"client","elastic","HTTP client, requests and responses.",null,null],[3,"RequestParams","elastic::client","Misc parameters for any request.",null,null],[12,"base_url","","Base url for Elasticsearch.",79,null],[12,"url_params","","Simple key-value store for url query params.",79,null],[12,"headers","","The complete set of headers that will be sent with the request.",79,null],[3,"Client","","A HTTP client for the Elasticsearch REST API.",null,null],[3,"RequestBuilder","","A builder for a request.",null,null],[3,"ResponseBuilder","","A builder for a response.",null,null],[0,"requests","","Request types for the Elasticsearch REST API.",null,null],[8,"IntoBody","elastic::client::requests","A type that can be converted into a `reqwest::Body`.",null,null],[10,"into_body","","Convert self into a body.",80,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[3,"HttpRequest","","A general request type that all endpoints can be converted into.",null,null],[12,"url","","",81,null],[12,"method","","",81,null],[12,"body","","",81,null],[4,"HttpMethod","","A standard HTTP verb.",null,null],[13,"Head","","",82,null],[13,"Get","","",82,null],[13,"Post","","",82,null],[13,"Put","","",82,null],[13,"Delete","","",82,null],[13,"Patch","","",82,null],[5,"empty_body","","A convenience method for a default, empty body. This method doesn't allocate.",null,null],[3,"Url","","A wrapper around an owned or borrowed url.",null,null],[0,"params","","Common url params like `Id` and `Index`.",null,null],[3,"Fields","elastic::client::requests::params","",null,null],[12,"0","","",83,null],[3,"Id","","",null,null],[12,"0","","",84,null],[3,"Feature","","",null,null],[12,"0","","",85,null],[3,"Metric","","",null,null],[12,"0","","",86,null],[3,"NodeId","","",null,null],[12,"0","","",87,null],[3,"Repository","","",null,null],[12,"0","","",88,null],[3,"ScrollId","","",null,null],[12,"0","","",89,null],[3,"ThreadPoolPatterns","","",null,null],[12,"0","","",90,null],[3,"Lang","","",null,null],[12,"0","","",91,null],[3,"Index","","",null,null],[12,"0","","",92,null],[3,"Snapshot","","",null,null],[12,"0","","",93,null],[3,"Target","","",null,null],[12,"0","","",94,null],[3,"TaskId","","",null,null],[12,"0","","",95,null],[3,"NewIndex","","",null,null],[12,"0","","",96,null],[3,"Alias","","",null,null],[12,"0","","",97,null],[3,"IndexMetric","","",null,null],[12,"0","","",98,null],[3,"Type","","",null,null],[12,"0","","",99,null],[3,"Name","","",null,null],[12,"0","","",100,null],[0,"endpoints","elastic::client::requests","REST API endpoints.",null,null],[3,"MgetRequest","elastic::client::requests::endpoints","",null,null],[12,"url","","",101,null],[12,"body","","",101,null],[3,"CatRepositoriesRequest","","",null,null],[12,"url","","",102,null],[3,"IndicesGetTemplateRequest","","",null,null],[12,"url","","",103,null],[3,"TasksListRequest","","",null,null],[12,"url","","",104,null],[3,"IndicesGetMappingRequest","","",null,null],[12,"url","","",105,null],[3,"CatThreadPoolRequest","","",null,null],[12,"url","","",106,null],[3,"ClusterGetSettingsRequest","","",null,null],[12,"url","","",107,null],[3,"CreateRequest","","",null,null],[12,"url","","",108,null],[12,"body","","",108,null],[3,"IndicesPutAliasRequest","","",null,null],[12,"url","","",109,null],[12,"body","","",109,null],[3,"SearchShardsRequest","","",null,null],[12,"url","","",110,null],[12,"body","","",110,null],[3,"SearchTemplateRequest","","",null,null],[12,"url","","",111,null],[12,"body","","",111,null],[3,"IndicesShrinkRequest","","",null,null],[12,"url","","",112,null],[12,"body","","",112,null],[3,"CatPendingTasksRequest","","",null,null],[12,"url","","",113,null],[3,"CatTemplatesRequest","","",null,null],[12,"url","","",114,null],[3,"CatIndicesRequest","","",null,null],[12,"url","","",115,null],[3,"CatShardsRequest","","",null,null],[12,"url","","",116,null],[3,"TermvectorsRequest","","",null,null],[12,"url","","",117,null],[12,"body","","",117,null],[3,"IndicesPutMappingRequest","","",null,null],[12,"url","","",118,null],[12,"body","","",118,null],[3,"CatRecoveryRequest","","",null,null],[12,"url","","",119,null],[3,"SnapshotRestoreRequest","","",null,null],[12,"url","","",120,null],[12,"body","","",120,null],[3,"ReindexRethrottleRequest","","",null,null],[12,"url","","",121,null],[12,"body","","",121,null],[3,"MtermvectorsRequest","","",null,null],[12,"url","","",122,null],[12,"body","","",122,null],[3,"IndicesOpenRequest","","",null,null],[12,"url","","",123,null],[12,"body","","",123,null],[3,"CatPluginsRequest","","",null,null],[12,"url","","",124,null],[3,"NodesInfoRequest","","",null,null],[12,"url","","",125,null],[3,"SnapshotDeleteRepositoryRequest","","",null,null],[12,"url","","",126,null],[3,"ClusterRerouteRequest","","",null,null],[12,"url","","",127,null],[12,"body","","",127,null],[3,"IndicesAnalyzeRequest","","",null,null],[12,"url","","",128,null],[12,"body","","",128,null],[3,"IngestDeletePipelineRequest","","",null,null],[12,"url","","",129,null],[3,"SnapshotCreateRequest","","",null,null],[12,"url","","",130,null],[12,"body","","",130,null],[3,"IndicesDeleteAliasRequest","","",null,null],[12,"url","","",131,null],[3,"DeleteScriptRequest","","",null,null],[12,"url","","",132,null],[3,"IndicesShardStoresRequest","","",null,null],[12,"url","","",133,null],[3,"TasksCancelRequest","","",null,null],[12,"url","","",134,null],[12,"body","","",134,null],[3,"RenderSearchTemplateRequest","","",null,null],[12,"url","","",135,null],[12,"body","","",135,null],[3,"PercolateRequest","","",null,null],[12,"url","","",136,null],[12,"body","","",136,null],[3,"PutTemplateRequest","","",null,null],[12,"url","","",137,null],[12,"body","","",137,null],[3,"IndicesGetFieldMappingRequest","","",null,null],[12,"url","","",138,null],[3,"ReindexRequest","","",null,null],[12,"url","","",139,null],[12,"body","","",139,null],[3,"IndicesClearCacheRequest","","",null,null],[12,"url","","",140,null],[12,"body","","",140,null],[3,"CatCountRequest","","",null,null],[12,"url","","",141,null],[3,"CountPercolateRequest","","",null,null],[12,"url","","",142,null],[12,"body","","",142,null],[3,"IngestPutPipelineRequest","","",null,null],[12,"url","","",143,null],[12,"body","","",143,null],[3,"SnapshotGetRequest","","",null,null],[12,"url","","",144,null],[3,"IndicesUpdateAliasesRequest","","",null,null],[12,"url","","",145,null],[12,"body","","",145,null],[3,"IndicesCreateRequest","","",null,null],[12,"url","","",146,null],[12,"body","","",146,null],[3,"SnapshotVerifyRepositoryRequest","","",null,null],[12,"url","","",147,null],[12,"body","","",147,null],[3,"CatSegmentsRequest","","",null,null],[12,"url","","",148,null],[3,"SnapshotCreateRepositoryRequest","","",null,null],[12,"url","","",149,null],[12,"body","","",149,null],[3,"ClusterPendingTasksRequest","","",null,null],[12,"url","","",150,null],[3,"CatTasksRequest","","",null,null],[12,"url","","",151,null],[3,"UpdateByQueryRequest","","",null,null],[12,"url","","",152,null],[12,"body","","",152,null],[3,"SearchRequest","","",null,null],[12,"url","","",153,null],[12,"body","","",153,null],[3,"IndicesGetUpgradeRequest","","",null,null],[12,"url","","",154,null],[3,"SnapshotDeleteRequest","","",null,null],[12,"url","","",155,null],[3,"IndicesExistsTypeRequest","","",null,null],[12,"url","","",156,null],[3,"NodesStatsRequest","","",null,null],[12,"url","","",157,null],[3,"CatNodesRequest","","",null,null],[12,"url","","",158,null],[3,"IndicesExistsRequest","","",null,null],[12,"url","","",159,null],[3,"SimpleSearchRequest","","",null,null],[12,"url","","",160,null],[3,"IndicesUpgradeRequest","","",null,null],[12,"url","","",161,null],[12,"body","","",161,null],[3,"DeleteRequest","","",null,null],[12,"url","","",162,null],[3,"IndicesExistsAliasRequest","","",null,null],[12,"url","","",163,null],[3,"CatMasterRequest","","",null,null],[12,"url","","",164,null],[3,"CountRequest","","",null,null],[12,"url","","",165,null],[12,"body","","",165,null],[3,"SnapshotStatusRequest","","",null,null],[12,"url","","",166,null],[3,"DeleteByQueryRequest","","",null,null],[12,"url","","",167,null],[12,"body","","",167,null],[3,"IndicesGetAliasRequest","","",null,null],[12,"url","","",168,null],[3,"IngestGetPipelineRequest","","",null,null],[12,"url","","",169,null],[3,"BulkRequest","","",null,null],[12,"url","","",170,null],[12,"body","","",170,null],[3,"MpercolateRequest","","",null,null],[12,"url","","",171,null],[12,"body","","",171,null],[3,"SuggestRequest","","",null,null],[12,"url","","",172,null],[12,"body","","",172,null],[3,"ClusterHealthRequest","","",null,null],[12,"url","","",173,null],[3,"TasksGetRequest","","",null,null],[12,"url","","",174,null],[3,"IndicesFlushRequest","","",null,null],[12,"url","","",175,null],[12,"body","","",175,null],[3,"CatFielddataRequest","","",null,null],[12,"url","","",176,null],[3,"ClusterStateRequest","","",null,null],[12,"url","","",177,null],[3,"IndicesFlushSyncedRequest","","",null,null],[12,"url","","",178,null],[12,"body","","",178,null],[3,"NodesHotThreadsRequest","","",null,null],[12,"url","","",179,null],[3,"IndicesPutSettingsRequest","","",null,null],[12,"url","","",180,null],[12,"body","","",180,null],[3,"ExplainRequest","","",null,null],[12,"url","","",181,null],[12,"body","","",181,null],[3,"DeleteTemplateRequest","","",null,null],[12,"url","","",182,null],[3,"PutScriptRequest","","",null,null],[12,"url","","",183,null],[12,"body","","",183,null],[3,"CatNodeattrsRequest","","",null,null],[12,"url","","",184,null],[3,"ExistsRequest","","",null,null],[12,"url","","",185,null],[3,"PingRequest","","",null,null],[12,"url","","",186,null],[3,"IndicesDeleteTemplateRequest","","",null,null],[12,"url","","",187,null],[3,"SnapshotGetRepositoryRequest","","",null,null],[12,"url","","",188,null],[3,"MsearchRequest","","",null,null],[12,"url","","",189,null],[12,"body","","",189,null],[3,"IngestSimulateRequest","","",null,null],[12,"url","","",190,null],[12,"body","","",190,null],[3,"IndicesGetSettingsRequest","","",null,null],[12,"url","","",191,null],[3,"ClusterPutSettingsRequest","","",null,null],[12,"url","","",192,null],[12,"body","","",192,null],[3,"IndicesCloseRequest","","",null,null],[12,"url","","",193,null],[12,"body","","",193,null],[3,"IndicesRefreshRequest","","",null,null],[12,"url","","",194,null],[12,"body","","",194,null],[3,"ClusterAllocationExplainRequest","","",null,null],[12,"url","","",195,null],[12,"body","","",195,null],[3,"ClusterStatsRequest","","",null,null],[12,"url","","",196,null],[3,"IndicesSegmentsRequest","","",null,null],[12,"url","","",197,null],[3,"CatAllocationRequest","","",null,null],[12,"url","","",198,null],[3,"IndicesRolloverRequest","","",null,null],[12,"url","","",199,null],[12,"body","","",199,null],[3,"FieldStatsRequest","","",null,null],[12,"url","","",200,null],[12,"body","","",200,null],[3,"IndicesDeleteRequest","","",null,null],[12,"url","","",201,null],[3,"ClearScrollRequest","","",null,null],[12,"url","","",202,null],[12,"body","","",202,null],[3,"IndexRequest","","",null,null],[12,"url","","",203,null],[12,"body","","",203,null],[3,"IndicesGetRequest","","",null,null],[12,"url","","",204,null],[3,"GetScriptRequest","","",null,null],[12,"url","","",205,null],[3,"CatHealthRequest","","",null,null],[12,"url","","",206,null],[3,"UpdateRequest","","",null,null],[12,"url","","",207,null],[12,"body","","",207,null],[3,"CatHelpRequest","","",null,null],[12,"url","","",208,null],[3,"IndicesPutTemplateRequest","","",null,null],[12,"url","","",209,null],[12,"body","","",209,null],[3,"CatSnapshotsRequest","","",null,null],[12,"url","","",210,null],[3,"IndicesForcemergeRequest","","",null,null],[12,"url","","",211,null],[12,"body","","",211,null],[3,"GetRequest","","",null,null],[12,"url","","",212,null],[3,"ScrollRequest","","",null,null],[12,"url","","",213,null],[12,"body","","",213,null],[3,"InfoRequest","","",null,null],[12,"url","","",214,null],[3,"IndicesValidateQueryRequest","","",null,null],[12,"url","","",215,null],[12,"body","","",215,null],[3,"IndicesExistsTemplateRequest","","",null,null],[12,"url","","",216,null],[3,"CatAliasesRequest","","",null,null],[12,"url","","",217,null],[3,"IndicesStatsRequest","","",null,null],[12,"url","","",218,null],[3,"IndicesRecoveryRequest","","",null,null],[12,"url","","",219,null],[3,"GetTemplateRequest","","",null,null],[12,"url","","",220,null],[3,"MsearchTemplateRequest","","",null,null],[12,"url","","",221,null],[12,"body","","",221,null],[3,"GetSourceRequest","","",null,null],[12,"url","","",222,null],[8,"TryForDoc","elastic::client::requests","A trait for converting a document into a request.",null,null],[10,"try_for_doc","","Try convert a document into a request type.",223,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[8,"TryForMapping","","A trait for converting a document mapping  mapping into a request.",null,null],[10,"try_for_mapping","","Try convert a document mapping into a request.",224,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[0,"responses","elastic::client","Response types for the Elasticsearch REST API.",null,null],[3,"HttpResponse","elastic::client::responses","A raw HTTP response with enough information to parse a concrete type from it.",null,null],[3,"AggregationIterator","","Aggregator that traverses the results from Elasticsearch's Aggregations and returns a result row by row in a table-styled fashion.",null,null],[3,"Aggregations","","Type Struct to hold a generic `serde_json::Value` tree of the Aggregation results.",null,null],[3,"Hit","","",null,null],[12,"index","","",225,null],[12,"ty","","",225,null],[12,"version","","",225,null],[12,"score","","",225,null],[12,"source","","",225,null],[12,"routing","","",225,null],[3,"Hits","","Struct to hold the search's Hits, serializable to type `T` or `serde_json::Value`",null,null],[12,"total","","",226,null],[12,"max_score","","",226,null],[12,"hits","","",226,null],[3,"Shards","","",null,null],[12,"total","","",227,null],[12,"successful","","",227,null],[12,"failed","","",227,null],[0,"parse","","Utility types for response parsing.",null,null],[8,"FromResponse","elastic::client::responses::parse","Convert a response message into a either a success or failure result.",null,null],[10,"from_response","","",228,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[3,"MaybeOkResponse","","A response that might be successful or an `ApiError`.",null,null],[4,"MaybeBufferedResponse","","A response body that may or may not have been buffered.",null,null],[13,"Unbuffered","","",229,null],[13,"Buffered","","",229,null],[3,"UnbufferedResponse","","An untouched response body.",null,null],[3,"BufferedResponse","","A previously buffered response body.",null,null],[6,"SearchResponse","elastic::client::responses","A generic Search API response.",null,null],[6,"GetResponse","","A generic Get Document API response.",null,null],[11,"new","elastic::client","Create a new client for the given parameters.",230,{"inputs":[{"name":"requestparams"}],"output":{"name":"result"}}],[11,"request","","Create a `RequestBuilder` that can be configured before sending.",230,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"requestbuilder"}}],[11,"params","","Override the parameters for this request.",231,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"send","","Send this request and return the response.",231,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","",232,{"inputs":[{"name":"rawresponse"}],"output":{"name":"self"}}],[11,"into","","",232,{"inputs":[{"name":"self"}],"output":{"name":"httpresponse"}}],[11,"raw","","Get the raw HTTP response.",232,{"inputs":[{"name":"self"}],"output":{"name":"httpresponse"}}],[11,"status","","Get the HTTP status for the response.",232,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"response","","Get the response body from JSON.",232,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"types","elastic","Indexable documents and type mapping.",null,null],[0,"document","elastic::types","Base requirements for indexable document mappings.",null,null],[8,"DocumentType","elastic::types::document","The additional fields available to an indexable Elasticsearch type.",null,null],[11,"name","","Get the name for this type.",233,{"inputs":[],"output":{"name":"str"}}],[3,"Document","","A wrapper type for serialising user types.",null,null],[17,"OBJECT_DATATYPE","","Elasticsearch datatype name.",null,null],[17,"DYNAMIC_DATATYPE","","Elasticsearch datatype name.",null,null],[17,"NESTED_DATATYPE","","Elasticsearch datatype name.",null,null],[8,"DocumentMapping","","The base requirements for mapping an `object` type.",null,null],[10,"name","","Get the indexed name for this mapping.",234,{"inputs":[],"output":{"name":"str"}}],[11,"data_type","","Get the type name for this mapping, like `object` or `nested`.",234,{"inputs":[],"output":{"name":"str"}}],[11,"dynamic","","Whether or not new properties should be added dynamically to an existing object. Accepts `true` (default), `false` and `strict`.",234,{"inputs":[],"output":{"name":"option"}}],[11,"enabled","","Whether the JSON value given for the object field should be parsed and indexed (`true`, default) or completely ignored (`false`).",234,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Sets the default `include_in_all` value for all the properties within the object. The object itself is not added to the `_all` field.",234,{"inputs":[],"output":{"name":"option"}}],[8,"PropertiesMapping","","Serialisation for the mapping of object properties.",null,null],[10,"props_len","","The number of mapped property fields for this type.",235,{"inputs":[],"output":{"name":"usize"}}],[10,"serialize_props","","Serialisation for the mapped property fields on this type.",235,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[4,"Dynamic","","The dynamic setting may be set at the mapping type level, and on each inner object. Inner objects inherit the setting from their parent object or from the mapping type.",null,null],[13,"True","","Newly detected fields are added to the mapping. (default).",236,null],[13,"False","","Newly detected fields are ignored. New fields must be added explicitly.",236,null],[13,"Strict","","If new fields are detected, an exception is thrown and the document is rejected.",236,null],[5,"field_ser","","Serialise a field mapping using the given serialiser.",null,{"inputs":[{"name":"s"},{"name":"str"},{"name":"m"}],"output":{"name":"result"}}],[5,"doc_ser","","Serialise a document mapping using the given serialiser.",null,{"inputs":[{"name":"s"},{"name":"str"},{"name":"m"}],"output":{"name":"result"}}],[0,"boolean","elastic::types","Implementation of the Elasticsearch `boolean` types.",null,null],[0,"mapping","elastic::types::boolean","Mapping for the Elasticsearch `boolean` type.",null,null],[17,"BOOLEAN_DATATYPE","elastic::types::boolean::mapping","Elasticsearch datatype name.",null,null],[8,"BooleanMapping","","The base requirements for mapping a `boolean` type.",null,null],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",237,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",237,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",237,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a string value which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",237,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",237,{"inputs":[],"output":{"name":"option"}}],[3,"DefaultBooleanMapping","","Default mapping for `bool`.",null,null],[0,"prelude","elastic::types::boolean","Includes all types for the `boolean` type.",null,null],[8,"BooleanMapping","elastic::types::boolean::prelude","The base requirements for mapping a `boolean` type.",null,null],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",237,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",237,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",237,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a string value which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",237,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",237,{"inputs":[],"output":{"name":"option"}}],[3,"DefaultBooleanMapping","","Default mapping for `bool`.",null,null],[17,"BOOLEAN_DATATYPE","","Elasticsearch datatype name.",null,null],[3,"Boolean","","An Elasticsearch `boolean` with a mapping.",null,null],[3,"Boolean","elastic::types::boolean","An Elasticsearch `boolean` with a mapping.",null,null],[0,"date","elastic::types","Implementation of the Elasticsearch `date` type.",null,null],[0,"mapping","elastic::types::date","Mapping for the Elasticsearch `date` type.",null,null],[17,"DATE_DATATYPE","elastic::types::date::mapping","Elasticsearch datatype name.",null,null],[8,"DateMapping","","The base requirements for mapping a `date` type.",null,null],[16,"Format","","The date format bound to this mapping.",238,null],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",238,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",238,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",238,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",238,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",238,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",238,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a date value in one of the configured format's as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",238,{"inputs":[],"output":{"name":"option"}}],[3,"DefaultDateMapping","","Default mapping for `date`.",null,null],[6,"ChronoDateTime","elastic::types::date","A re-export of the `chrono::DateTime` struct with `UTC` timezone.",null,null],[6,"DefaultDateFormat","","The default `date` format (`BasicDateTime`).",null,null],[0,"prelude","","Includes all types for the `date` type.",null,null],[3,"ChronoFormat","elastic::types::date::prelude","Format for default `chrono::DateTime`.",null,null],[5,"parse_from_tokens","","Parse a date string using an owned slice of items.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"result"}}],[3,"BasicDateTime","","Format for `basic_date_time`.",null,null],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",239,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",239,null],[10,"minute","","Returns the minute number from 0 to 59.",239,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"second","","Returns the second number from 0 to 59.",239,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",239,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"with_hour","","Makes a new value with the hour number changed.",239,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_minute","","Makes a new value with the minute number changed.",239,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_second","","Makes a new value with the second number changed.",239,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",239,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",239,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[3,"BasicDateTimeNoMillis","","Format for `basic_date_time_no_millis`.",null,null],[6,"DefaultDateFormat","","The default `date` format (`BasicDateTime`).",null,null],[5,"format_with_tokens","","Format a date string using an owned slice of items.",null,{"inputs":[{"name":"datetime"},{"name":"vec"}],"output":{"name":"string"}}],[8,"DateFormat","","A format used for parsing and formatting dates.",null,null],[10,"parse","","Parses a date string to a `chrono::DateTime<UTC>` result.",240,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[10,"format","","Formats a given `chrono::DateTime<UTC>` as a string.",240,{"inputs":[{"name":"datetime"}],"output":{"name":"string"}}],[10,"name","","The name of the format.",240,{"inputs":[],"output":{"name":"str"}}],[3,"ParseError","","Represents an error encountered during parsing.",null,null],[8,"DateMapping","","The base requirements for mapping a `date` type.",null,null],[16,"Format","","The date format bound to this mapping.",238,null],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",238,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",238,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",238,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",238,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",238,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",238,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a date value in one of the configured format's as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",238,{"inputs":[],"output":{"name":"option"}}],[17,"DATE_DATATYPE","","Elasticsearch datatype name.",null,null],[3,"DefaultDateMapping","","Default mapping for `date`.",null,null],[3,"Date","","An Elasticsearch `date` type with a required `time` component.",null,null],[3,"EpochMillis","","Format for `epoch_millis`.",null,null],[8,"Datelike","","The common set of methods for date component.",null,null],[10,"year","","Returns the year number in the calendar date.",241,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",241,null],[10,"month","","Returns the month number starting from 1.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"month0","","Returns the month number starting from 0.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day","","Returns the day of month starting from 1.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day0","","Returns the day of month starting from 0.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal","","Returns the day of year starting from 1.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal0","","Returns the day of year starting from 0.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"weekday","","Returns the day of week.",241,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[10,"isoweekdate","","Returns the ISO week date: an adjusted year, week number and day of week. The adjusted year may differ from that of the calendar date.",241,null],[10,"with_year","","Makes a new value with the year number changed.",241,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",241,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",241,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",241,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",241,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",241,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",241,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",241,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[3,"ChronoFormat","elastic::types::date","Format for default `chrono::DateTime`.",null,null],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",239,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",239,null],[10,"minute","","Returns the minute number from 0 to 59.",239,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"second","","Returns the second number from 0 to 59.",239,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",239,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"with_hour","","Makes a new value with the hour number changed.",239,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_minute","","Makes a new value with the minute number changed.",239,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_second","","Makes a new value with the second number changed.",239,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",239,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",239,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[3,"BasicDateTimeNoMillis","","Format for `basic_date_time_no_millis`.",null,null],[5,"format_with_tokens","","Format a date string using an owned slice of items.",null,{"inputs":[{"name":"datetime"},{"name":"vec"}],"output":{"name":"string"}}],[3,"ParseError","","Represents an error encountered during parsing.",null,null],[3,"Date","","An Elasticsearch `date` type with a required `time` component.",null,null],[5,"parse_from_tokens","","Parse a date string using an owned slice of items.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"result"}}],[3,"BasicDateTime","","Format for `basic_date_time`.",null,null],[8,"DateFormat","","A format used for parsing and formatting dates.",null,null],[10,"parse","","Parses a date string to a `chrono::DateTime<UTC>` result.",240,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[10,"format","","Formats a given `chrono::DateTime<UTC>` as a string.",240,{"inputs":[{"name":"datetime"}],"output":{"name":"string"}}],[10,"name","","The name of the format.",240,{"inputs":[],"output":{"name":"str"}}],[3,"EpochMillis","","Format for `epoch_millis`.",null,null],[8,"Datelike","","The common set of methods for date component.",null,null],[10,"year","","Returns the year number in the calendar date.",241,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",241,null],[10,"month","","Returns the month number starting from 1.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"month0","","Returns the month number starting from 0.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day","","Returns the day of month starting from 1.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day0","","Returns the day of month starting from 0.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal","","Returns the day of year starting from 1.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal0","","Returns the day of year starting from 0.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"weekday","","Returns the day of week.",241,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[10,"isoweekdate","","Returns the ISO week date: an adjusted year, week number and day of week. The adjusted year may differ from that of the calendar date.",241,null],[10,"with_year","","Makes a new value with the year number changed.",241,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",241,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",241,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",241,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",241,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",241,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",241,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",241,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[0,"geo","elastic::types","Implementation of the Elasticsearch `geo` types.",null,null],[0,"point","elastic::types::geo","Implementation of the Elasticsearch `geo_point` type.",null,null],[0,"mapping","elastic::types::geo::point","Mapping for the Elasticsearch `geo_point` type.",null,null],[17,"GEOPOINT_DATATYPE","elastic::types::geo::point::mapping","Elasticsearch datatype name.",null,null],[8,"GeoPointMapping","","The base requirements for mapping a `geo_point` type.",null,null],[16,"Format","","The format used to serialise and deserialise the geo point.",242,null],[11,"geohash","","Should the `geo-point` also be indexed as a geohash in the `.geohash` sub-field? Defaults to `false`, unless `geohash_prefix` is `true`.",242,{"inputs":[],"output":{"name":"option"}}],[11,"geohash_precision","","The maximum length of the geohash to use for the geohash and `geohash_prefix` options.",242,{"inputs":[],"output":{"name":"option"}}],[11,"geohash_prefix","","Should the `geo-point` also be indexed as a geohash plus all its prefixes? Defaults to `false`.",242,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed `geo-points` are ignored. If `false` (default), malformed `geo-points` throw an exception and reject the whole document.",242,{"inputs":[],"output":{"name":"option"}}],[11,"lat_lon","","Should the `geo-point` also be indexed as `.lat` and `.lon` sub-fields? Accepts `true` and `false` (default).",242,{"inputs":[],"output":{"name":"option"}}],[3,"DefaultGeoPointMapping","","Default mapping for `geo_point`.",null,null],[6,"DefaultGeoPointFormat","elastic::types::geo::point","The default `geo_point` format (`GeoPointArray`).",null,null],[0,"prelude","","Includes all types for the `geo_point` type.",null,null],[6,"DefaultGeoPointFormat","elastic::types::geo::point::prelude","The default `geo_point` format (`GeoPointArray`).",null,null],[8,"GeoPointMapping","","The base requirements for mapping a `geo_point` type.",null,null],[16,"Format","","The format used to serialise and deserialise the geo point.",242,null],[11,"geohash","","Should the `geo-point` also be indexed as a geohash in the `.geohash` sub-field? Defaults to `false`, unless `geohash_prefix` is `true`.",242,{"inputs":[],"output":{"name":"option"}}],[11,"geohash_precision","","The maximum length of the geohash to use for the geohash and `geohash_prefix` options.",242,{"inputs":[],"output":{"name":"option"}}],[11,"geohash_prefix","","Should the `geo-point` also be indexed as a geohash plus all its prefixes? Defaults to `false`.",242,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed `geo-points` are ignored. If `false` (default), malformed `geo-points` throw an exception and reject the whole document.",242,{"inputs":[],"output":{"name":"option"}}],[11,"lat_lon","","Should the `geo-point` also be indexed as `.lat` and `.lon` sub-fields? Accepts `true` and `false` (default).",242,{"inputs":[],"output":{"name":"option"}}],[3,"GeoPointString","","Geo-point expressed as a string with the format: `\"lat,lon\"`.",null,null],[3,"GeoPoint","","An Elasticsearch `geo_point` type with a format.",null,null],[3,"GeoPointObject","","Geo-point expressed as an object, with `lat` and `lon` keys.",null,null],[3,"GeoPointArray","","Geo-point expressed as an array with the format: `[lon, lat]`",null,null],[17,"GEOPOINT_DATATYPE","","Elasticsearch datatype name.",null,null],[8,"GeoPointFormat","","A format used for parsing and formatting geo points.",null,null],[10,"parse","","Parses a `geo::Point`.",243,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[10,"format","","Formats a `geo::Point`.",243,{"inputs":[{"name":"point"},{"name":"s"}],"output":{"name":"result"}}],[3,"DefaultGeoPointMapping","","Default mapping for `geo_point`.",null,null],[3,"GeoPointHash","","Geo-point expressed as a geohash.",null,null],[3,"GeoPointString","elastic::types::geo::point","Geo-point expressed as a string with the format: `\"lat,lon\"`.",null,null],[3,"GeoPointArray","","Geo-point expressed as an array with the format: `[lon, lat]`",null,null],[3,"GeoPointHash","","Geo-point expressed as a geohash.",null,null],[3,"GeoPoint","","An Elasticsearch `geo_point` type with a format.",null,null],[3,"GeoPointObject","","Geo-point expressed as an object, with `lat` and `lon` keys.",null,null],[8,"GeoPointFormat","","A format used for parsing and formatting geo points.",null,null],[10,"parse","","Parses a `geo::Point`.",243,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[10,"format","","Formats a `geo::Point`.",243,{"inputs":[{"name":"point"},{"name":"s"}],"output":{"name":"result"}}],[0,"shape","elastic::types::geo","Implementation of the Elasticsearch `geo_shape` type.",null,null],[0,"mapping","elastic::types::geo::shape","Mapping for Elasticsearch `geo_shape` types.",null,null],[17,"GEOSHAPE_DATATYPE","elastic::types::geo::shape::mapping","Elasticsearch datatype name.",null,null],[8,"GeoShapeMapping","","The base requirements for mapping a `geo_shape` type.",null,null],[11,"tree","","Name of the PrefixTree implementation to be used: `geohash` for `GeohashPrefixTree` and `quadtree` for `QuadPrefixTree`.",244,{"inputs":[],"output":{"name":"option"}}],[11,"precision","","This parameter may be used instead of `tree_levels` to set an appropriate value for the `tree_levels` parameter. The value specifies the desired precision and Elasticsearch will calculate the best `tree_levels` value to honor this precision. The value should be a number followed by an optional distance unit.",244,{"inputs":[],"output":{"name":"option"}}],[11,"tree_levels","","Maximum number of layers to be used by the `PrefixTree`. This can be used to control the precision of shape representations and therefore how many terms are indexed. Defaults to the default value of the chosen `PrefixTree` implementation. Since this parameter requires a certain level of understanding of the underlying implementation, users may use the `precision` parameter instead. However, Elasticsearch only uses the `tree_levels` parameter internally and this is what is returned via the mapping API even if you use the `precision` parameter.",244,{"inputs":[],"output":{"name":"option"}}],[11,"strategy","","The `strategy` parameter defines the approach for how to represent shapes at indexing and search time. It also influences the capabilities available so it is recommended to let Elasticsearch set this parameter automatically. There are two strategies available: `recursive` and `term`. Term strategy supports point types only (the `points_only` parameter will be automatically set to `true`) while `Recursive` strategy supports all shape types.",244,{"inputs":[],"output":{"name":"option"}}],[11,"distance_error_pct","","Used as a hint to the `PrefixTree` about how precise it should be. Defaults to `0.025` (2.5%) with `0.5` as the maximum supported value.",244,{"inputs":[],"output":{"name":"option"}}],[11,"orientation","","Setting this parameter in the `geo_shape` mapping explicitly sets vertex order for the coordinate list of a `geo_shape` field but can be overridden in each individual GeoJSON document.",244,{"inputs":[],"output":{"name":"option"}}],[11,"points_only","","Setting this option to `true` (defaults to `false`) configures the `geo_shape` field type for point shapes only (NOTE: Multi-Points are not yet supported). This optimizes index and search performance for the geohash and quadtree when it is known that only points will be indexed. At present `geo_shape` queries can not be executed on geo_point field types. This option bridges the gap by improving point performance on a `geo_shape` field so that geo_shape queries are optimal on a point only field.",244,{"inputs":[],"output":{"name":"option"}}],[3,"DefaultGeoShapeMapping","","Default mapping for `geo_shape`.",null,null],[4,"Tree","","Name of the `PrefixTree` implementation to be used.",null,null],[13,"Geohash","","For `GeohashPrefixTree`.",245,null],[13,"QuadPrefix","","For `QuadPrefixTree`.",245,null],[4,"Strategy","","The strategy defines the approach for how to represent shapes at indexing and search time.",null,null],[13,"Recursive","","Recursive strategy supports all shape types.",246,null],[13,"Term","","Term strategy supports point types only.",246,null],[4,"Orientation","","This parameter defines one of two coordinate system rules (Right-hand or Left-hand) each of which can be specified in a few different ways. - Right-hand rule: right, ccw, counterclockwise, - Left-hand rule: left, cw, clockwise. The default orientation (counterclockwise) complies with the OGC standard which defines outer ring vertices in counterclockwise order with inner ring(s) vertices (holes) in clockwise order.",null,null],[13,"Clockwise","","For `cw`.",247,null],[13,"CounterClockwise","","For `ccw`.",247,null],[0,"prelude","elastic::types::geo::shape","Includes all types for the `geo_shape` types.",null,null],[4,"Strategy","elastic::types::geo::shape::prelude","The strategy defines the approach for how to represent shapes at indexing and search time.",null,null],[13,"Recursive","","Recursive strategy supports all shape types.",246,null],[13,"Term","","Term strategy supports point types only.",246,null],[3,"DefaultGeoShapeMapping","","Default mapping for `geo_shape`.",null,null],[3,"GeoShape","","Geo shape type with a given mapping.",null,null],[8,"GeoShapeMapping","","The base requirements for mapping a `geo_shape` type.",null,null],[11,"tree","","Name of the PrefixTree implementation to be used: `geohash` for `GeohashPrefixTree` and `quadtree` for `QuadPrefixTree`.",244,{"inputs":[],"output":{"name":"option"}}],[11,"precision","","This parameter may be used instead of `tree_levels` to set an appropriate value for the `tree_levels` parameter. The value specifies the desired precision and Elasticsearch will calculate the best `tree_levels` value to honor this precision. The value should be a number followed by an optional distance unit.",244,{"inputs":[],"output":{"name":"option"}}],[11,"tree_levels","","Maximum number of layers to be used by the `PrefixTree`. This can be used to control the precision of shape representations and therefore how many terms are indexed. Defaults to the default value of the chosen `PrefixTree` implementation. Since this parameter requires a certain level of understanding of the underlying implementation, users may use the `precision` parameter instead. However, Elasticsearch only uses the `tree_levels` parameter internally and this is what is returned via the mapping API even if you use the `precision` parameter.",244,{"inputs":[],"output":{"name":"option"}}],[11,"strategy","","The `strategy` parameter defines the approach for how to represent shapes at indexing and search time. It also influences the capabilities available so it is recommended to let Elasticsearch set this parameter automatically. There are two strategies available: `recursive` and `term`. Term strategy supports point types only (the `points_only` parameter will be automatically set to `true`) while `Recursive` strategy supports all shape types.",244,{"inputs":[],"output":{"name":"option"}}],[11,"distance_error_pct","","Used as a hint to the `PrefixTree` about how precise it should be. Defaults to `0.025` (2.5%) with `0.5` as the maximum supported value.",244,{"inputs":[],"output":{"name":"option"}}],[11,"orientation","","Setting this parameter in the `geo_shape` mapping explicitly sets vertex order for the coordinate list of a `geo_shape` field but can be overridden in each individual GeoJSON document.",244,{"inputs":[],"output":{"name":"option"}}],[11,"points_only","","Setting this option to `true` (defaults to `false`) configures the `geo_shape` field type for point shapes only (NOTE: Multi-Points are not yet supported). This optimizes index and search performance for the geohash and quadtree when it is known that only points will be indexed. At present `geo_shape` queries can not be executed on geo_point field types. This option bridges the gap by improving point performance on a `geo_shape` field so that geo_shape queries are optimal on a point only field.",244,{"inputs":[],"output":{"name":"option"}}],[4,"Tree","","Name of the `PrefixTree` implementation to be used.",null,null],[13,"Geohash","","For `GeohashPrefixTree`.",245,null],[13,"QuadPrefix","","For `QuadPrefixTree`.",245,null],[17,"GEOSHAPE_DATATYPE","","Elasticsearch datatype name.",null,null],[4,"Orientation","","This parameter defines one of two coordinate system rules (Right-hand or Left-hand) each of which can be specified in a few different ways. - Right-hand rule: right, ccw, counterclockwise, - Left-hand rule: left, cw, clockwise. The default orientation (counterclockwise) complies with the OGC standard which defines outer ring vertices in counterclockwise order with inner ring(s) vertices (holes) in clockwise order.",null,null],[13,"Clockwise","","For `cw`.",247,null],[13,"CounterClockwise","","For `ccw`.",247,null],[3,"GeoShape","elastic::types::geo::shape","Geo shape type with a given mapping.",null,null],[0,"mapping","elastic::types::geo","Common mapping for the Elasticsearch `geo` types.",null,null],[4,"DistanceUnit","elastic::types::geo::mapping","A unit of measure for distance.",null,null],[13,"Inches","","For `in`.",248,null],[13,"Yards","","For `yd`.",248,null],[13,"Miles","","For `mi`.",248,null],[13,"Kilometers","","For `km`.",248,null],[13,"Meters","","For `m`.",248,null],[13,"Centimeters","","For `cm`.",248,null],[13,"Millimeters","","For `mm`.",248,null],[3,"Distance","","A distance value paired with a unit of measure.",null,null],[12,"0","","",249,null],[12,"1","","",249,null],[0,"prelude","elastic::types::geo","Includes all types for the `geo_point` and `geo_shape` types.",null,null],[3,"GeoPointHash","elastic::types::geo::prelude","Geo-point expressed as a geohash.",null,null],[4,"Strategy","","The strategy defines the approach for how to represent shapes at indexing and search time.",null,null],[13,"Recursive","","Recursive strategy supports all shape types.",246,null],[13,"Term","","Term strategy supports point types only.",246,null],[4,"DistanceUnit","","A unit of measure for distance.",null,null],[13,"Inches","","For `in`.",248,null],[13,"Yards","","For `yd`.",248,null],[13,"Miles","","For `mi`.",248,null],[13,"Kilometers","","For `km`.",248,null],[13,"Meters","","For `m`.",248,null],[13,"Centimeters","","For `cm`.",248,null],[13,"Millimeters","","For `mm`.",248,null],[6,"DefaultGeoPointFormat","","The default `geo_point` format (`GeoPointArray`).",null,null],[3,"DefaultGeoShapeMapping","","Default mapping for `geo_shape`.",null,null],[3,"GeoShape","","Geo shape type with a given mapping.",null,null],[8,"GeoPointMapping","","The base requirements for mapping a `geo_point` type.",null,null],[16,"Format","","The format used to serialise and deserialise the geo point.",242,null],[11,"geohash","","Should the `geo-point` also be indexed as a geohash in the `.geohash` sub-field? Defaults to `false`, unless `geohash_prefix` is `true`.",242,{"inputs":[],"output":{"name":"option"}}],[11,"geohash_precision","","The maximum length of the geohash to use for the geohash and `geohash_prefix` options.",242,{"inputs":[],"output":{"name":"option"}}],[11,"geohash_prefix","","Should the `geo-point` also be indexed as a geohash plus all its prefixes? Defaults to `false`.",242,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed `geo-points` are ignored. If `false` (default), malformed `geo-points` throw an exception and reject the whole document.",242,{"inputs":[],"output":{"name":"option"}}],[11,"lat_lon","","Should the `geo-point` also be indexed as `.lat` and `.lon` sub-fields? Accepts `true` and `false` (default).",242,{"inputs":[],"output":{"name":"option"}}],[4,"Tree","","Name of the `PrefixTree` implementation to be used.",null,null],[13,"Geohash","","For `GeohashPrefixTree`.",245,null],[13,"QuadPrefix","","For `QuadPrefixTree`.",245,null],[8,"GeoShapeMapping","","The base requirements for mapping a `geo_shape` type.",null,null],[11,"tree","","Name of the PrefixTree implementation to be used: `geohash` for `GeohashPrefixTree` and `quadtree` for `QuadPrefixTree`.",244,{"inputs":[],"output":{"name":"option"}}],[11,"precision","","This parameter may be used instead of `tree_levels` to set an appropriate value for the `tree_levels` parameter. The value specifies the desired precision and Elasticsearch will calculate the best `tree_levels` value to honor this precision. The value should be a number followed by an optional distance unit.",244,{"inputs":[],"output":{"name":"option"}}],[11,"tree_levels","","Maximum number of layers to be used by the `PrefixTree`. This can be used to control the precision of shape representations and therefore how many terms are indexed. Defaults to the default value of the chosen `PrefixTree` implementation. Since this parameter requires a certain level of understanding of the underlying implementation, users may use the `precision` parameter instead. However, Elasticsearch only uses the `tree_levels` parameter internally and this is what is returned via the mapping API even if you use the `precision` parameter.",244,{"inputs":[],"output":{"name":"option"}}],[11,"strategy","","The `strategy` parameter defines the approach for how to represent shapes at indexing and search time. It also influences the capabilities available so it is recommended to let Elasticsearch set this parameter automatically. There are two strategies available: `recursive` and `term`. Term strategy supports point types only (the `points_only` parameter will be automatically set to `true`) while `Recursive` strategy supports all shape types.",244,{"inputs":[],"output":{"name":"option"}}],[11,"distance_error_pct","","Used as a hint to the `PrefixTree` about how precise it should be. Defaults to `0.025` (2.5%) with `0.5` as the maximum supported value.",244,{"inputs":[],"output":{"name":"option"}}],[11,"orientation","","Setting this parameter in the `geo_shape` mapping explicitly sets vertex order for the coordinate list of a `geo_shape` field but can be overridden in each individual GeoJSON document.",244,{"inputs":[],"output":{"name":"option"}}],[11,"points_only","","Setting this option to `true` (defaults to `false`) configures the `geo_shape` field type for point shapes only (NOTE: Multi-Points are not yet supported). This optimizes index and search performance for the geohash and quadtree when it is known that only points will be indexed. At present `geo_shape` queries can not be executed on geo_point field types. This option bridges the gap by improving point performance on a `geo_shape` field so that geo_shape queries are optimal on a point only field.",244,{"inputs":[],"output":{"name":"option"}}],[3,"GeoPointString","","Geo-point expressed as a string with the format: `\"lat,lon\"`.",null,null],[3,"GeoPoint","","An Elasticsearch `geo_point` type with a format.",null,null],[3,"GeoPointObject","","Geo-point expressed as an object, with `lat` and `lon` keys.",null,null],[3,"GeoPointArray","","Geo-point expressed as an array with the format: `[lon, lat]`",null,null],[3,"Distance","","A distance value paired with a unit of measure.",null,null],[12,"0","","",249,null],[12,"1","","",249,null],[17,"GEOPOINT_DATATYPE","","Elasticsearch datatype name.",null,null],[17,"GEOSHAPE_DATATYPE","","Elasticsearch datatype name.",null,null],[4,"Orientation","","This parameter defines one of two coordinate system rules (Right-hand or Left-hand) each of which can be specified in a few different ways. - Right-hand rule: right, ccw, counterclockwise, - Left-hand rule: left, cw, clockwise. The default orientation (counterclockwise) complies with the OGC standard which defines outer ring vertices in counterclockwise order with inner ring(s) vertices (holes) in clockwise order.",null,null],[13,"Clockwise","","For `cw`.",247,null],[13,"CounterClockwise","","For `ccw`.",247,null],[8,"GeoPointFormat","","A format used for parsing and formatting geo points.",null,null],[10,"parse","","Parses a `geo::Point`.",243,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[10,"format","","Formats a `geo::Point`.",243,{"inputs":[{"name":"point"},{"name":"s"}],"output":{"name":"result"}}],[3,"DefaultGeoPointMapping","","Default mapping for `geo_point`.",null,null],[0,"ip","elastic::types","Implementation of the Elasticsearch `ip` type.",null,null],[0,"mapping","elastic::types::ip","Mapping for the Elasticsearch `ip` type.",null,null],[17,"IP_DATATYPE","elastic::types::ip::mapping","Elasticsearch datatype name.",null,null],[8,"IpMapping","","The base requirements for mapping a `ip` type.",null,null],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",250,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",250,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",250,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a string value which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",250,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",250,{"inputs":[],"output":{"name":"option"}}],[3,"DefaultIpMapping","","Default mapping for `geo_shape`.",null,null],[0,"prelude","elastic::types::ip","Includes all types for the `ip` type.",null,null],[8,"IpMapping","elastic::types::ip::prelude","The base requirements for mapping a `ip` type.",null,null],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",250,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",250,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",250,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a string value which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",250,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",250,{"inputs":[],"output":{"name":"option"}}],[17,"IP_DATATYPE","","Elasticsearch datatype name.",null,null],[3,"DefaultIpMapping","","Default mapping for `geo_shape`.",null,null],[3,"Ip","","An Elasticsearch `ip` with a mapping.",null,null],[3,"Ip","elastic::types::ip","An Elasticsearch `ip` with a mapping.",null,null],[0,"number","elastic::types","Implementation of the Elasticsearch `number` types.",null,null],[0,"mapping","elastic::types::number","Mapping for the Elasticsearch `number` types.",null,null],[17,"INTEGER_DATATYPE","elastic::types::number::mapping","Elasticsearch datatype name.",null,null],[17,"LONG_DATATYPE","","Elasticsearch datatype name.",null,null],[17,"SHORT_DATATYPE","","Elasticsearch datatype name.",null,null],[17,"BYTE_DATATYPE","","Elasticsearch datatype name.",null,null],[17,"DOUBLE_DATATYPE","","Elasticsearch datatype name.",null,null],[17,"FLOAT_DATATYPE","","Elasticsearch datatype name.",null,null],[8,"IntegerMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",251,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",251,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",251,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",251,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",251,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",251,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",251,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",251,{"inputs":[],"output":{"name":"option"}}],[8,"LongMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",252,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",252,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",252,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",252,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",252,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",252,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",252,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",252,{"inputs":[],"output":{"name":"option"}}],[8,"ShortMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",253,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",253,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",253,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",253,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",253,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",253,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",253,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",253,{"inputs":[],"output":{"name":"option"}}],[8,"ByteMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",254,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",254,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",254,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",254,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",254,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",254,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",254,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",254,{"inputs":[],"output":{"name":"option"}}],[8,"FloatMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",255,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",255,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",255,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",255,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",255,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",255,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",255,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",255,{"inputs":[],"output":{"name":"option"}}],[8,"DoubleMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",256,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",256,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",256,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",256,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",256,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",256,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",256,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",256,{"inputs":[],"output":{"name":"option"}}],[3,"DefaultIntegerMapping","","Default mapping for an `integer` type.",null,null],[3,"DefaultLongMapping","","Default mapping for a `long` type.",null,null],[3,"DefaultShortMapping","","Default mapping for a `short` type.",null,null],[3,"DefaultByteMapping","","Default mapping for a `byte` type.",null,null],[3,"DefaultFloatMapping","","Default mapping for a `float` type.",null,null],[3,"DefaultDoubleMapping","","Default mapping for a `double` type.",null,null],[0,"prelude","elastic::types::number","Includes all types for the `number` type.",null,null],[17,"FLOAT_DATATYPE","elastic::types::number::prelude","Elasticsearch datatype name.",null,null],[17,"BYTE_DATATYPE","","Elasticsearch datatype name.",null,null],[8,"LongMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",252,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",252,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",252,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",252,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",252,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",252,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",252,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",252,{"inputs":[],"output":{"name":"option"}}],[17,"LONG_DATATYPE","","Elasticsearch datatype name.",null,null],[17,"DOUBLE_DATATYPE","","Elasticsearch datatype name.",null,null],[8,"ByteMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",254,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",254,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",254,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",254,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",254,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",254,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",254,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",254,{"inputs":[],"output":{"name":"option"}}],[17,"SHORT_DATATYPE","","Elasticsearch datatype name.",null,null],[17,"INTEGER_DATATYPE","","Elasticsearch datatype name.",null,null],[3,"Byte","","Number type with a given mapping.",null,null],[3,"Double","","Number type with a given mapping.",null,null],[3,"DefaultByteMapping","","Default mapping for a `byte` type.",null,null],[8,"IntegerMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",251,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",251,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",251,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",251,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",251,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",251,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",251,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",251,{"inputs":[],"output":{"name":"option"}}],[3,"DefaultShortMapping","","Default mapping for a `short` type.",null,null],[3,"DefaultIntegerMapping","","Default mapping for an `integer` type.",null,null],[3,"DefaultLongMapping","","Default mapping for a `long` type.",null,null],[3,"DefaultDoubleMapping","","Default mapping for a `double` type.",null,null],[8,"ShortMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",253,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",253,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",253,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",253,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",253,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",253,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",253,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",253,{"inputs":[],"output":{"name":"option"}}],[3,"Integer","","Number type with a given mapping.",null,null],[8,"DoubleMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",256,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",256,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",256,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",256,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",256,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",256,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",256,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",256,{"inputs":[],"output":{"name":"option"}}],[8,"FloatMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",255,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",255,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",255,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",255,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",255,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",255,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",255,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",255,{"inputs":[],"output":{"name":"option"}}],[3,"Short","","Number type with a given mapping.",null,null],[3,"Float","","Number type with a given mapping.",null,null],[3,"DefaultFloatMapping","","Default mapping for a `float` type.",null,null],[3,"Long","","Number type with a given mapping.",null,null],[3,"Integer","elastic::types::number","Number type with a given mapping.",null,null],[3,"Short","","Number type with a given mapping.",null,null],[3,"Float","","Number type with a given mapping.",null,null],[3,"Long","","Number type with a given mapping.",null,null],[3,"Byte","","Number type with a given mapping.",null,null],[3,"Double","","Number type with a given mapping.",null,null],[0,"string","elastic::types","Implementation of the Elasticsearch `keyword` and `text` types.",null,null],[0,"keyword","elastic::types::string","Implementation of the Elasticsearch `keyword` type.",null,null],[0,"mapping","elastic::types::string::keyword","Mapping for the Elasticsearch `keyword` type.",null,null],[17,"KEYWORD_DATATYPE","elastic::types::string::keyword::mapping","Elasticsearch datatype name.",null,null],[8,"KeywordMapping","","The base requirements for mapping a `string` type.",null,null],[11,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",257,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"eager_global_ordinals","","Should global ordinals be loaded eagerly on refresh? Accepts `true` or `false` (default). Enabling this is a good idea on fields that are frequently used for (significant) terms aggregations.",257,{"inputs":[],"output":{"name":"option"}}],[11,"fields","","Multi-fields allow the same string value to be indexed in multiple ways for different purposes, such as one field for search and a multi-field for sorting and aggregations, or the same string value analyzed by different analyzers.",257,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_above","","The maximum number of characters to index. Any characters over this length will be ignored.",257,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `true` (default) or `false`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"index_options","","What information should be stored in the index, for search and highlighting purposes. Defaults to `Positions`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"norms","","Whether field-length should be taken into account when scoring queries. Accepts `true` (default) or `false`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a `string` value which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",257,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",257,{"inputs":[],"output":{"name":"option"}}],[11,"search_analyzer","","The analyzer that should be used at search time on analyzed fields. Defaults to the analyzer setting.",257,{"inputs":[],"output":{"name":"option"}}],[11,"similarity","","Which scoring algorithm or similarity should be used. Defaults to `\"classic\"`, which uses TF/IDF.",257,{"inputs":[],"output":{"name":"option"}}],[3,"DefaultKeywordMapping","","Default mapping for `bool`.",null,null],[3,"KeywordFieldMapping","","A multi-field string mapping.",null,null],[12,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",258,null],[12,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",258,null],[12,"eager_global_ordinals","","Should global ordinals be loaded eagerly on refresh? Accepts `true` or `false` (default). Enabling this is a good idea on fields that are frequently used for (significant) terms aggregations.",258,null],[12,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",258,null],[12,"ignore_above","","The maximum number of characters to index. Any characters over this length will be ignored.",258,null],[12,"index","","Should the field be searchable? Accepts `true` (default) or `false`.",258,null],[12,"index_options","","What information should be stored in the index, for search and highlighting purposes. Defaults to `Positions`.",258,null],[12,"norms","","Whether field-length should be taken into account when scoring queries. Accepts `true` (default) or `false`.",258,null],[12,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",258,null],[12,"search_analyzer","","The analyzer that should be used at search time on analyzed fields. Defaults to the analyzer setting.",258,null],[12,"similarity","","Which scoring algorithm or similarity should be used. Defaults to `\"classic\"`, which uses TF/IDF.",258,null],[0,"prelude","elastic::types::string::keyword","Includes all types for the `keyword` type.",null,null],[3,"KeywordFieldMapping","elastic::types::string::keyword::prelude","A multi-field string mapping.",null,null],[12,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",258,null],[12,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",258,null],[12,"eager_global_ordinals","","Should global ordinals be loaded eagerly on refresh? Accepts `true` or `false` (default). Enabling this is a good idea on fields that are frequently used for (significant) terms aggregations.",258,null],[12,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",258,null],[12,"ignore_above","","The maximum number of characters to index. Any characters over this length will be ignored.",258,null],[12,"index","","Should the field be searchable? Accepts `true` (default) or `false`.",258,null],[12,"index_options","","What information should be stored in the index, for search and highlighting purposes. Defaults to `Positions`.",258,null],[12,"norms","","Whether field-length should be taken into account when scoring queries. Accepts `true` (default) or `false`.",258,null],[12,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",258,null],[12,"search_analyzer","","The analyzer that should be used at search time on analyzed fields. Defaults to the analyzer setting.",258,null],[12,"similarity","","Which scoring algorithm or similarity should be used. Defaults to `\"classic\"`, which uses TF/IDF.",258,null],[3,"Keyword","","An Elasticsearch `keyword` with a mapping.",null,null],[3,"DefaultKeywordMapping","","Default mapping for `bool`.",null,null],[17,"KEYWORD_DATATYPE","","Elasticsearch datatype name.",null,null],[8,"KeywordMapping","","The base requirements for mapping a `string` type.",null,null],[11,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",257,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"eager_global_ordinals","","Should global ordinals be loaded eagerly on refresh? Accepts `true` or `false` (default). Enabling this is a good idea on fields that are frequently used for (significant) terms aggregations.",257,{"inputs":[],"output":{"name":"option"}}],[11,"fields","","Multi-fields allow the same string value to be indexed in multiple ways for different purposes, such as one field for search and a multi-field for sorting and aggregations, or the same string value analyzed by different analyzers.",257,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_above","","The maximum number of characters to index. Any characters over this length will be ignored.",257,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `true` (default) or `false`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"index_options","","What information should be stored in the index, for search and highlighting purposes. Defaults to `Positions`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"norms","","Whether field-length should be taken into account when scoring queries. Accepts `true` (default) or `false`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a `string` value which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",257,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",257,{"inputs":[],"output":{"name":"option"}}],[11,"search_analyzer","","The analyzer that should be used at search time on analyzed fields. Defaults to the analyzer setting.",257,{"inputs":[],"output":{"name":"option"}}],[11,"similarity","","Which scoring algorithm or similarity should be used. Defaults to `\"classic\"`, which uses TF/IDF.",257,{"inputs":[],"output":{"name":"option"}}],[3,"Keyword","elastic::types::string::keyword","An Elasticsearch `keyword` with a mapping.",null,null],[0,"text","elastic::types::string","Implementation of the Elasticsearch `text` type.",null,null],[0,"mapping","elastic::types::string::text","Mapping for the Elasticsearch `text` type.",null,null],[17,"TEXT_DATATYPE","elastic::types::string::text::mapping","Elasticsearch datatype name.",null,null],[8,"TextMapping","","The base requirements for mapping a `string` type.",null,null],[11,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",259,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",259,{"inputs":[],"output":{"name":"option"}}],[11,"eager_global_ordinals","","Should global ordinals be loaded eagerly on refresh? Accepts `true` or `false` (default). Enabling this is a good idea on fields that are frequently used for (significant) terms aggregations.",259,{"inputs":[],"output":{"name":"option"}}],[11,"fielddata","","Can the field use in-memory fielddata for sorting, aggregations, or scripting? Accepts `true` or `false` (default).",259,{"inputs":[],"output":{"name":"option"}}],[11,"fielddata_frequency_filter","","Expert settings which allow to decide which values to load in memory when `fielddata` is enabled. By default all values are loaded.",259,{"inputs":[],"output":{"name":"option"}}],[11,"fields","","Multi-fields allow the same string value to be indexed in multiple ways for different purposes, such as one field for search and a multi-field for sorting and aggregations, or the same string value analyzed by different analyzers.",259,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",259,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_above","","The maximum number of characters to index. Any characters over this length will be ignored.",259,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `true` (default) or `false`.",259,{"inputs":[],"output":{"name":"option"}}],[11,"index_options","","What information should be stored in the index, for search and highlighting purposes. Defaults to `Positions`.",259,{"inputs":[],"output":{"name":"option"}}],[11,"norms","","Whether field-length should be taken into account when scoring queries. Accepts `true` (default) or `false`.",259,{"inputs":[],"output":{"name":"option"}}],[11,"position_increment_gap","","The number of fake term position which should be inserted between each element of an array of strings. Defaults to the `position_increment_gap` configured on the analyzer which defaults to `100`. `100` was chosen because it prevents phrase queries with reasonably large slops (less than `100`) from matching terms across field values.",259,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",259,{"inputs":[],"output":{"name":"option"}}],[11,"search_analyzer","","The analyzer that should be used at search time on analyzed fields. Defaults to the analyzer setting.",259,{"inputs":[],"output":{"name":"option"}}],[11,"search_quote_analyzer","","The analyzer that should be used at search time when a phrase is encountered. Defaults to the `search_analyzer` setting.",259,{"inputs":[],"output":{"name":"option"}}],[11,"similarity","","Which scoring algorithm or similarity should be used. Defaults to `\"classic\"`, which uses TF/IDF.",259,{"inputs":[],"output":{"name":"option"}}],[11,"term_vector","","Whether term vectors should be stored for an `analyzed` field. Defaults to `No`.",259,{"inputs":[],"output":{"name":"option"}}],[3,"DefaultTextMapping","","Default mapping for `bool`.",null,null],[4,"TermVector","","Term vectors contain information about the terms produced by the analysis process.",null,null],[13,"No","","No term vectors are stored. (default)",260,null],[13,"Yes","","Just the terms in the field are stored.",260,null],[13,"WithPositions","","Terms and positions are stored.",260,null],[13,"WithOffsets","","Terms and character offsets are stored.",260,null],[13,"WithPositionsOffsets","","Terms, positions, and character offsets are stored.",260,null],[3,"FieldDataFrequencyFilter","","Fielddata for term frequency as a percentage range.",null,null],[12,"min","","The min frequency percentage.",261,null],[12,"max","","The max frequency percentage.",261,null],[12,"min_segment_size","","The minimum number of docs a segment should contain.",261,null],[3,"TextFieldMapping","","A multi-field string mapping.",null,null],[12,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",262,null],[12,"eager_global_ordinals","","Should global ordinals be loaded eagerly on refresh? Accepts `true` or `false` (default). Enabling this is a good idea on fields that are frequently used for (significant) terms aggregations.",262,null],[12,"fielddata","","Can the field use in-memory fielddata for sorting, aggregations, or scripting? Accepts `true` or `false` (default).",262,null],[12,"fielddata_frequency_filter","","Expert settings which allow to decide which values to load in memory when `fielddata` is enabled. By default all values are loaded.",262,null],[12,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",262,null],[12,"ignore_above","","The maximum number of characters to index. Any characters over this length will be ignored.",262,null],[12,"index","","Should the field be searchable? Accepts `true` (default) or `false`.",262,null],[12,"index_options","","What information should be stored in the index, for search and highlighting purposes. Defaults to `Positions`.",262,null],[12,"norms","","Whether field-length should be taken into account when scoring queries. Accepts `true` (default) or `false`.",262,null],[12,"position_increment_gap","","The number of fake term position which should be inserted between each element of an array of strings. Defaults to the `position_increment_gap` configured on the analyzer which defaults to `100`. `100` was chosen because it prevents phrase queries with reasonably large slops (less than `100`) from matching terms across field values.",262,null],[12,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",262,null],[12,"search_analyzer","","The analyzer that should be used at search time on analyzed fields. Defaults to the analyzer setting.",262,null],[12,"search_quote_analyzer","","The analyzer that should be used at search time when a phrase is encountered. Defaults to the `search_analyzer` setting.",262,null],[12,"similarity","","Which scoring algorithm or similarity should be used. Defaults to `\"classic\"`, which uses TF/IDF.",262,null],[12,"term_vector","","Whether term vectors should be stored for an `analyzed` field. Defaults to `No`.",262,null],[0,"prelude","elastic::types::string::text","Includes all types for the `text` type.",null,null],[8,"TextMapping","elastic::types::string::text::prelude","The base requirements for mapping a `string` type.",null,null],[11,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",259,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",259,{"inputs":[],"output":{"name":"option"}}],[11,"eager_global_ordinals","","Should global ordinals be loaded eagerly on refresh? Accepts `true` or `false` (default). Enabling this is a good idea on fields that are frequently used for (significant) terms aggregations.",259,{"inputs":[],"output":{"name":"option"}}],[11,"fielddata","","Can the field use in-memory fielddata for sorting, aggregations, or scripting? Accepts `true` or `false` (default).",259,{"inputs":[],"output":{"name":"option"}}],[11,"fielddata_frequency_filter","","Expert settings which allow to decide which values to load in memory when `fielddata` is enabled. By default all values are loaded.",259,{"inputs":[],"output":{"name":"option"}}],[11,"fields","","Multi-fields allow the same string value to be indexed in multiple ways for different purposes, such as one field for search and a multi-field for sorting and aggregations, or the same string value analyzed by different analyzers.",259,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",259,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_above","","The maximum number of characters to index. Any characters over this length will be ignored.",259,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `true` (default) or `false`.",259,{"inputs":[],"output":{"name":"option"}}],[11,"index_options","","What information should be stored in the index, for search and highlighting purposes. Defaults to `Positions`.",259,{"inputs":[],"output":{"name":"option"}}],[11,"norms","","Whether field-length should be taken into account when scoring queries. Accepts `true` (default) or `false`.",259,{"inputs":[],"output":{"name":"option"}}],[11,"position_increment_gap","","The number of fake term position which should be inserted between each element of an array of strings. Defaults to the `position_increment_gap` configured on the analyzer which defaults to `100`. `100` was chosen because it prevents phrase queries with reasonably large slops (less than `100`) from matching terms across field values.",259,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",259,{"inputs":[],"output":{"name":"option"}}],[11,"search_analyzer","","The analyzer that should be used at search time on analyzed fields. Defaults to the analyzer setting.",259,{"inputs":[],"output":{"name":"option"}}],[11,"search_quote_analyzer","","The analyzer that should be used at search time when a phrase is encountered. Defaults to the `search_analyzer` setting.",259,{"inputs":[],"output":{"name":"option"}}],[11,"similarity","","Which scoring algorithm or similarity should be used. Defaults to `\"classic\"`, which uses TF/IDF.",259,{"inputs":[],"output":{"name":"option"}}],[11,"term_vector","","Whether term vectors should be stored for an `analyzed` field. Defaults to `No`.",259,{"inputs":[],"output":{"name":"option"}}],[3,"Text","","An Elasticsearch `text` field with a mapping.",null,null],[4,"TermVector","","Term vectors contain information about the terms produced by the analysis process.",null,null],[13,"No","","No term vectors are stored. (default)",260,null],[13,"Yes","","Just the terms in the field are stored.",260,null],[13,"WithPositions","","Terms and positions are stored.",260,null],[13,"WithOffsets","","Terms and character offsets are stored.",260,null],[13,"WithPositionsOffsets","","Terms, positions, and character offsets are stored.",260,null],[3,"FieldDataFrequencyFilter","","Fielddata for term frequency as a percentage range.",null,null],[12,"min","","The min frequency percentage.",261,null],[12,"max","","The max frequency percentage.",261,null],[12,"min_segment_size","","The minimum number of docs a segment should contain.",261,null],[3,"DefaultTextMapping","","Default mapping for `bool`.",null,null],[3,"TextFieldMapping","","A multi-field string mapping.",null,null],[12,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",262,null],[12,"eager_global_ordinals","","Should global ordinals be loaded eagerly on refresh? Accepts `true` or `false` (default). Enabling this is a good idea on fields that are frequently used for (significant) terms aggregations.",262,null],[12,"fielddata","","Can the field use in-memory fielddata for sorting, aggregations, or scripting? Accepts `true` or `false` (default).",262,null],[12,"fielddata_frequency_filter","","Expert settings which allow to decide which values to load in memory when `fielddata` is enabled. By default all values are loaded.",262,null],[12,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",262,null],[12,"ignore_above","","The maximum number of characters to index. Any characters over this length will be ignored.",262,null],[12,"index","","Should the field be searchable? Accepts `true` (default) or `false`.",262,null],[12,"index_options","","What information should be stored in the index, for search and highlighting purposes. Defaults to `Positions`.",262,null],[12,"norms","","Whether field-length should be taken into account when scoring queries. Accepts `true` (default) or `false`.",262,null],[12,"position_increment_gap","","The number of fake term position which should be inserted between each element of an array of strings. Defaults to the `position_increment_gap` configured on the analyzer which defaults to `100`. `100` was chosen because it prevents phrase queries with reasonably large slops (less than `100`) from matching terms across field values.",262,null],[12,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",262,null],[12,"search_analyzer","","The analyzer that should be used at search time on analyzed fields. Defaults to the analyzer setting.",262,null],[12,"search_quote_analyzer","","The analyzer that should be used at search time when a phrase is encountered. Defaults to the `search_analyzer` setting.",262,null],[12,"similarity","","Which scoring algorithm or similarity should be used. Defaults to `\"classic\"`, which uses TF/IDF.",262,null],[12,"term_vector","","Whether term vectors should be stored for an `analyzed` field. Defaults to `No`.",262,null],[17,"TEXT_DATATYPE","","Elasticsearch datatype name.",null,null],[3,"Text","elastic::types::string::text","An Elasticsearch `text` field with a mapping.",null,null],[0,"mapping","elastic::types::string","Common mapping for the Elasticsearch `string` types.",null,null],[17,"TOKENCOUNT_DATATYPE","elastic::types::string::mapping","Elasticsearch datatype name.",null,null],[17,"COMPLETION_DATATYPE","","Elasticsearch datatype name.",null,null],[3,"DefaultStringMapping","","Default mapping for `String`.",null,null],[4,"IndexOptions","","The `index_options` parameter controls what information is added to the inverted index, for search and highlighting purposes.",null,null],[13,"Docs","","Only the doc number is indexed. Can answer the question Does this term exist in this field?",263,null],[13,"Freqs","","Doc number and term frequencies are indexed. Term frequencies are used to score repeated terms higher than single terms.",263,null],[13,"Positions","","Doc number, term frequencies, and term positions (or order) are indexed. Positions can be used for proximity or phrase queries.",263,null],[13,"Offsets","","Doc number, term frequencies, positions, and start and end character offsets (which map the term back to the original string) are indexed. Offsets are used by the postings highlighter.",263,null],[4,"StringField","","A string sub-field type.",null,null],[13,"TokenCount","","A `token_count` sub field.",264,null],[13,"Completion","","A `completion` suggester sub field.",264,null],[13,"Keyword","","A `keyword` sub field.",264,null],[13,"Text","","A `text` sub field.",264,null],[3,"ElasticTokenCountFieldMapping","","A multi-field string mapping for a token count.",null,null],[12,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",265,null],[12,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",265,null],[12,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",265,null],[12,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",265,null],[12,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",265,null],[12,"precision_step","","Controls the number of extra terms that are indexed to make range queries faster. Defaults to `32`.",265,null],[12,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",265,null],[3,"ElasticCompletionFieldMapping","","A multi-field string mapping for a completion suggester.",null,null],[12,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",266,null],[12,"search_analyzer","","The search analyzer to use, defaults to value of analyzer.",266,null],[12,"payloads","","Enables the storing of payloads, defaults to `false`.",266,null],[12,"preserve_separators","","Preserves the separators, defaults to `true`. If disabled, you could find a field starting with Foo Fighters, if you suggest for foof.",266,null],[12,"preserve_position_increments","","Enables position increments, defaults to `true`. If disabled and using stopwords analyzer, you could get a field starting with The Beatles, if you suggest for b. > Note: You could also achieve this by indexing two inputs, Beatles and The Beatles, no need to change a simple analyzer, if you are able to enrich your data.",266,null],[12,"max_input_length","","Limits the length of a single input, defaults to `50` `UTF-16` code points. This limit is only used at index time to reduce the total number of characters per input string in order to prevent massive inputs from bloating the underlying datastructure. The most usecases won’t be influenced by the default value since prefix completions hardly grow beyond prefixes longer than a handful of characters. (Old name \"max_input_len\" is deprecated)",266,null],[0,"prelude","elastic::types::string","Includes all types for the `string` types.",null,null],[3,"KeywordFieldMapping","elastic::types::string::prelude","A multi-field string mapping.",null,null],[12,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",258,null],[12,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",258,null],[12,"eager_global_ordinals","","Should global ordinals be loaded eagerly on refresh? Accepts `true` or `false` (default). Enabling this is a good idea on fields that are frequently used for (significant) terms aggregations.",258,null],[12,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",258,null],[12,"ignore_above","","The maximum number of characters to index. Any characters over this length will be ignored.",258,null],[12,"index","","Should the field be searchable? Accepts `true` (default) or `false`.",258,null],[12,"index_options","","What information should be stored in the index, for search and highlighting purposes. Defaults to `Positions`.",258,null],[12,"norms","","Whether field-length should be taken into account when scoring queries. Accepts `true` (default) or `false`.",258,null],[12,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",258,null],[12,"search_analyzer","","The analyzer that should be used at search time on analyzed fields. Defaults to the analyzer setting.",258,null],[12,"similarity","","Which scoring algorithm or similarity should be used. Defaults to `\"classic\"`, which uses TF/IDF.",258,null],[3,"Text","","An Elasticsearch `text` field with a mapping.",null,null],[8,"TextMapping","","The base requirements for mapping a `string` type.",null,null],[11,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",259,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",259,{"inputs":[],"output":{"name":"option"}}],[11,"eager_global_ordinals","","Should global ordinals be loaded eagerly on refresh? Accepts `true` or `false` (default). Enabling this is a good idea on fields that are frequently used for (significant) terms aggregations.",259,{"inputs":[],"output":{"name":"option"}}],[11,"fielddata","","Can the field use in-memory fielddata for sorting, aggregations, or scripting? Accepts `true` or `false` (default).",259,{"inputs":[],"output":{"name":"option"}}],[11,"fielddata_frequency_filter","","Expert settings which allow to decide which values to load in memory when `fielddata` is enabled. By default all values are loaded.",259,{"inputs":[],"output":{"name":"option"}}],[11,"fields","","Multi-fields allow the same string value to be indexed in multiple ways for different purposes, such as one field for search and a multi-field for sorting and aggregations, or the same string value analyzed by different analyzers.",259,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",259,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_above","","The maximum number of characters to index. Any characters over this length will be ignored.",259,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `true` (default) or `false`.",259,{"inputs":[],"output":{"name":"option"}}],[11,"index_options","","What information should be stored in the index, for search and highlighting purposes. Defaults to `Positions`.",259,{"inputs":[],"output":{"name":"option"}}],[11,"norms","","Whether field-length should be taken into account when scoring queries. Accepts `true` (default) or `false`.",259,{"inputs":[],"output":{"name":"option"}}],[11,"position_increment_gap","","The number of fake term position which should be inserted between each element of an array of strings. Defaults to the `position_increment_gap` configured on the analyzer which defaults to `100`. `100` was chosen because it prevents phrase queries with reasonably large slops (less than `100`) from matching terms across field values.",259,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",259,{"inputs":[],"output":{"name":"option"}}],[11,"search_analyzer","","The analyzer that should be used at search time on analyzed fields. Defaults to the analyzer setting.",259,{"inputs":[],"output":{"name":"option"}}],[11,"search_quote_analyzer","","The analyzer that should be used at search time when a phrase is encountered. Defaults to the `search_analyzer` setting.",259,{"inputs":[],"output":{"name":"option"}}],[11,"similarity","","Which scoring algorithm or similarity should be used. Defaults to `\"classic\"`, which uses TF/IDF.",259,{"inputs":[],"output":{"name":"option"}}],[11,"term_vector","","Whether term vectors should be stored for an `analyzed` field. Defaults to `No`.",259,{"inputs":[],"output":{"name":"option"}}],[4,"TermVector","","Term vectors contain information about the terms produced by the analysis process.",null,null],[13,"No","","No term vectors are stored. (default)",260,null],[13,"Yes","","Just the terms in the field are stored.",260,null],[13,"WithPositions","","Terms and positions are stored.",260,null],[13,"WithOffsets","","Terms and character offsets are stored.",260,null],[13,"WithPositionsOffsets","","Terms, positions, and character offsets are stored.",260,null],[3,"ElasticCompletionFieldMapping","","A multi-field string mapping for a completion suggester.",null,null],[12,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",266,null],[12,"search_analyzer","","The search analyzer to use, defaults to value of analyzer.",266,null],[12,"payloads","","Enables the storing of payloads, defaults to `false`.",266,null],[12,"preserve_separators","","Preserves the separators, defaults to `true`. If disabled, you could find a field starting with Foo Fighters, if you suggest for foof.",266,null],[12,"preserve_position_increments","","Enables position increments, defaults to `true`. If disabled and using stopwords analyzer, you could get a field starting with The Beatles, if you suggest for b. > Note: You could also achieve this by indexing two inputs, Beatles and The Beatles, no need to change a simple analyzer, if you are able to enrich your data.",266,null],[12,"max_input_length","","Limits the length of a single input, defaults to `50` `UTF-16` code points. This limit is only used at index time to reduce the total number of characters per input string in order to prevent massive inputs from bloating the underlying datastructure. The most usecases won’t be influenced by the default value since prefix completions hardly grow beyond prefixes longer than a handful of characters. (Old name \"max_input_len\" is deprecated)",266,null],[3,"FieldDataFrequencyFilter","","Fielddata for term frequency as a percentage range.",null,null],[12,"min","","The min frequency percentage.",261,null],[12,"max","","The max frequency percentage.",261,null],[12,"min_segment_size","","The minimum number of docs a segment should contain.",261,null],[3,"ElasticTokenCountFieldMapping","","A multi-field string mapping for a token count.",null,null],[12,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",265,null],[12,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",265,null],[12,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",265,null],[12,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",265,null],[12,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",265,null],[12,"precision_step","","Controls the number of extra terms that are indexed to make range queries faster. Defaults to `32`.",265,null],[12,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",265,null],[3,"Keyword","","An Elasticsearch `keyword` with a mapping.",null,null],[3,"DefaultKeywordMapping","","Default mapping for `bool`.",null,null],[17,"COMPLETION_DATATYPE","","Elasticsearch datatype name.",null,null],[4,"IndexOptions","","The `index_options` parameter controls what information is added to the inverted index, for search and highlighting purposes.",null,null],[13,"Docs","","Only the doc number is indexed. Can answer the question Does this term exist in this field?",263,null],[13,"Freqs","","Doc number and term frequencies are indexed. Term frequencies are used to score repeated terms higher than single terms.",263,null],[13,"Positions","","Doc number, term frequencies, and term positions (or order) are indexed. Positions can be used for proximity or phrase queries.",263,null],[13,"Offsets","","Doc number, term frequencies, positions, and start and end character offsets (which map the term back to the original string) are indexed. Offsets are used by the postings highlighter.",263,null],[17,"KEYWORD_DATATYPE","","Elasticsearch datatype name.",null,null],[3,"DefaultTextMapping","","Default mapping for `bool`.",null,null],[3,"TextFieldMapping","","A multi-field string mapping.",null,null],[12,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",262,null],[12,"eager_global_ordinals","","Should global ordinals be loaded eagerly on refresh? Accepts `true` or `false` (default). Enabling this is a good idea on fields that are frequently used for (significant) terms aggregations.",262,null],[12,"fielddata","","Can the field use in-memory fielddata for sorting, aggregations, or scripting? Accepts `true` or `false` (default).",262,null],[12,"fielddata_frequency_filter","","Expert settings which allow to decide which values to load in memory when `fielddata` is enabled. By default all values are loaded.",262,null],[12,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",262,null],[12,"ignore_above","","The maximum number of characters to index. Any characters over this length will be ignored.",262,null],[12,"index","","Should the field be searchable? Accepts `true` (default) or `false`.",262,null],[12,"index_options","","What information should be stored in the index, for search and highlighting purposes. Defaults to `Positions`.",262,null],[12,"norms","","Whether field-length should be taken into account when scoring queries. Accepts `true` (default) or `false`.",262,null],[12,"position_increment_gap","","The number of fake term position which should be inserted between each element of an array of strings. Defaults to the `position_increment_gap` configured on the analyzer which defaults to `100`. `100` was chosen because it prevents phrase queries with reasonably large slops (less than `100`) from matching terms across field values.",262,null],[12,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",262,null],[12,"search_analyzer","","The analyzer that should be used at search time on analyzed fields. Defaults to the analyzer setting.",262,null],[12,"search_quote_analyzer","","The analyzer that should be used at search time when a phrase is encountered. Defaults to the `search_analyzer` setting.",262,null],[12,"similarity","","Which scoring algorithm or similarity should be used. Defaults to `\"classic\"`, which uses TF/IDF.",262,null],[12,"term_vector","","Whether term vectors should be stored for an `analyzed` field. Defaults to `No`.",262,null],[3,"DefaultStringMapping","","Default mapping for `String`.",null,null],[4,"StringField","","A string sub-field type.",null,null],[13,"TokenCount","","A `token_count` sub field.",264,null],[13,"Completion","","A `completion` suggester sub field.",264,null],[13,"Keyword","","A `keyword` sub field.",264,null],[13,"Text","","A `text` sub field.",264,null],[8,"KeywordMapping","","The base requirements for mapping a `string` type.",null,null],[11,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",257,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"eager_global_ordinals","","Should global ordinals be loaded eagerly on refresh? Accepts `true` or `false` (default). Enabling this is a good idea on fields that are frequently used for (significant) terms aggregations.",257,{"inputs":[],"output":{"name":"option"}}],[11,"fields","","Multi-fields allow the same string value to be indexed in multiple ways for different purposes, such as one field for search and a multi-field for sorting and aggregations, or the same string value analyzed by different analyzers.",257,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_above","","The maximum number of characters to index. Any characters over this length will be ignored.",257,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `true` (default) or `false`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"index_options","","What information should be stored in the index, for search and highlighting purposes. Defaults to `Positions`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"norms","","Whether field-length should be taken into account when scoring queries. Accepts `true` (default) or `false`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a `string` value which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",257,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",257,{"inputs":[],"output":{"name":"option"}}],[11,"search_analyzer","","The analyzer that should be used at search time on analyzed fields. Defaults to the analyzer setting.",257,{"inputs":[],"output":{"name":"option"}}],[11,"similarity","","Which scoring algorithm or similarity should be used. Defaults to `\"classic\"`, which uses TF/IDF.",257,{"inputs":[],"output":{"name":"option"}}],[17,"TOKENCOUNT_DATATYPE","","Elasticsearch datatype name.",null,null],[17,"TEXT_DATATYPE","","Elasticsearch datatype name.",null,null],[3,"Text","elastic::types::string","An Elasticsearch `text` field with a mapping.",null,null],[3,"Keyword","","An Elasticsearch `keyword` with a mapping.",null,null],[0,"prelude","elastic::types","Includes all data types.",null,null],[3,"Field","elastic::types::prelude","A wrapper type used to work around conflicting implementations of `Serialize` for the various mapping traits.",null,null],[8,"TextMapping","","The base requirements for mapping a `string` type.",null,null],[11,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",259,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",259,{"inputs":[],"output":{"name":"option"}}],[11,"eager_global_ordinals","","Should global ordinals be loaded eagerly on refresh? Accepts `true` or `false` (default). Enabling this is a good idea on fields that are frequently used for (significant) terms aggregations.",259,{"inputs":[],"output":{"name":"option"}}],[11,"fielddata","","Can the field use in-memory fielddata for sorting, aggregations, or scripting? Accepts `true` or `false` (default).",259,{"inputs":[],"output":{"name":"option"}}],[11,"fielddata_frequency_filter","","Expert settings which allow to decide which values to load in memory when `fielddata` is enabled. By default all values are loaded.",259,{"inputs":[],"output":{"name":"option"}}],[11,"fields","","Multi-fields allow the same string value to be indexed in multiple ways for different purposes, such as one field for search and a multi-field for sorting and aggregations, or the same string value analyzed by different analyzers.",259,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",259,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_above","","The maximum number of characters to index. Any characters over this length will be ignored.",259,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `true` (default) or `false`.",259,{"inputs":[],"output":{"name":"option"}}],[11,"index_options","","What information should be stored in the index, for search and highlighting purposes. Defaults to `Positions`.",259,{"inputs":[],"output":{"name":"option"}}],[11,"norms","","Whether field-length should be taken into account when scoring queries. Accepts `true` (default) or `false`.",259,{"inputs":[],"output":{"name":"option"}}],[11,"position_increment_gap","","The number of fake term position which should be inserted between each element of an array of strings. Defaults to the `position_increment_gap` configured on the analyzer which defaults to `100`. `100` was chosen because it prevents phrase queries with reasonably large slops (less than `100`) from matching terms across field values.",259,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",259,{"inputs":[],"output":{"name":"option"}}],[11,"search_analyzer","","The analyzer that should be used at search time on analyzed fields. Defaults to the analyzer setting.",259,{"inputs":[],"output":{"name":"option"}}],[11,"search_quote_analyzer","","The analyzer that should be used at search time when a phrase is encountered. Defaults to the `search_analyzer` setting.",259,{"inputs":[],"output":{"name":"option"}}],[11,"similarity","","Which scoring algorithm or similarity should be used. Defaults to `\"classic\"`, which uses TF/IDF.",259,{"inputs":[],"output":{"name":"option"}}],[11,"term_vector","","Whether term vectors should be stored for an `analyzed` field. Defaults to `No`.",259,{"inputs":[],"output":{"name":"option"}}],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",239,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",239,null],[10,"minute","","Returns the minute number from 0 to 59.",239,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"second","","Returns the second number from 0 to 59.",239,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",239,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"with_hour","","Makes a new value with the hour number changed.",239,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_minute","","Makes a new value with the minute number changed.",239,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_second","","Makes a new value with the second number changed.",239,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",239,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",239,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[6,"DefaultGeoPointFormat","","The default `geo_point` format (`GeoPointArray`).",null,null],[17,"IP_DATATYPE","","Elasticsearch datatype name.",null,null],[17,"DYNAMIC_DATATYPE","","Elasticsearch datatype name.",null,null],[3,"ParseError","","Represents an error encountered during parsing.",null,null],[3,"Ip","","An Elasticsearch `ip` with a mapping.",null,null],[3,"TextFieldMapping","","A multi-field string mapping.",null,null],[12,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",262,null],[12,"eager_global_ordinals","","Should global ordinals be loaded eagerly on refresh? Accepts `true` or `false` (default). Enabling this is a good idea on fields that are frequently used for (significant) terms aggregations.",262,null],[12,"fielddata","","Can the field use in-memory fielddata for sorting, aggregations, or scripting? Accepts `true` or `false` (default).",262,null],[12,"fielddata_frequency_filter","","Expert settings which allow to decide which values to load in memory when `fielddata` is enabled. By default all values are loaded.",262,null],[12,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",262,null],[12,"ignore_above","","The maximum number of characters to index. Any characters over this length will be ignored.",262,null],[12,"index","","Should the field be searchable? Accepts `true` (default) or `false`.",262,null],[12,"index_options","","What information should be stored in the index, for search and highlighting purposes. Defaults to `Positions`.",262,null],[12,"norms","","Whether field-length should be taken into account when scoring queries. Accepts `true` (default) or `false`.",262,null],[12,"position_increment_gap","","The number of fake term position which should be inserted between each element of an array of strings. Defaults to the `position_increment_gap` configured on the analyzer which defaults to `100`. `100` was chosen because it prevents phrase queries with reasonably large slops (less than `100`) from matching terms across field values.",262,null],[12,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",262,null],[12,"search_analyzer","","The analyzer that should be used at search time on analyzed fields. Defaults to the analyzer setting.",262,null],[12,"search_quote_analyzer","","The analyzer that should be used at search time when a phrase is encountered. Defaults to the `search_analyzer` setting.",262,null],[12,"similarity","","Which scoring algorithm or similarity should be used. Defaults to `\"classic\"`, which uses TF/IDF.",262,null],[12,"term_vector","","Whether term vectors should be stored for an `analyzed` field. Defaults to `No`.",262,null],[3,"GeoPointHash","","Geo-point expressed as a geohash.",null,null],[3,"DefaultByteMapping","","Default mapping for a `byte` type.",null,null],[8,"FieldMapping","","The base requirements for mapping an Elasticsearch data type.",null,null],[11,"data_type","","Get the type name for this mapping, like `date` or `string`.",267,{"inputs":[],"output":{"name":"str"}}],[3,"DefaultDoubleMapping","","Default mapping for a `double` type.",null,null],[3,"ElasticCompletionFieldMapping","","A multi-field string mapping for a completion suggester.",null,null],[12,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",266,null],[12,"search_analyzer","","The search analyzer to use, defaults to value of analyzer.",266,null],[12,"payloads","","Enables the storing of payloads, defaults to `false`.",266,null],[12,"preserve_separators","","Preserves the separators, defaults to `true`. If disabled, you could find a field starting with Foo Fighters, if you suggest for foof.",266,null],[12,"preserve_position_increments","","Enables position increments, defaults to `true`. If disabled and using stopwords analyzer, you could get a field starting with The Beatles, if you suggest for b. > Note: You could also achieve this by indexing two inputs, Beatles and The Beatles, no need to change a simple analyzer, if you are able to enrich your data.",266,null],[12,"max_input_length","","Limits the length of a single input, defaults to `50` `UTF-16` code points. This limit is only used at index time to reduce the total number of characters per input string in order to prevent massive inputs from bloating the underlying datastructure. The most usecases won’t be influenced by the default value since prefix completions hardly grow beyond prefixes longer than a handful of characters. (Old name \"max_input_len\" is deprecated)",266,null],[3,"DefaultGeoShapeMapping","","Default mapping for `geo_shape`.",null,null],[8,"DateFormat","","A format used for parsing and formatting dates.",null,null],[10,"parse","","Parses a date string to a `chrono::DateTime<UTC>` result.",240,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[10,"format","","Formats a given `chrono::DateTime<UTC>` as a string.",240,{"inputs":[{"name":"datetime"}],"output":{"name":"string"}}],[10,"name","","The name of the format.",240,{"inputs":[],"output":{"name":"str"}}],[4,"Tree","","Name of the `PrefixTree` implementation to be used.",null,null],[13,"Geohash","","For `GeohashPrefixTree`.",245,null],[13,"QuadPrefix","","For `QuadPrefixTree`.",245,null],[8,"GeoShapeMapping","","The base requirements for mapping a `geo_shape` type.",null,null],[11,"tree","","Name of the PrefixTree implementation to be used: `geohash` for `GeohashPrefixTree` and `quadtree` for `QuadPrefixTree`.",244,{"inputs":[],"output":{"name":"option"}}],[11,"precision","","This parameter may be used instead of `tree_levels` to set an appropriate value for the `tree_levels` parameter. The value specifies the desired precision and Elasticsearch will calculate the best `tree_levels` value to honor this precision. The value should be a number followed by an optional distance unit.",244,{"inputs":[],"output":{"name":"option"}}],[11,"tree_levels","","Maximum number of layers to be used by the `PrefixTree`. This can be used to control the precision of shape representations and therefore how many terms are indexed. Defaults to the default value of the chosen `PrefixTree` implementation. Since this parameter requires a certain level of understanding of the underlying implementation, users may use the `precision` parameter instead. However, Elasticsearch only uses the `tree_levels` parameter internally and this is what is returned via the mapping API even if you use the `precision` parameter.",244,{"inputs":[],"output":{"name":"option"}}],[11,"strategy","","The `strategy` parameter defines the approach for how to represent shapes at indexing and search time. It also influences the capabilities available so it is recommended to let Elasticsearch set this parameter automatically. There are two strategies available: `recursive` and `term`. Term strategy supports point types only (the `points_only` parameter will be automatically set to `true`) while `Recursive` strategy supports all shape types.",244,{"inputs":[],"output":{"name":"option"}}],[11,"distance_error_pct","","Used as a hint to the `PrefixTree` about how precise it should be. Defaults to `0.025` (2.5%) with `0.5` as the maximum supported value.",244,{"inputs":[],"output":{"name":"option"}}],[11,"orientation","","Setting this parameter in the `geo_shape` mapping explicitly sets vertex order for the coordinate list of a `geo_shape` field but can be overridden in each individual GeoJSON document.",244,{"inputs":[],"output":{"name":"option"}}],[11,"points_only","","Setting this option to `true` (defaults to `false`) configures the `geo_shape` field type for point shapes only (NOTE: Multi-Points are not yet supported). This optimizes index and search performance for the geohash and quadtree when it is known that only points will be indexed. At present `geo_shape` queries can not be executed on geo_point field types. This option bridges the gap by improving point performance on a `geo_shape` field so that geo_shape queries are optimal on a point only field.",244,{"inputs":[],"output":{"name":"option"}}],[3,"Short","","Number type with a given mapping.",null,null],[3,"EpochMillis","","Format for `epoch_millis`.",null,null],[17,"GEOPOINT_DATATYPE","","Elasticsearch datatype name.",null,null],[17,"TOKENCOUNT_DATATYPE","","Elasticsearch datatype name.",null,null],[8,"FieldType","","The base representation of an Elasticsearch data type.",null,null],[11,"mapping","","Get the mapping for this type.",268,{"inputs":[],"output":{"name":"m"}}],[8,"GeoPointFormat","","A format used for parsing and formatting geo points.",null,null],[10,"parse","","Parses a `geo::Point`.",243,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[10,"format","","Formats a `geo::Point`.",243,{"inputs":[{"name":"point"},{"name":"s"}],"output":{"name":"result"}}],[17,"FLOAT_DATATYPE","","Elasticsearch datatype name.",null,null],[3,"ChronoFormat","","Format for default `chrono::DateTime`.",null,null],[4,"IndexAnalysis","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",null,null],[13,"Analyzed","","This option applies only to string fields, for which it is the default. The string field value is first analyzed to convert the string into terms (e.g. a list of individual words), which are then indexed. At search time, the query string is passed through (usually) the same analyzer to generate terms in the same format as those in the index. It is this process that enables full text search.",269,null],[13,"NotAnalyzed","","Add the field value to the index unchanged, as a single term. This is the default for all fields that support this option except for string fields. `not_analyzed` fields are usually used with term-level queries for structured search.",269,null],[13,"No","","Do not add this field value to the index. With this setting, the field will not be queryable.",269,null],[4,"Strategy","","The strategy defines the approach for how to represent shapes at indexing and search time.",null,null],[13,"Recursive","","Recursive strategy supports all shape types.",246,null],[13,"Term","","Term strategy supports point types only.",246,null],[17,"LONG_DATATYPE","","Elasticsearch datatype name.",null,null],[3,"KeywordFieldMapping","","A multi-field string mapping.",null,null],[12,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",258,null],[12,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",258,null],[12,"eager_global_ordinals","","Should global ordinals be loaded eagerly on refresh? Accepts `true` or `false` (default). Enabling this is a good idea on fields that are frequently used for (significant) terms aggregations.",258,null],[12,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",258,null],[12,"ignore_above","","The maximum number of characters to index. Any characters over this length will be ignored.",258,null],[12,"index","","Should the field be searchable? Accepts `true` (default) or `false`.",258,null],[12,"index_options","","What information should be stored in the index, for search and highlighting purposes. Defaults to `Positions`.",258,null],[12,"norms","","Whether field-length should be taken into account when scoring queries. Accepts `true` (default) or `false`.",258,null],[12,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",258,null],[12,"search_analyzer","","The analyzer that should be used at search time on analyzed fields. Defaults to the analyzer setting.",258,null],[12,"similarity","","Which scoring algorithm or similarity should be used. Defaults to `\"classic\"`, which uses TF/IDF.",258,null],[3,"FieldDataFrequencyFilter","","Fielddata for term frequency as a percentage range.",null,null],[12,"min","","The min frequency percentage.",261,null],[12,"max","","The max frequency percentage.",261,null],[12,"min_segment_size","","The minimum number of docs a segment should contain.",261,null],[17,"OBJECT_DATATYPE","","Elasticsearch datatype name.",null,null],[3,"GeoShape","","Geo shape type with a given mapping.",null,null],[17,"COMPLETION_DATATYPE","","Elasticsearch datatype name.",null,null],[3,"GeoPointString","","Geo-point expressed as a string with the format: `\"lat,lon\"`.",null,null],[17,"DOUBLE_DATATYPE","","Elasticsearch datatype name.",null,null],[3,"DefaultGeoPointMapping","","Default mapping for `geo_point`.",null,null],[3,"Double","","Number type with a given mapping.",null,null],[8,"IntegerMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",251,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",251,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",251,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",251,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",251,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",251,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",251,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",251,{"inputs":[],"output":{"name":"option"}}],[3,"DefaultLongMapping","","Default mapping for a `long` type.",null,null],[8,"DocumentType","","The additional fields available to an indexable Elasticsearch type.",null,null],[11,"name","","Get the name for this type.",233,{"inputs":[],"output":{"name":"str"}}],[8,"ShortMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",253,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",253,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",253,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",253,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",253,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",253,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",253,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",253,{"inputs":[],"output":{"name":"option"}}],[17,"NESTED_DATATYPE","","Elasticsearch datatype name.",null,null],[3,"GeoPointObject","","Geo-point expressed as an object, with `lat` and `lon` keys.",null,null],[4,"IndexOptions","","The `index_options` parameter controls what information is added to the inverted index, for search and highlighting purposes.",null,null],[13,"Docs","","Only the doc number is indexed. Can answer the question Does this term exist in this field?",263,null],[13,"Freqs","","Doc number and term frequencies are indexed. Term frequencies are used to score repeated terms higher than single terms.",263,null],[13,"Positions","","Doc number, term frequencies, and term positions (or order) are indexed. Positions can be used for proximity or phrase queries.",263,null],[13,"Offsets","","Doc number, term frequencies, positions, and start and end character offsets (which map the term back to the original string) are indexed. Offsets are used by the postings highlighter.",263,null],[3,"DefaultFloatMapping","","Default mapping for a `float` type.",null,null],[3,"Long","","Number type with a given mapping.",null,null],[3,"DefaultDateMapping","","Default mapping for `date`.",null,null],[4,"Dynamic","","The dynamic setting may be set at the mapping type level, and on each inner object. Inner objects inherit the setting from their parent object or from the mapping type.",null,null],[13,"True","","Newly detected fields are added to the mapping. (default).",236,null],[13,"False","","Newly detected fields are ignored. New fields must be added explicitly.",236,null],[13,"Strict","","If new fields are detected, an exception is thrown and the document is rejected.",236,null],[17,"BYTE_DATATYPE","","Elasticsearch datatype name.",null,null],[8,"SerializeField","","A serialisable variant of the field mapping.",null,null],[16,"Field","","The serialisable field.",270,null],[4,"DistanceUnit","","A unit of measure for distance.",null,null],[13,"Inches","","For `in`.",248,null],[13,"Yards","","For `yd`.",248,null],[13,"Miles","","For `mi`.",248,null],[13,"Kilometers","","For `km`.",248,null],[13,"Meters","","For `m`.",248,null],[13,"Centimeters","","For `cm`.",248,null],[13,"Millimeters","","For `mm`.",248,null],[3,"BasicDateTimeNoMillis","","Format for `basic_date_time_no_millis`.",null,null],[8,"PropertiesMapping","","Serialisation for the mapping of object properties.",null,null],[10,"props_len","","The number of mapped property fields for this type.",235,{"inputs":[],"output":{"name":"usize"}}],[10,"serialize_props","","Serialisation for the mapped property fields on this type.",235,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[3,"DefaultKeywordMapping","","Default mapping for `bool`.",null,null],[8,"ByteMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",254,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",254,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",254,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",254,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",254,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",254,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",254,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",254,{"inputs":[],"output":{"name":"option"}}],[17,"SHORT_DATATYPE","","Elasticsearch datatype name.",null,null],[3,"DefaultStringMapping","","Default mapping for `String`.",null,null],[3,"Date","","An Elasticsearch `date` type with a required `time` component.",null,null],[8,"KeywordMapping","","The base requirements for mapping a `string` type.",null,null],[11,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",257,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"eager_global_ordinals","","Should global ordinals be loaded eagerly on refresh? Accepts `true` or `false` (default). Enabling this is a good idea on fields that are frequently used for (significant) terms aggregations.",257,{"inputs":[],"output":{"name":"option"}}],[11,"fields","","Multi-fields allow the same string value to be indexed in multiple ways for different purposes, such as one field for search and a multi-field for sorting and aggregations, or the same string value analyzed by different analyzers.",257,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_above","","The maximum number of characters to index. Any characters over this length will be ignored.",257,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `true` (default) or `false`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"index_options","","What information should be stored in the index, for search and highlighting purposes. Defaults to `Positions`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"norms","","Whether field-length should be taken into account when scoring queries. Accepts `true` (default) or `false`.",257,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a `string` value which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",257,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",257,{"inputs":[],"output":{"name":"option"}}],[11,"search_analyzer","","The analyzer that should be used at search time on analyzed fields. Defaults to the analyzer setting.",257,{"inputs":[],"output":{"name":"option"}}],[11,"similarity","","Which scoring algorithm or similarity should be used. Defaults to `\"classic\"`, which uses TF/IDF.",257,{"inputs":[],"output":{"name":"option"}}],[3,"Byte","","Number type with a given mapping.",null,null],[5,"field_ser","","Serialise a field mapping using the given serialiser.",null,{"inputs":[{"name":"s"},{"name":"str"},{"name":"m"}],"output":{"name":"result"}}],[3,"Boolean","","An Elasticsearch `boolean` with a mapping.",null,null],[5,"parse_from_tokens","","Parse a date string using an owned slice of items.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"result"}}],[3,"BasicDateTime","","Format for `basic_date_time`.",null,null],[3,"DefaultIntegerMapping","","Default mapping for an `integer` type.",null,null],[3,"Text","","An Elasticsearch `text` field with a mapping.",null,null],[4,"TermVector","","Term vectors contain information about the terms produced by the analysis process.",null,null],[13,"No","","No term vectors are stored. (default)",260,null],[13,"Yes","","Just the terms in the field are stored.",260,null],[13,"WithPositions","","Terms and positions are stored.",260,null],[13,"WithOffsets","","Terms and character offsets are stored.",260,null],[13,"WithPositionsOffsets","","Terms, positions, and character offsets are stored.",260,null],[3,"ElasticTokenCountFieldMapping","","A multi-field string mapping for a token count.",null,null],[12,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",265,null],[12,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",265,null],[12,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",265,null],[12,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",265,null],[12,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",265,null],[12,"precision_step","","Controls the number of extra terms that are indexed to make range queries faster. Defaults to `32`.",265,null],[12,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",265,null],[8,"DateMapping","","The base requirements for mapping a `date` type.",null,null],[16,"Format","","The date format bound to this mapping.",238,null],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",238,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",238,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",238,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",238,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",238,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",238,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a date value in one of the configured format's as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",238,{"inputs":[],"output":{"name":"option"}}],[8,"FloatMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",255,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",255,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",255,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",255,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",255,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",255,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",255,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",255,{"inputs":[],"output":{"name":"option"}}],[3,"GeoPoint","","An Elasticsearch `geo_point` type with a format.",null,null],[4,"StringField","","A string sub-field type.",null,null],[13,"TokenCount","","A `token_count` sub field.",264,null],[13,"Completion","","A `completion` suggester sub field.",264,null],[13,"Keyword","","A `keyword` sub field.",264,null],[13,"Text","","A `text` sub field.",264,null],[3,"Document","","A wrapper type for serialising user types.",null,null],[8,"LongMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",252,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",252,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",252,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",252,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",252,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",252,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",252,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",252,{"inputs":[],"output":{"name":"option"}}],[3,"DefaultMapping","","A mapping implementation for a non-core type, or anywhere it's ok for Elasticsearch to infer the mapping at index-time.",null,null],[6,"DefaultDateFormat","","The default `date` format (`BasicDateTime`).",null,null],[5,"format_with_tokens","","Format a date string using an owned slice of items.",null,{"inputs":[{"name":"datetime"},{"name":"vec"}],"output":{"name":"string"}}],[3,"WrappedMapping","","Mapping for a wrapped value, like an array or optional type.",null,null],[3,"Keyword","","An Elasticsearch `keyword` with a mapping.",null,null],[8,"GeoPointMapping","","The base requirements for mapping a `geo_point` type.",null,null],[16,"Format","","The format used to serialise and deserialise the geo point.",242,null],[11,"geohash","","Should the `geo-point` also be indexed as a geohash in the `.geohash` sub-field? Defaults to `false`, unless `geohash_prefix` is `true`.",242,{"inputs":[],"output":{"name":"option"}}],[11,"geohash_precision","","The maximum length of the geohash to use for the geohash and `geohash_prefix` options.",242,{"inputs":[],"output":{"name":"option"}}],[11,"geohash_prefix","","Should the `geo-point` also be indexed as a geohash plus all its prefixes? Defaults to `false`.",242,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed `geo-points` are ignored. If `false` (default), malformed `geo-points` throw an exception and reject the whole document.",242,{"inputs":[],"output":{"name":"option"}}],[11,"lat_lon","","Should the `geo-point` also be indexed as `.lat` and `.lon` sub-fields? Accepts `true` and `false` (default).",242,{"inputs":[],"output":{"name":"option"}}],[8,"DocumentMapping","","The base requirements for mapping an `object` type.",null,null],[10,"name","","Get the indexed name for this mapping.",234,{"inputs":[],"output":{"name":"str"}}],[11,"data_type","","Get the type name for this mapping, like `object` or `nested`.",234,{"inputs":[],"output":{"name":"str"}}],[11,"dynamic","","Whether or not new properties should be added dynamically to an existing object. Accepts `true` (default), `false` and `strict`.",234,{"inputs":[],"output":{"name":"option"}}],[11,"enabled","","Whether the JSON value given for the object field should be parsed and indexed (`true`, default) or completely ignored (`false`).",234,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Sets the default `include_in_all` value for all the properties within the object. The object itself is not added to the `_all` field.",234,{"inputs":[],"output":{"name":"option"}}],[3,"DefaultIpMapping","","Default mapping for `geo_shape`.",null,null],[17,"BOOLEAN_DATATYPE","","Elasticsearch datatype name.",null,null],[3,"DefaultTextMapping","","Default mapping for `bool`.",null,null],[17,"INTEGER_DATATYPE","","Elasticsearch datatype name.",null,null],[17,"DATE_DATATYPE","","Elasticsearch datatype name.",null,null],[5,"mapping","","Get the mapping for a field.",null,{"inputs":[],"output":{"name":"m"}}],[3,"GeoPointArray","","Geo-point expressed as an array with the format: `[lon, lat]`",null,null],[17,"GEOSHAPE_DATATYPE","","Elasticsearch datatype name.",null,null],[17,"TEXT_DATATYPE","","Elasticsearch datatype name.",null,null],[3,"DefaultShortMapping","","Default mapping for a `short` type.",null,null],[8,"BooleanMapping","","The base requirements for mapping a `boolean` type.",null,null],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",237,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",237,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",237,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a string value which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",237,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",237,{"inputs":[],"output":{"name":"option"}}],[8,"IpMapping","","The base requirements for mapping a `ip` type.",null,null],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",250,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",250,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",250,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a string value which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",250,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",250,{"inputs":[],"output":{"name":"option"}}],[5,"doc_ser","","Serialise a document mapping using the given serialiser.",null,{"inputs":[{"name":"s"},{"name":"str"},{"name":"m"}],"output":{"name":"result"}}],[3,"Integer","","Number type with a given mapping.",null,null],[3,"DefaultBooleanMapping","","Default mapping for `bool`.",null,null],[8,"DoubleMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",256,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",256,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",256,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",256,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",256,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",256,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",256,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",256,{"inputs":[],"output":{"name":"option"}}],[3,"Float","","Number type with a given mapping.",null,null],[17,"KEYWORD_DATATYPE","","Elasticsearch datatype name.",null,null],[3,"Distance","","A distance value paired with a unit of measure.",null,null],[12,"0","","",249,null],[12,"1","","",249,null],[4,"Orientation","","This parameter defines one of two coordinate system rules (Right-hand or Left-hand) each of which can be specified in a few different ways. - Right-hand rule: right, ccw, counterclockwise, - Left-hand rule: left, cw, clockwise. The default orientation (counterclockwise) complies with the OGC standard which defines outer ring vertices in counterclockwise order with inner ring(s) vertices (holes) in clockwise order.",null,null],[13,"Clockwise","","For `cw`.",247,null],[13,"CounterClockwise","","For `ccw`.",247,null],[8,"Datelike","","The common set of methods for date component.",null,null],[10,"year","","Returns the year number in the calendar date.",241,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",241,null],[10,"month","","Returns the month number starting from 1.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"month0","","Returns the month number starting from 0.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day","","Returns the day of month starting from 1.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day0","","Returns the day of month starting from 0.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal","","Returns the day of year starting from 1.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal0","","Returns the day of year starting from 0.",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"weekday","","Returns the day of week.",241,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[10,"isoweekdate","","Returns the ISO week date: an adjusted year, week number and day of week. The adjusted year may differ from that of the calendar date.",241,null],[10,"with_year","","Makes a new value with the year number changed.",241,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",241,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",241,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",241,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",241,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",241,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",241,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",241,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[0,"prelude","elastic","A glob import for convenience.",null,null],[3,"RequestParams","elastic::prelude","Misc parameters for any request.",null,null],[12,"base_url","","Base url for Elasticsearch.",79,null],[12,"url_params","","Simple key-value store for url query params.",79,null],[12,"headers","","The complete set of headers that will be sent with the request.",79,null],[11,"try_for_doc","elastic::client::requests::endpoints","",203,null],[11,"try_for_doc","","",203,null],[11,"try_for_mapping","","",118,null],[11,"try_for_doc","","",118,null],[11,"line","elastic::error","One-based line number at which the error was detected.",271,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"column","","One-based column number at which the error was detected.",271,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"classify","","Categorizes the cause of this error.",271,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",271,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",271,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",271,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",271,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"parseerror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_str","elastic::http::header","",14,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",40,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",73,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",12,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",21,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",53,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",20,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",51,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",15,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",10,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",42,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",38,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",77,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",76,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",36,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",30,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",37,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",23,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"extend","","",272,null],[11,"fmt","","",272,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",273,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",274,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","elastic::http::header::parsing","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","","",275,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","elastic::http::header","",23,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"option"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"option"}}],[11,"lt","","",24,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"le","","",24,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"gt","","",24,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ge","","",24,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"quality"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"accept"}}],[11,"clone","","",274,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowcredentials"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowheaders"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowmethods"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolexposeheaders"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolmaxage"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestheaders"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestmethod"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"acceptcharset"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"acceptencoding"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"acceptlanguage"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"acceptranges"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"rangeunit"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"allow"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"authorization"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"basic"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"bearer"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"cachecontrol"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"cachedirective"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"cookie"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"connectionoption"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"connection"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"dispositiontype"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"dispositionparam"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"contentdisposition"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"contentencoding"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"contentlanguage"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"contentlength"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"contentrange"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"contenttype"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"etag"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"expect"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"expires"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"from"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"ifmatch"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"ifmodifiedsince"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"ifnonematch"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"ifrange"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"ifunmodifiedsince"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"lastmodified"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"pragma"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"prefer"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"preference"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"preferenceapplied"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"byterangespec"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"referer"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"referrerpolicy"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"server"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"setcookie"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"stricttransportsecurity"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"transferencoding"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"upgrade"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"protocolname"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"protocol"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"useragent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"vary"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"charset"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"quality"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"qualityitem"}}],[11,"clone","elastic::http::header::parsing","",6,{"inputs":[{"name":"self"}],"output":{"name":"extendedvalue"}}],[11,"clone","","",275,{"inputs":[{"name":"self"}],"output":{"name":"http_value"}}],[11,"clone","elastic::http::header","",272,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"next","","",276,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref","","",44,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref","","",59,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",55,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",66,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",68,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"deref","","",69,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"deref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",61,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",74,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",49,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",72,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",63,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",22,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",48,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"deref","","",64,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"deref","","",26,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"deref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"new","","Constructs a new EntityTag. # Panics If the tag contains invalid characters.",37,{"inputs":[{"name":"bool"},{"name":"string"}],"output":{"name":"entitytag"}}],[11,"weak","","Constructs a new weak EntityTag. # Panics If the tag contains invalid characters.",37,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"strong","","Constructs a new strong EntityTag. # Panics If the tag contains invalid characters.",37,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"tag","","Get the tag.",37,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"set_tag","","Set the tag. # Panics If the tag contains invalid characters.",37,null],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.",37,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their opaque-tags match character-by-character, regardless of either or both being tagged as \"weak\".",37,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",37,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",37,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"deref","","",75,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"deref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",56,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",50,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",39,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",67,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",65,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",58,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",43,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",44,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",59,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",55,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",66,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",68,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"deref_mut","","",69,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",18,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"deref_mut","","",33,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",61,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",74,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",49,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",72,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",63,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",22,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",48,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"deref_mut","","",64,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"deref_mut","","",26,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"deref_mut","","",52,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",75,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"deref_mut","","",16,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",56,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",50,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",41,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",39,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",47,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",57,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",67,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",65,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",58,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",34,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",43,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",25,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"eq","","",272,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"bool"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"eq","","",274,{"inputs":[{"name":"self"},{"name":"accesscontrolallowcredentials"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"expect"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"referrerpolicy"}],"output":{"name":"bool"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"eq","elastic::http::header::parsing","",6,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"from_iter","elastic::http::header","",272,{"inputs":[{"name":"i"}],"output":{"name":"headers"}}],[11,"scheme","","",40,{"inputs":[],"output":{"name":"option"}}],[11,"fmt_scheme","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scheme","","",73,{"inputs":[],"output":{"name":"option"}}],[11,"fmt_scheme","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",274,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_multi_header","","",58,{"inputs":[{"name":"self"},{"name":"multilineformatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",274,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",274,null],[11,"header_name","","",46,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",46,null],[11,"header_name","","",44,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",44,null],[11,"header_name","","",49,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",49,null],[11,"header_name","","",72,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",72,null],[11,"header_name","","",71,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",71,null],[11,"header_name","","",35,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",35,null],[11,"header_name","","",62,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",62,null],[11,"header_name","","",20,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",20,null],[11,"header_name","","",27,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",27,null],[11,"header_name","","",51,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",51,null],[11,"header_name","","",78,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",78,null],[11,"header_name","","",57,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",57,null],[11,"header_name","","",67,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",67,null],[11,"header_name","","",10,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",10,null],[11,"header_name","","",70,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",70,null],[11,"header_name","","",58,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",58,null],[11,"header_name","","",38,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",38,null],[11,"header_name","","",59,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",59,null],[11,"header_name","","",55,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",55,null],[11,"header_name","","",66,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",66,null],[11,"header_name","","",68,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",68,null],[11,"header_name","","",17,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",17,null],[11,"header_name","","",69,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",69,null],[11,"header_name","","",18,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",18,null],[11,"header_name","","",33,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",33,null],[11,"header_name","","",61,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",61,null],[11,"header_name","","",74,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",74,null],[11,"header_name","","",54,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",54,null],[11,"header_name","","",31,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",31,null],[11,"header_name","","",63,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",63,null],[11,"header_name","","",22,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",22,null],[11,"header_name","","",48,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",48,null],[11,"header_name","","",64,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",64,null],[11,"header_name","","",26,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",26,null],[11,"header_name","","",52,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",52,null],[11,"header_name","","",75,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",75,null],[11,"header_name","","",16,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",16,null],[11,"header_name","","",56,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",56,null],[11,"header_name","","",28,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",28,null],[11,"header_name","","",50,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",50,null],[11,"header_name","","",32,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",32,null],[11,"header_name","","",41,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",41,null],[11,"header_name","","",39,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",39,null],[11,"header_name","","",47,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",47,null],[11,"header_name","","",65,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",65,null],[11,"header_name","","",19,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",19,null],[11,"header_name","","",34,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",34,null],[11,"header_name","","",43,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",43,null],[11,"header_name","","",25,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",25,null],[11,"header_name","","",11,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",11,null],[11,"fmt","","",274,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","elastic::http::header::parsing","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","elastic::http::header","",272,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",273,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",24,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"ordering"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"ordering"}}],[11,"fmt","elastic::prelude","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",79,{"inputs":[],"output":{"name":"requestparams"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"requestparams"}}],[11,"fmt","elastic::error","",271,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",271,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"from","","",271,{"inputs":[{"name":"errorimpl"}],"output":{"name":"error"}}],[11,"from","","",271,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",271,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"custom","","",271,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"fmt","","",271,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",271,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",271,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","elastic::client::requests::endpoints","",193,{"inputs":[{"name":"self"},{"name":"indicescloserequest"}],"output":{"name":"bool"}}],[11,"ne","","",193,{"inputs":[{"name":"self"},{"name":"indicescloserequest"}],"output":{"name":"bool"}}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"deletescriptrequest"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"self"},{"name":"deletescriptrequest"}],"output":{"name":"bool"}}],[11,"eq","","",117,{"inputs":[{"name":"self"},{"name":"termvectorsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"self"},{"name":"termvectorsrequest"}],"output":{"name":"bool"}}],[11,"eq","","",200,{"inputs":[{"name":"self"},{"name":"fieldstatsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",200,{"inputs":[{"name":"self"},{"name":"fieldstatsrequest"}],"output":{"name":"bool"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"catthreadpoolrequest"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"catthreadpoolrequest"}],"output":{"name":"bool"}}],[11,"eq","","",155,{"inputs":[{"name":"self"},{"name":"snapshotdeleterequest"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"self"},{"name":"snapshotdeleterequest"}],"output":{"name":"bool"}}],[11,"eq","","",191,{"inputs":[{"name":"self"},{"name":"indicesgetsettingsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",191,{"inputs":[{"name":"self"},{"name":"indicesgetsettingsrequest"}],"output":{"name":"bool"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"createrequest"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"createrequest"}],"output":{"name":"bool"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"snapshotdeleterepositoryrequest"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"self"},{"name":"snapshotdeleterepositoryrequest"}],"output":{"name":"bool"}}],[11,"eq","","",195,{"inputs":[{"name":"self"},{"name":"clusterallocationexplainrequest"}],"output":{"name":"bool"}}],[11,"ne","","",195,{"inputs":[{"name":"self"},{"name":"clusterallocationexplainrequest"}],"output":{"name":"bool"}}],[11,"eq","","",209,{"inputs":[{"name":"self"},{"name":"indicesputtemplaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",209,{"inputs":[{"name":"self"},{"name":"indicesputtemplaterequest"}],"output":{"name":"bool"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"indicesgettemplaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"self"},{"name":"indicesgettemplaterequest"}],"output":{"name":"bool"}}],[11,"eq","","",177,{"inputs":[{"name":"self"},{"name":"clusterstaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"self"},{"name":"clusterstaterequest"}],"output":{"name":"bool"}}],[11,"eq","","",221,{"inputs":[{"name":"self"},{"name":"msearchtemplaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",221,{"inputs":[{"name":"self"},{"name":"msearchtemplaterequest"}],"output":{"name":"bool"}}],[11,"eq","","",170,{"inputs":[{"name":"self"},{"name":"bulkrequest"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"self"},{"name":"bulkrequest"}],"output":{"name":"bool"}}],[11,"eq","","",181,{"inputs":[{"name":"self"},{"name":"explainrequest"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"self"},{"name":"explainrequest"}],"output":{"name":"bool"}}],[11,"eq","","",172,{"inputs":[{"name":"self"},{"name":"suggestrequest"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"self"},{"name":"suggestrequest"}],"output":{"name":"bool"}}],[11,"eq","","",188,{"inputs":[{"name":"self"},{"name":"snapshotgetrepositoryrequest"}],"output":{"name":"bool"}}],[11,"ne","","",188,{"inputs":[{"name":"self"},{"name":"snapshotgetrepositoryrequest"}],"output":{"name":"bool"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"rendersearchtemplaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"self"},{"name":"rendersearchtemplaterequest"}],"output":{"name":"bool"}}],[11,"eq","","",218,{"inputs":[{"name":"self"},{"name":"indicesstatsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",218,{"inputs":[{"name":"self"},{"name":"indicesstatsrequest"}],"output":{"name":"bool"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"catrepositoriesrequest"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"catrepositoriesrequest"}],"output":{"name":"bool"}}],[11,"eq","","",211,{"inputs":[{"name":"self"},{"name":"indicesforcemergerequest"}],"output":{"name":"bool"}}],[11,"ne","","",211,{"inputs":[{"name":"self"},{"name":"indicesforcemergerequest"}],"output":{"name":"bool"}}],[11,"eq","","",186,{"inputs":[{"name":"self"},{"name":"pingrequest"}],"output":{"name":"bool"}}],[11,"ne","","",186,{"inputs":[{"name":"self"},{"name":"pingrequest"}],"output":{"name":"bool"}}],[11,"eq","","",174,{"inputs":[{"name":"self"},{"name":"tasksgetrequest"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"self"},{"name":"tasksgetrequest"}],"output":{"name":"bool"}}],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"indicesexistsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"self"},{"name":"indicesexistsrequest"}],"output":{"name":"bool"}}],[11,"eq","","",178,{"inputs":[{"name":"self"},{"name":"indicesflushsyncedrequest"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"self"},{"name":"indicesflushsyncedrequest"}],"output":{"name":"bool"}}],[11,"eq","","",189,{"inputs":[{"name":"self"},{"name":"msearchrequest"}],"output":{"name":"bool"}}],[11,"ne","","",189,{"inputs":[{"name":"self"},{"name":"msearchrequest"}],"output":{"name":"bool"}}],[11,"eq","","",214,{"inputs":[{"name":"self"},{"name":"inforequest"}],"output":{"name":"bool"}}],[11,"ne","","",214,{"inputs":[{"name":"self"},{"name":"inforequest"}],"output":{"name":"bool"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"searchtemplaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"searchtemplaterequest"}],"output":{"name":"bool"}}],[11,"eq","","",201,{"inputs":[{"name":"self"},{"name":"indicesdeleterequest"}],"output":{"name":"bool"}}],[11,"ne","","",201,{"inputs":[{"name":"self"},{"name":"indicesdeleterequest"}],"output":{"name":"bool"}}],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"deletebyqueryrequest"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"self"},{"name":"deletebyqueryrequest"}],"output":{"name":"bool"}}],[11,"eq","","",182,{"inputs":[{"name":"self"},{"name":"deletetemplaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",182,{"inputs":[{"name":"self"},{"name":"deletetemplaterequest"}],"output":{"name":"bool"}}],[11,"eq","","",146,{"inputs":[{"name":"self"},{"name":"indicescreaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"self"},{"name":"indicescreaterequest"}],"output":{"name":"bool"}}],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"percolaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"self"},{"name":"percolaterequest"}],"output":{"name":"bool"}}],[11,"eq","","",153,{"inputs":[{"name":"self"},{"name":"searchrequest"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"self"},{"name":"searchrequest"}],"output":{"name":"bool"}}],[11,"eq","","",184,{"inputs":[{"name":"self"},{"name":"catnodeattrsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",184,{"inputs":[{"name":"self"},{"name":"catnodeattrsrequest"}],"output":{"name":"bool"}}],[11,"eq","","",147,{"inputs":[{"name":"self"},{"name":"snapshotverifyrepositoryrequest"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"self"},{"name":"snapshotverifyrepositoryrequest"}],"output":{"name":"bool"}}],[11,"eq","","",165,{"inputs":[{"name":"self"},{"name":"countrequest"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"self"},{"name":"countrequest"}],"output":{"name":"bool"}}],[11,"eq","","",198,{"inputs":[{"name":"self"},{"name":"catallocationrequest"}],"output":{"name":"bool"}}],[11,"ne","","",198,{"inputs":[{"name":"self"},{"name":"catallocationrequest"}],"output":{"name":"bool"}}],[11,"eq","","",175,{"inputs":[{"name":"self"},{"name":"indicesflushrequest"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"self"},{"name":"indicesflushrequest"}],"output":{"name":"bool"}}],[11,"eq","","",194,{"inputs":[{"name":"self"},{"name":"indicesrefreshrequest"}],"output":{"name":"bool"}}],[11,"ne","","",194,{"inputs":[{"name":"self"},{"name":"indicesrefreshrequest"}],"output":{"name":"bool"}}],[11,"eq","","",208,{"inputs":[{"name":"self"},{"name":"cathelprequest"}],"output":{"name":"bool"}}],[11,"ne","","",208,{"inputs":[{"name":"self"},{"name":"cathelprequest"}],"output":{"name":"bool"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"searchshardsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"searchshardsrequest"}],"output":{"name":"bool"}}],[11,"eq","","",173,{"inputs":[{"name":"self"},{"name":"clusterhealthrequest"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"self"},{"name":"clusterhealthrequest"}],"output":{"name":"bool"}}],[11,"eq","","",163,{"inputs":[{"name":"self"},{"name":"indicesexistsaliasrequest"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"self"},{"name":"indicesexistsaliasrequest"}],"output":{"name":"bool"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"indicesgetfieldmappingrequest"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"self"},{"name":"indicesgetfieldmappingrequest"}],"output":{"name":"bool"}}],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"ingestputpipelinerequest"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"self"},{"name":"ingestputpipelinerequest"}],"output":{"name":"bool"}}],[11,"eq","","",150,{"inputs":[{"name":"self"},{"name":"clusterpendingtasksrequest"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"self"},{"name":"clusterpendingtasksrequest"}],"output":{"name":"bool"}}],[11,"eq","","",190,{"inputs":[{"name":"self"},{"name":"ingestsimulaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",190,{"inputs":[{"name":"self"},{"name":"ingestsimulaterequest"}],"output":{"name":"bool"}}],[11,"eq","","",168,{"inputs":[{"name":"self"},{"name":"indicesgetaliasrequest"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"self"},{"name":"indicesgetaliasrequest"}],"output":{"name":"bool"}}],[11,"eq","","",205,{"inputs":[{"name":"self"},{"name":"getscriptrequest"}],"output":{"name":"bool"}}],[11,"ne","","",205,{"inputs":[{"name":"self"},{"name":"getscriptrequest"}],"output":{"name":"bool"}}],[11,"eq","","",219,{"inputs":[{"name":"self"},{"name":"indicesrecoveryrequest"}],"output":{"name":"bool"}}],[11,"ne","","",219,{"inputs":[{"name":"self"},{"name":"indicesrecoveryrequest"}],"output":{"name":"bool"}}],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"ingestdeletepipelinerequest"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"self"},{"name":"ingestdeletepipelinerequest"}],"output":{"name":"bool"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"taskscancelrequest"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"taskscancelrequest"}],"output":{"name":"bool"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"indicesclearcacherequest"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"indicesclearcacherequest"}],"output":{"name":"bool"}}],[11,"eq","","",162,{"inputs":[{"name":"self"},{"name":"deleterequest"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"self"},{"name":"deleterequest"}],"output":{"name":"bool"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"indicesputmappingrequest"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"self"},{"name":"indicesputmappingrequest"}],"output":{"name":"bool"}}],[11,"eq","","",217,{"inputs":[{"name":"self"},{"name":"cataliasesrequest"}],"output":{"name":"bool"}}],[11,"ne","","",217,{"inputs":[{"name":"self"},{"name":"cataliasesrequest"}],"output":{"name":"bool"}}],[11,"eq","","",196,{"inputs":[{"name":"self"},{"name":"clusterstatsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",196,{"inputs":[{"name":"self"},{"name":"clusterstatsrequest"}],"output":{"name":"bool"}}],[11,"eq","","",215,{"inputs":[{"name":"self"},{"name":"indicesvalidatequeryrequest"}],"output":{"name":"bool"}}],[11,"ne","","",215,{"inputs":[{"name":"self"},{"name":"indicesvalidatequeryrequest"}],"output":{"name":"bool"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"catpendingtasksrequest"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"catpendingtasksrequest"}],"output":{"name":"bool"}}],[11,"eq","","",202,{"inputs":[{"name":"self"},{"name":"clearscrollrequest"}],"output":{"name":"bool"}}],[11,"ne","","",202,{"inputs":[{"name":"self"},{"name":"clearscrollrequest"}],"output":{"name":"bool"}}],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"catshardsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"self"},{"name":"catshardsrequest"}],"output":{"name":"bool"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"indicesshardstoresrequest"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"self"},{"name":"indicesshardstoresrequest"}],"output":{"name":"bool"}}],[11,"eq","","",145,{"inputs":[{"name":"self"},{"name":"indicesupdatealiasesrequest"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"self"},{"name":"indicesupdatealiasesrequest"}],"output":{"name":"bool"}}],[11,"eq","","",148,{"inputs":[{"name":"self"},{"name":"catsegmentsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"self"},{"name":"catsegmentsrequest"}],"output":{"name":"bool"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"mpercolaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"mpercolaterequest"}],"output":{"name":"bool"}}],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"indicesopenrequest"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"self"},{"name":"indicesopenrequest"}],"output":{"name":"bool"}}],[11,"eq","","",212,{"inputs":[{"name":"self"},{"name":"getrequest"}],"output":{"name":"bool"}}],[11,"ne","","",212,{"inputs":[{"name":"self"},{"name":"getrequest"}],"output":{"name":"bool"}}],[11,"eq","","",152,{"inputs":[{"name":"self"},{"name":"updatebyqueryrequest"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"self"},{"name":"updatebyqueryrequest"}],"output":{"name":"bool"}}],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"mtermvectorsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"self"},{"name":"mtermvectorsrequest"}],"output":{"name":"bool"}}],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"catrecoveryrequest"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"self"},{"name":"catrecoveryrequest"}],"output":{"name":"bool"}}],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"snapshotrestorerequest"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"snapshotrestorerequest"}],"output":{"name":"bool"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"reindexrequest"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"self"},{"name":"reindexrequest"}],"output":{"name":"bool"}}],[11,"eq","","",206,{"inputs":[{"name":"self"},{"name":"cathealthrequest"}],"output":{"name":"bool"}}],[11,"ne","","",206,{"inputs":[{"name":"self"},{"name":"cathealthrequest"}],"output":{"name":"bool"}}],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"catcountrequest"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"self"},{"name":"catcountrequest"}],"output":{"name":"bool"}}],[11,"eq","","",210,{"inputs":[{"name":"self"},{"name":"catsnapshotsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",210,{"inputs":[{"name":"self"},{"name":"catsnapshotsrequest"}],"output":{"name":"bool"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"indicesgetmappingrequest"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"indicesgetmappingrequest"}],"output":{"name":"bool"}}],[11,"eq","","",144,{"inputs":[{"name":"self"},{"name":"snapshotgetrequest"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"self"},{"name":"snapshotgetrequest"}],"output":{"name":"bool"}}],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"catnodesrequest"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"self"},{"name":"catnodesrequest"}],"output":{"name":"bool"}}],[11,"eq","","",185,{"inputs":[{"name":"self"},{"name":"existsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"self"},{"name":"existsrequest"}],"output":{"name":"bool"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"clusterrerouterequest"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"self"},{"name":"clusterrerouterequest"}],"output":{"name":"bool"}}],[11,"eq","","",179,{"inputs":[{"name":"self"},{"name":"nodeshotthreadsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"self"},{"name":"nodeshotthreadsrequest"}],"output":{"name":"bool"}}],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"nodesstatsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"self"},{"name":"nodesstatsrequest"}],"output":{"name":"bool"}}],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"ingestgetpipelinerequest"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"self"},{"name":"ingestgetpipelinerequest"}],"output":{"name":"bool"}}],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"puttemplaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"self"},{"name":"puttemplaterequest"}],"output":{"name":"bool"}}],[11,"eq","","",222,{"inputs":[{"name":"self"},{"name":"getsourcerequest"}],"output":{"name":"bool"}}],[11,"ne","","",222,{"inputs":[{"name":"self"},{"name":"getsourcerequest"}],"output":{"name":"bool"}}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"snapshotcreaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"self"},{"name":"snapshotcreaterequest"}],"output":{"name":"bool"}}],[11,"eq","","",213,{"inputs":[{"name":"self"},{"name":"scrollrequest"}],"output":{"name":"bool"}}],[11,"ne","","",213,{"inputs":[{"name":"self"},{"name":"scrollrequest"}],"output":{"name":"bool"}}],[11,"eq","","",166,{"inputs":[{"name":"self"},{"name":"snapshotstatusrequest"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"self"},{"name":"snapshotstatusrequest"}],"output":{"name":"bool"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"mgetrequest"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"mgetrequest"}],"output":{"name":"bool"}}],[11,"eq","","",216,{"inputs":[{"name":"self"},{"name":"indicesexiststemplaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",216,{"inputs":[{"name":"self"},{"name":"indicesexiststemplaterequest"}],"output":{"name":"bool"}}],[11,"eq","","",154,{"inputs":[{"name":"self"},{"name":"indicesgetupgraderequest"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"self"},{"name":"indicesgetupgraderequest"}],"output":{"name":"bool"}}],[11,"eq","","",183,{"inputs":[{"name":"self"},{"name":"putscriptrequest"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"self"},{"name":"putscriptrequest"}],"output":{"name":"bool"}}],[11,"eq","","",220,{"inputs":[{"name":"self"},{"name":"gettemplaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",220,{"inputs":[{"name":"self"},{"name":"gettemplaterequest"}],"output":{"name":"bool"}}],[11,"eq","","",187,{"inputs":[{"name":"self"},{"name":"indicesdeletetemplaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",187,{"inputs":[{"name":"self"},{"name":"indicesdeletetemplaterequest"}],"output":{"name":"bool"}}],[11,"eq","","",203,{"inputs":[{"name":"self"},{"name":"indexrequest"}],"output":{"name":"bool"}}],[11,"ne","","",203,{"inputs":[{"name":"self"},{"name":"indexrequest"}],"output":{"name":"bool"}}],[11,"eq","","",180,{"inputs":[{"name":"self"},{"name":"indicesputsettingsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"self"},{"name":"indicesputsettingsrequest"}],"output":{"name":"bool"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"cattemplatesrequest"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"cattemplatesrequest"}],"output":{"name":"bool"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"catindicesrequest"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"catindicesrequest"}],"output":{"name":"bool"}}],[11,"eq","","",192,{"inputs":[{"name":"self"},{"name":"clusterputsettingsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",192,{"inputs":[{"name":"self"},{"name":"clusterputsettingsrequest"}],"output":{"name":"bool"}}],[11,"eq","","",207,{"inputs":[{"name":"self"},{"name":"updaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",207,{"inputs":[{"name":"self"},{"name":"updaterequest"}],"output":{"name":"bool"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"indicesputaliasrequest"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"indicesputaliasrequest"}],"output":{"name":"bool"}}],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"catpluginsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"self"},{"name":"catpluginsrequest"}],"output":{"name":"bool"}}],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"countpercolaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"self"},{"name":"countpercolaterequest"}],"output":{"name":"bool"}}],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"indicesupgraderequest"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"self"},{"name":"indicesupgraderequest"}],"output":{"name":"bool"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"indicesdeletealiasrequest"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"self"},{"name":"indicesdeletealiasrequest"}],"output":{"name":"bool"}}],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"cattasksrequest"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"self"},{"name":"cattasksrequest"}],"output":{"name":"bool"}}],[11,"eq","","",199,{"inputs":[{"name":"self"},{"name":"indicesrolloverrequest"}],"output":{"name":"bool"}}],[11,"ne","","",199,{"inputs":[{"name":"self"},{"name":"indicesrolloverrequest"}],"output":{"name":"bool"}}],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"reindexrethrottlerequest"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"self"},{"name":"reindexrethrottlerequest"}],"output":{"name":"bool"}}],[11,"eq","","",149,{"inputs":[{"name":"self"},{"name":"snapshotcreaterepositoryrequest"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"self"},{"name":"snapshotcreaterepositoryrequest"}],"output":{"name":"bool"}}],[11,"eq","","",204,{"inputs":[{"name":"self"},{"name":"indicesgetrequest"}],"output":{"name":"bool"}}],[11,"ne","","",204,{"inputs":[{"name":"self"},{"name":"indicesgetrequest"}],"output":{"name":"bool"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"indicesanalyzerequest"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"self"},{"name":"indicesanalyzerequest"}],"output":{"name":"bool"}}],[11,"eq","","",176,{"inputs":[{"name":"self"},{"name":"catfielddatarequest"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"self"},{"name":"catfielddatarequest"}],"output":{"name":"bool"}}],[11,"eq","","",197,{"inputs":[{"name":"self"},{"name":"indicessegmentsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",197,{"inputs":[{"name":"self"},{"name":"indicessegmentsrequest"}],"output":{"name":"bool"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"indicesshrinkrequest"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"indicesshrinkrequest"}],"output":{"name":"bool"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"taskslistrequest"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"self"},{"name":"taskslistrequest"}],"output":{"name":"bool"}}],[11,"eq","","",164,{"inputs":[{"name":"self"},{"name":"catmasterrequest"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"self"},{"name":"catmasterrequest"}],"output":{"name":"bool"}}],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"indicesexiststyperequest"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"self"},{"name":"indicesexiststyperequest"}],"output":{"name":"bool"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"clustergetsettingsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"clustergetsettingsrequest"}],"output":{"name":"bool"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"nodesinforequest"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"self"},{"name":"nodesinforequest"}],"output":{"name":"bool"}}],[11,"eq","","",160,{"inputs":[{"name":"self"},{"name":"simplesearchrequest"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"self"},{"name":"simplesearchrequest"}],"output":{"name":"bool"}}],[11,"eq","elastic::client::requests","",277,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"bool"}}],[11,"ne","","",277,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"bool"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"name":"bool"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"httpmethod"}],"output":{"name":"bool"}}],[11,"eq","elastic::client::requests::params","",97,{"inputs":[{"name":"self"},{"name":"alias"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"alias"}],"output":{"name":"bool"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"feature"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"feature"}],"output":{"name":"bool"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"fields"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"fields"}],"output":{"name":"bool"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"indexmetric"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"indexmetric"}],"output":{"name":"bool"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"lang"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"lang"}],"output":{"name":"bool"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"metric"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"metric"}],"output":{"name":"bool"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"newindex"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"newindex"}],"output":{"name":"bool"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"repository"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"repository"}],"output":{"name":"bool"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"scrollid"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"scrollid"}],"output":{"name":"bool"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":{"name":"bool"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"taskid"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"taskid"}],"output":{"name":"bool"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"threadpoolpatterns"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"threadpoolpatterns"}],"output":{"name":"bool"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"fmt","elastic::client::requests::endpoints","",193,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",191,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",195,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",209,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",221,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",181,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",188,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",186,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",178,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",214,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",201,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",182,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",194,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",208,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",219,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",217,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",196,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",215,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",202,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",212,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",206,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",210,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",179,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",222,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",213,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",216,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",183,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",220,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",187,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",180,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",192,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",204,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","elastic::client::requests","",277,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","elastic::client::requests::params","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","elastic::client::requests::endpoints","",193,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",132,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",117,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",200,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",106,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",155,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",191,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",108,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",126,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",195,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",209,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",103,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",177,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",221,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",170,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",181,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",172,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",188,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",135,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",218,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",102,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",211,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",186,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",174,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",159,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",178,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",189,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",214,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",111,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",201,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",167,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",182,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",146,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",136,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",153,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",184,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",147,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",165,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",198,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",175,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",194,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",208,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",110,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",173,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",163,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",138,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",143,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",150,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",190,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",168,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",205,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",219,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",129,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",134,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",140,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",162,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",118,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",217,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",196,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",215,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",113,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",202,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",116,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",133,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",145,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",148,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",171,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",123,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",212,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",152,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",122,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",119,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",120,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",139,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",206,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",141,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",210,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",105,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",144,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",158,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",185,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",127,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",179,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",157,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",169,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",137,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",222,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",130,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",213,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",166,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",101,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",216,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",154,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",183,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",220,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",187,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",203,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",180,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",114,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",115,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",192,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",207,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",109,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",124,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",142,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",161,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",131,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",151,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",199,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",121,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",149,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",204,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",128,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",176,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",197,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",112,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",104,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",164,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",156,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",107,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",125,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"into","","",160,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"from","elastic::client::requests","",277,{"inputs":[{"name":"str"}],"output":{"name":"url"}}],[11,"from","","",277,{"inputs":[{"name":"string"}],"output":{"name":"url"}}],[11,"from","elastic::client::requests::params","",97,{"inputs":[{"name":"str"}],"output":{"name":"alias"}}],[11,"from","","",97,{"inputs":[{"name":"string"}],"output":{"name":"alias"}}],[11,"from","","",85,{"inputs":[{"name":"str"}],"output":{"name":"feature"}}],[11,"from","","",85,{"inputs":[{"name":"string"}],"output":{"name":"feature"}}],[11,"from","","",83,{"inputs":[{"name":"str"}],"output":{"name":"fields"}}],[11,"from","","",83,{"inputs":[{"name":"string"}],"output":{"name":"fields"}}],[11,"from","","",84,{"inputs":[{"name":"str"}],"output":{"name":"id"}}],[11,"from","","",84,{"inputs":[{"name":"string"}],"output":{"name":"id"}}],[11,"from","","",92,{"inputs":[{"name":"str"}],"output":{"name":"index"}}],[11,"from","","",92,{"inputs":[{"name":"string"}],"output":{"name":"index"}}],[11,"from","","",98,{"inputs":[{"name":"str"}],"output":{"name":"indexmetric"}}],[11,"from","","",98,{"inputs":[{"name":"string"}],"output":{"name":"indexmetric"}}],[11,"from","","",91,{"inputs":[{"name":"str"}],"output":{"name":"lang"}}],[11,"from","","",91,{"inputs":[{"name":"string"}],"output":{"name":"lang"}}],[11,"from","","",86,{"inputs":[{"name":"str"}],"output":{"name":"metric"}}],[11,"from","","",86,{"inputs":[{"name":"string"}],"output":{"name":"metric"}}],[11,"from","","",100,{"inputs":[{"name":"str"}],"output":{"name":"name"}}],[11,"from","","",100,{"inputs":[{"name":"string"}],"output":{"name":"name"}}],[11,"from","","",96,{"inputs":[{"name":"str"}],"output":{"name":"newindex"}}],[11,"from","","",96,{"inputs":[{"name":"string"}],"output":{"name":"newindex"}}],[11,"from","","",87,{"inputs":[{"name":"str"}],"output":{"name":"nodeid"}}],[11,"from","","",87,{"inputs":[{"name":"string"}],"output":{"name":"nodeid"}}],[11,"from","","",88,{"inputs":[{"name":"str"}],"output":{"name":"repository"}}],[11,"from","","",88,{"inputs":[{"name":"string"}],"output":{"name":"repository"}}],[11,"from","","",89,{"inputs":[{"name":"str"}],"output":{"name":"scrollid"}}],[11,"from","","",89,{"inputs":[{"name":"string"}],"output":{"name":"scrollid"}}],[11,"from","","",93,{"inputs":[{"name":"str"}],"output":{"name":"snapshot"}}],[11,"from","","",93,{"inputs":[{"name":"string"}],"output":{"name":"snapshot"}}],[11,"from","","",94,{"inputs":[{"name":"str"}],"output":{"name":"target"}}],[11,"from","","",94,{"inputs":[{"name":"string"}],"output":{"name":"target"}}],[11,"from","","",95,{"inputs":[{"name":"str"}],"output":{"name":"taskid"}}],[11,"from","","",95,{"inputs":[{"name":"string"}],"output":{"name":"taskid"}}],[11,"from","","",90,{"inputs":[{"name":"str"}],"output":{"name":"threadpoolpatterns"}}],[11,"from","","",90,{"inputs":[{"name":"string"}],"output":{"name":"threadpoolpatterns"}}],[11,"from","","",99,{"inputs":[{"name":"str"}],"output":{"name":"type"}}],[11,"from","","",99,{"inputs":[{"name":"string"}],"output":{"name":"type"}}],[11,"clone","elastic::client::requests::endpoints","",193,{"inputs":[{"name":"self"}],"output":{"name":"indicescloserequest"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"deletescriptrequest"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"termvectorsrequest"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"fieldstatsrequest"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"catthreadpoolrequest"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"snapshotdeleterequest"}}],[11,"clone","","",191,{"inputs":[{"name":"self"}],"output":{"name":"indicesgetsettingsrequest"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"createrequest"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"snapshotdeleterepositoryrequest"}}],[11,"clone","","",195,{"inputs":[{"name":"self"}],"output":{"name":"clusterallocationexplainrequest"}}],[11,"clone","","",209,{"inputs":[{"name":"self"}],"output":{"name":"indicesputtemplaterequest"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"indicesgettemplaterequest"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"clusterstaterequest"}}],[11,"clone","","",221,{"inputs":[{"name":"self"}],"output":{"name":"msearchtemplaterequest"}}],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"bulkrequest"}}],[11,"clone","","",181,{"inputs":[{"name":"self"}],"output":{"name":"explainrequest"}}],[11,"clone","","",172,{"inputs":[{"name":"self"}],"output":{"name":"suggestrequest"}}],[11,"clone","","",188,{"inputs":[{"name":"self"}],"output":{"name":"snapshotgetrepositoryrequest"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"rendersearchtemplaterequest"}}],[11,"clone","","",218,{"inputs":[{"name":"self"}],"output":{"name":"indicesstatsrequest"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"catrepositoriesrequest"}}],[11,"clone","","",211,{"inputs":[{"name":"self"}],"output":{"name":"indicesforcemergerequest"}}],[11,"clone","","",186,{"inputs":[{"name":"self"}],"output":{"name":"pingrequest"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"tasksgetrequest"}}],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"indicesexistsrequest"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"indicesflushsyncedrequest"}}],[11,"clone","","",189,{"inputs":[{"name":"self"}],"output":{"name":"msearchrequest"}}],[11,"clone","","",214,{"inputs":[{"name":"self"}],"output":{"name":"inforequest"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"searchtemplaterequest"}}],[11,"clone","","",201,{"inputs":[{"name":"self"}],"output":{"name":"indicesdeleterequest"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"deletebyqueryrequest"}}],[11,"clone","","",182,{"inputs":[{"name":"self"}],"output":{"name":"deletetemplaterequest"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"indicescreaterequest"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"percolaterequest"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"searchrequest"}}],[11,"clone","","",184,{"inputs":[{"name":"self"}],"output":{"name":"catnodeattrsrequest"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"snapshotverifyrepositoryrequest"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"countrequest"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"catallocationrequest"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"indicesflushrequest"}}],[11,"clone","","",194,{"inputs":[{"name":"self"}],"output":{"name":"indicesrefreshrequest"}}],[11,"clone","","",208,{"inputs":[{"name":"self"}],"output":{"name":"cathelprequest"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"searchshardsrequest"}}],[11,"clone","","",173,{"inputs":[{"name":"self"}],"output":{"name":"clusterhealthrequest"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"indicesexistsaliasrequest"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"indicesgetfieldmappingrequest"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"ingestputpipelinerequest"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"clusterpendingtasksrequest"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"ingestsimulaterequest"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"indicesgetaliasrequest"}}],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"getscriptrequest"}}],[11,"clone","","",219,{"inputs":[{"name":"self"}],"output":{"name":"indicesrecoveryrequest"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"ingestdeletepipelinerequest"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"taskscancelrequest"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"indicesclearcacherequest"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"deleterequest"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"indicesputmappingrequest"}}],[11,"clone","","",217,{"inputs":[{"name":"self"}],"output":{"name":"cataliasesrequest"}}],[11,"clone","","",196,{"inputs":[{"name":"self"}],"output":{"name":"clusterstatsrequest"}}],[11,"clone","","",215,{"inputs":[{"name":"self"}],"output":{"name":"indicesvalidatequeryrequest"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"catpendingtasksrequest"}}],[11,"clone","","",202,{"inputs":[{"name":"self"}],"output":{"name":"clearscrollrequest"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"catshardsrequest"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"indicesshardstoresrequest"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"indicesupdatealiasesrequest"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"catsegmentsrequest"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"mpercolaterequest"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"indicesopenrequest"}}],[11,"clone","","",212,{"inputs":[{"name":"self"}],"output":{"name":"getrequest"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"updatebyqueryrequest"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"mtermvectorsrequest"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"catrecoveryrequest"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"snapshotrestorerequest"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"reindexrequest"}}],[11,"clone","","",206,{"inputs":[{"name":"self"}],"output":{"name":"cathealthrequest"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"catcountrequest"}}],[11,"clone","","",210,{"inputs":[{"name":"self"}],"output":{"name":"catsnapshotsrequest"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"indicesgetmappingrequest"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"snapshotgetrequest"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"catnodesrequest"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"existsrequest"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"clusterrerouterequest"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"nodeshotthreadsrequest"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"nodesstatsrequest"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"ingestgetpipelinerequest"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"puttemplaterequest"}}],[11,"clone","","",222,{"inputs":[{"name":"self"}],"output":{"name":"getsourcerequest"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"snapshotcreaterequest"}}],[11,"clone","","",213,{"inputs":[{"name":"self"}],"output":{"name":"scrollrequest"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"snapshotstatusrequest"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"mgetrequest"}}],[11,"clone","","",216,{"inputs":[{"name":"self"}],"output":{"name":"indicesexiststemplaterequest"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"indicesgetupgraderequest"}}],[11,"clone","","",183,{"inputs":[{"name":"self"}],"output":{"name":"putscriptrequest"}}],[11,"clone","","",220,{"inputs":[{"name":"self"}],"output":{"name":"gettemplaterequest"}}],[11,"clone","","",187,{"inputs":[{"name":"self"}],"output":{"name":"indicesdeletetemplaterequest"}}],[11,"clone","","",203,{"inputs":[{"name":"self"}],"output":{"name":"indexrequest"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"indicesputsettingsrequest"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"cattemplatesrequest"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"catindicesrequest"}}],[11,"clone","","",192,{"inputs":[{"name":"self"}],"output":{"name":"clusterputsettingsrequest"}}],[11,"clone","","",207,{"inputs":[{"name":"self"}],"output":{"name":"updaterequest"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"indicesputaliasrequest"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"catpluginsrequest"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"countpercolaterequest"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"indicesupgraderequest"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"indicesdeletealiasrequest"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"cattasksrequest"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"indicesrolloverrequest"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"reindexrethrottlerequest"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"snapshotcreaterepositoryrequest"}}],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"indicesgetrequest"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"indicesanalyzerequest"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"catfielddatarequest"}}],[11,"clone","","",197,{"inputs":[{"name":"self"}],"output":{"name":"indicessegmentsrequest"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"indicesshrinkrequest"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"taskslistrequest"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"catmasterrequest"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"indicesexiststyperequest"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"clustergetsettingsrequest"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"nodesinforequest"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"simplesearchrequest"}}],[11,"clone","elastic::client::requests","",277,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"httpmethod"}}],[11,"clone","elastic::client::requests::params","",97,{"inputs":[{"name":"self"}],"output":{"name":"alias"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"feature"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"fields"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"index"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"indexmetric"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"lang"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"metric"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"newindex"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"repository"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"scrollid"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"snapshot"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"taskid"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"threadpoolpatterns"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"deref","elastic::client::requests","",277,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"deref","elastic::client::requests::params","",97,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",85,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",83,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",84,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",92,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",98,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",91,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",86,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",100,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",96,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",87,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",88,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",89,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",93,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",94,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",95,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",90,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",99,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","elastic::error","",1,{"inputs":[{"name":"self"},{"name":"apierror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"apierror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","elastic::client::responses","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",278,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",279,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",280,null],[11,"deserialize","elastic::error","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","elastic::client::responses","",227,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"deserialize","","",226,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"deserialize","","",225,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"deserialize","","",278,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"from","elastic::error","",1,{"inputs":[{"name":"map"}],"output":{"name":"apierror"}}],[11,"from","elastic::client::responses::parse","",229,{"inputs":[{"name":"unbufferedresponse"}],"output":{"name":"maybebufferedresponse"}}],[11,"from","","",229,{"inputs":[{"name":"bufferedresponse"}],"output":{"name":"maybebufferedresponse"}}],[11,"from","elastic::error","",2,{"inputs":[{"name":"apierror"}],"output":{"name":"responseerror"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"responseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","elastic::client::responses","",279,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","elastic::error","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_geo","elastic::types::prelude","",281,{"inputs":[{"name":"self"}],"output":{"name":"geometry"}}],[11,"fmt","","",269,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",282,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",283,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",284,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",285,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",286,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",287,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",288,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",289,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",290,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",291,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",292,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",293,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",281,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",294,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",295,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",296,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",298,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",299,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",300,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",301,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",302,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",303,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",304,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",305,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",306,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",307,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",309,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",311,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",312,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",313,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",314,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",258,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",315,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",316,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",260,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",261,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",318,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",264,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",265,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",266,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",290,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",292,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",281,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",299,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",300,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",308,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",309,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",310,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",311,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",312,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",313,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",315,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",317,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"default","","",290,{"inputs":[],"output":{"name":"date"}}],[11,"default","","",319,{"inputs":[],"output":{"name":"field"}}],[11,"default","","",282,{"inputs":[],"output":{"name":"defaultmapping"}}],[11,"default","","",283,{"inputs":[],"output":{"name":"wrappedmapping"}}],[11,"default","","",320,{"inputs":[],"output":{"name":"document"}}],[11,"default","","",284,{"inputs":[],"output":{"name":"defaultdatemapping"}}],[11,"default","","",286,{"inputs":[],"output":{"name":"chronoformat"}}],[11,"default","","",287,{"inputs":[],"output":{"name":"basicdatetimenomillis"}}],[11,"default","","",288,{"inputs":[],"output":{"name":"basicdatetime"}}],[11,"default","","",289,{"inputs":[],"output":{"name":"epochmillis"}}],[11,"default","","",291,{"inputs":[],"output":{"name":"defaultbooleanmapping"}}],[11,"default","","",292,{"inputs":[],"output":{"name":"boolean"}}],[11,"default","","",293,{"inputs":[],"output":{"name":"defaultgeopointmapping"}}],[11,"default","","",294,{"inputs":[],"output":{"name":"geopointobject"}}],[11,"default","","",295,{"inputs":[],"output":{"name":"geopointstring"}}],[11,"default","","",296,{"inputs":[],"output":{"name":"geopointhash"}}],[11,"default","","",297,{"inputs":[],"output":{"name":"geopointarray"}}],[11,"default","","",298,{"inputs":[],"output":{"name":"defaultgeoshapemapping"}}],[11,"default","","",301,{"inputs":[],"output":{"name":"defaultipmapping"}}],[11,"default","","",302,{"inputs":[],"output":{"name":"defaultintegermapping"}}],[11,"default","","",303,{"inputs":[],"output":{"name":"defaultlongmapping"}}],[11,"default","","",304,{"inputs":[],"output":{"name":"defaultshortmapping"}}],[11,"default","","",305,{"inputs":[],"output":{"name":"defaultbytemapping"}}],[11,"default","","",306,{"inputs":[],"output":{"name":"defaultfloatmapping"}}],[11,"default","","",307,{"inputs":[],"output":{"name":"defaultdoublemapping"}}],[11,"default","","",308,{"inputs":[],"output":{"name":"integer"}}],[11,"default","","",309,{"inputs":[],"output":{"name":"long"}}],[11,"default","","",310,{"inputs":[],"output":{"name":"short"}}],[11,"default","","",311,{"inputs":[],"output":{"name":"byte"}}],[11,"default","","",312,{"inputs":[],"output":{"name":"float"}}],[11,"default","","",313,{"inputs":[],"output":{"name":"double"}}],[11,"default","","",314,{"inputs":[],"output":{"name":"defaultkeywordmapping"}}],[11,"default","","",258,{"inputs":[],"output":{"name":"keywordfieldmapping"}}],[11,"default","","",315,{"inputs":[],"output":{"name":"keyword"}}],[11,"default","","",316,{"inputs":[],"output":{"name":"defaulttextmapping"}}],[11,"default","","",261,{"inputs":[],"output":{"name":"fielddatafrequencyfilter"}}],[11,"default","","",262,{"inputs":[],"output":{"name":"textfieldmapping"}}],[11,"default","","",317,{"inputs":[],"output":{"name":"text"}}],[11,"default","","",318,{"inputs":[],"output":{"name":"defaultstringmapping"}}],[11,"default","","",265,{"inputs":[],"output":{"name":"elastictokencountfieldmapping"}}],[11,"default","","",266,{"inputs":[],"output":{"name":"elasticcompletionfieldmapping"}}],[11,"as_ref","","",290,{"inputs":[{"name":"self"}],"output":{"name":"datetime"}}],[11,"as_ref","","",292,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","",281,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"as_ref","","",299,{"inputs":[{"name":"self"}],"output":{"name":"geometry"}}],[11,"as_ref","","",300,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"as_ref","","",308,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"as_ref","","",309,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"as_ref","","",310,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"as_ref","","",311,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"as_ref","","",312,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"as_ref","","",313,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"as_ref","","",315,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",315,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"as_ref","","",317,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",317,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"serialize","","",269,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",319,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",319,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",320,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",319,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",236,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",319,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",290,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",319,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",292,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",319,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",281,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",319,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",245,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",246,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",247,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",299,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",249,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",300,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",319,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",319,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",258,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",319,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",260,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",261,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",262,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",263,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",264,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",265,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",266,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",319,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",319,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",319,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",319,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",319,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",319,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",308,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",309,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",310,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",311,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",312,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",313,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",315,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",317,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"clone","","",269,{"inputs":[{"name":"self"}],"output":{"name":"indexanalysis"}}],[11,"clone","","",282,{"inputs":[{"name":"self"}],"output":{"name":"defaultmapping"}}],[11,"clone","","",283,{"inputs":[{"name":"self"}],"output":{"name":"wrappedmapping"}}],[11,"clone","","",236,{"inputs":[{"name":"self"}],"output":{"name":"dynamic"}}],[11,"clone","","",284,{"inputs":[{"name":"self"}],"output":{"name":"defaultdatemapping"}}],[11,"clone","","",286,{"inputs":[{"name":"self"}],"output":{"name":"chronoformat"}}],[11,"clone","","",287,{"inputs":[{"name":"self"}],"output":{"name":"basicdatetimenomillis"}}],[11,"clone","","",288,{"inputs":[{"name":"self"}],"output":{"name":"basicdatetime"}}],[11,"clone","","",289,{"inputs":[{"name":"self"}],"output":{"name":"epochmillis"}}],[11,"clone","","",290,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"clone","","",291,{"inputs":[{"name":"self"}],"output":{"name":"defaultbooleanmapping"}}],[11,"clone","","",292,{"inputs":[{"name":"self"}],"output":{"name":"boolean"}}],[11,"clone","","",293,{"inputs":[{"name":"self"}],"output":{"name":"defaultgeopointmapping"}}],[11,"clone","","",281,{"inputs":[{"name":"self"}],"output":{"name":"geopoint"}}],[11,"clone","","",294,{"inputs":[{"name":"self"}],"output":{"name":"geopointobject"}}],[11,"clone","","",295,{"inputs":[{"name":"self"}],"output":{"name":"geopointstring"}}],[11,"clone","","",296,{"inputs":[{"name":"self"}],"output":{"name":"geopointhash"}}],[11,"clone","","",297,{"inputs":[{"name":"self"}],"output":{"name":"geopointarray"}}],[11,"clone","","",298,{"inputs":[{"name":"self"}],"output":{"name":"defaultgeoshapemapping"}}],[11,"clone","","",299,{"inputs":[{"name":"self"}],"output":{"name":"geoshape"}}],[11,"clone","","",300,{"inputs":[{"name":"self"}],"output":{"name":"ip"}}],[11,"clone","","",301,{"inputs":[{"name":"self"}],"output":{"name":"defaultipmapping"}}],[11,"clone","","",302,{"inputs":[{"name":"self"}],"output":{"name":"defaultintegermapping"}}],[11,"clone","","",303,{"inputs":[{"name":"self"}],"output":{"name":"defaultlongmapping"}}],[11,"clone","","",304,{"inputs":[{"name":"self"}],"output":{"name":"defaultshortmapping"}}],[11,"clone","","",305,{"inputs":[{"name":"self"}],"output":{"name":"defaultbytemapping"}}],[11,"clone","","",306,{"inputs":[{"name":"self"}],"output":{"name":"defaultfloatmapping"}}],[11,"clone","","",307,{"inputs":[{"name":"self"}],"output":{"name":"defaultdoublemapping"}}],[11,"clone","","",308,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"clone","","",309,{"inputs":[{"name":"self"}],"output":{"name":"long"}}],[11,"clone","","",310,{"inputs":[{"name":"self"}],"output":{"name":"short"}}],[11,"clone","","",311,{"inputs":[{"name":"self"}],"output":{"name":"byte"}}],[11,"clone","","",312,{"inputs":[{"name":"self"}],"output":{"name":"float"}}],[11,"clone","","",313,{"inputs":[{"name":"self"}],"output":{"name":"double"}}],[11,"clone","","",314,{"inputs":[{"name":"self"}],"output":{"name":"defaultkeywordmapping"}}],[11,"clone","","",258,{"inputs":[{"name":"self"}],"output":{"name":"keywordfieldmapping"}}],[11,"clone","","",315,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"clone","","",316,{"inputs":[{"name":"self"}],"output":{"name":"defaulttextmapping"}}],[11,"clone","","",260,{"inputs":[{"name":"self"}],"output":{"name":"termvector"}}],[11,"clone","","",261,{"inputs":[{"name":"self"}],"output":{"name":"fielddatafrequencyfilter"}}],[11,"clone","","",262,{"inputs":[{"name":"self"}],"output":{"name":"textfieldmapping"}}],[11,"clone","","",317,{"inputs":[{"name":"self"}],"output":{"name":"text"}}],[11,"clone","","",318,{"inputs":[{"name":"self"}],"output":{"name":"defaultstringmapping"}}],[11,"clone","","",263,{"inputs":[{"name":"self"}],"output":{"name":"indexoptions"}}],[11,"clone","","",264,{"inputs":[{"name":"self"}],"output":{"name":"stringfield"}}],[11,"clone","","",265,{"inputs":[{"name":"self"}],"output":{"name":"elastictokencountfieldmapping"}}],[11,"clone","","",266,{"inputs":[{"name":"self"}],"output":{"name":"elasticcompletionfieldmapping"}}],[11,"parse","","",294,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"format","","",294,{"inputs":[{"name":"point"},{"name":"s"}],"output":{"name":"result"}}],[11,"parse","","",295,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"format","","",295,{"inputs":[{"name":"point"},{"name":"s"}],"output":{"name":"result"}}],[11,"parse","","",296,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"format","","",296,{"inputs":[{"name":"point"},{"name":"s"}],"output":{"name":"result"}}],[11,"parse","","",297,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"format","","",297,{"inputs":[{"name":"point"},{"name":"s"}],"output":{"name":"result"}}],[11,"fields","","",318,{"inputs":[],"output":{"name":"option"}}],[11,"deref","","",290,{"inputs":[{"name":"self"}],"output":{"name":"datetime"}}],[11,"deref","","",292,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deref","","",281,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"deref","","",299,{"inputs":[{"name":"self"}],"output":{"name":"geometry"}}],[11,"deref","","",300,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"deref","","",308,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"deref","","",309,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"deref","","",310,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"deref","","",311,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"deref","","",312,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"deref","","",313,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"deref","","",315,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",317,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","","",282,{"inputs":[{"name":"self"},{"name":"defaultmapping"}],"output":{"name":"bool"}}],[11,"eq","","",284,{"inputs":[{"name":"self"},{"name":"defaultdatemapping"}],"output":{"name":"bool"}}],[11,"ne","","",284,{"inputs":[{"name":"self"},{"name":"defaultdatemapping"}],"output":{"name":"bool"}}],[11,"eq","","",286,{"inputs":[{"name":"self"},{"name":"chronoformat"}],"output":{"name":"bool"}}],[11,"eq","","",287,{"inputs":[{"name":"self"},{"name":"basicdatetimenomillis"}],"output":{"name":"bool"}}],[11,"eq","","",288,{"inputs":[{"name":"self"},{"name":"basicdatetime"}],"output":{"name":"bool"}}],[11,"eq","","",289,{"inputs":[{"name":"self"},{"name":"epochmillis"}],"output":{"name":"bool"}}],[11,"eq","","",290,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"ne","","",290,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"eq","","",290,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"ne","","",290,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"eq","","",291,{"inputs":[{"name":"self"},{"name":"defaultbooleanmapping"}],"output":{"name":"bool"}}],[11,"eq","","",292,{"inputs":[{"name":"self"},{"name":"boolean"}],"output":{"name":"bool"}}],[11,"ne","","",292,{"inputs":[{"name":"self"},{"name":"boolean"}],"output":{"name":"bool"}}],[11,"eq","","",292,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"ne","","",292,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"eq","","",293,{"inputs":[{"name":"self"},{"name":"defaultgeopointmapping"}],"output":{"name":"bool"}}],[11,"ne","","",293,{"inputs":[{"name":"self"},{"name":"defaultgeopointmapping"}],"output":{"name":"bool"}}],[11,"eq","","",281,{"inputs":[{"name":"self"},{"name":"geopoint"}],"output":{"name":"bool"}}],[11,"ne","","",281,{"inputs":[{"name":"self"},{"name":"geopoint"}],"output":{"name":"bool"}}],[11,"eq","","",281,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"ne","","",281,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"eq","","",294,{"inputs":[{"name":"self"},{"name":"geopointobject"}],"output":{"name":"bool"}}],[11,"eq","","",295,{"inputs":[{"name":"self"},{"name":"geopointstring"}],"output":{"name":"bool"}}],[11,"eq","","",296,{"inputs":[{"name":"self"},{"name":"geopointhash"}],"output":{"name":"bool"}}],[11,"eq","","",297,{"inputs":[{"name":"self"},{"name":"geopointarray"}],"output":{"name":"bool"}}],[11,"eq","","",298,{"inputs":[{"name":"self"},{"name":"defaultgeoshapemapping"}],"output":{"name":"bool"}}],[11,"eq","","",299,{"inputs":[{"name":"self"},{"name":"geoshape"}],"output":{"name":"bool"}}],[11,"ne","","",299,{"inputs":[{"name":"self"},{"name":"geoshape"}],"output":{"name":"bool"}}],[11,"eq","","",299,{"inputs":[{"name":"self"},{"name":"geometry"}],"output":{"name":"bool"}}],[11,"ne","","",299,{"inputs":[{"name":"self"},{"name":"geometry"}],"output":{"name":"bool"}}],[11,"eq","","",300,{"inputs":[{"name":"self"},{"name":"ip"}],"output":{"name":"bool"}}],[11,"ne","","",300,{"inputs":[{"name":"self"},{"name":"ip"}],"output":{"name":"bool"}}],[11,"eq","","",300,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"ne","","",300,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"eq","","",301,{"inputs":[{"name":"self"},{"name":"defaultipmapping"}],"output":{"name":"bool"}}],[11,"eq","","",302,{"inputs":[{"name":"self"},{"name":"defaultintegermapping"}],"output":{"name":"bool"}}],[11,"eq","","",303,{"inputs":[{"name":"self"},{"name":"defaultlongmapping"}],"output":{"name":"bool"}}],[11,"eq","","",304,{"inputs":[{"name":"self"},{"name":"defaultshortmapping"}],"output":{"name":"bool"}}],[11,"eq","","",305,{"inputs":[{"name":"self"},{"name":"defaultbytemapping"}],"output":{"name":"bool"}}],[11,"eq","","",306,{"inputs":[{"name":"self"},{"name":"defaultfloatmapping"}],"output":{"name":"bool"}}],[11,"eq","","",307,{"inputs":[{"name":"self"},{"name":"defaultdoublemapping"}],"output":{"name":"bool"}}],[11,"eq","","",308,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"bool"}}],[11,"ne","","",308,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"bool"}}],[11,"eq","","",308,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"ne","","",308,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"eq","","",309,{"inputs":[{"name":"self"},{"name":"long"}],"output":{"name":"bool"}}],[11,"ne","","",309,{"inputs":[{"name":"self"},{"name":"long"}],"output":{"name":"bool"}}],[11,"eq","","",309,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"ne","","",309,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"eq","","",310,{"inputs":[{"name":"self"},{"name":"short"}],"output":{"name":"bool"}}],[11,"ne","","",310,{"inputs":[{"name":"self"},{"name":"short"}],"output":{"name":"bool"}}],[11,"eq","","",310,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"ne","","",310,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"eq","","",311,{"inputs":[{"name":"self"},{"name":"byte"}],"output":{"name":"bool"}}],[11,"ne","","",311,{"inputs":[{"name":"self"},{"name":"byte"}],"output":{"name":"bool"}}],[11,"eq","","",311,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"ne","","",311,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"eq","","",312,{"inputs":[{"name":"self"},{"name":"float"}],"output":{"name":"bool"}}],[11,"ne","","",312,{"inputs":[{"name":"self"},{"name":"float"}],"output":{"name":"bool"}}],[11,"eq","","",312,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"ne","","",312,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"eq","","",313,{"inputs":[{"name":"self"},{"name":"double"}],"output":{"name":"bool"}}],[11,"ne","","",313,{"inputs":[{"name":"self"},{"name":"double"}],"output":{"name":"bool"}}],[11,"eq","","",313,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"ne","","",313,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"eq","","",314,{"inputs":[{"name":"self"},{"name":"defaultkeywordmapping"}],"output":{"name":"bool"}}],[11,"eq","","",315,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ne","","",315,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"eq","","",315,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",315,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",315,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",315,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",316,{"inputs":[{"name":"self"},{"name":"defaulttextmapping"}],"output":{"name":"bool"}}],[11,"eq","","",261,{"inputs":[{"name":"self"},{"name":"fielddatafrequencyfilter"}],"output":{"name":"bool"}}],[11,"ne","","",261,{"inputs":[{"name":"self"},{"name":"fielddatafrequencyfilter"}],"output":{"name":"bool"}}],[11,"eq","","",317,{"inputs":[{"name":"self"},{"name":"text"}],"output":{"name":"bool"}}],[11,"ne","","",317,{"inputs":[{"name":"self"},{"name":"text"}],"output":{"name":"bool"}}],[11,"eq","","",317,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",317,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",317,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",317,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",318,{"inputs":[{"name":"self"},{"name":"defaultstringmapping"}],"output":{"name":"bool"}}],[11,"from","","",319,{"inputs":[{"name":"m"}],"output":{"name":"field"}}],[11,"from","","",320,{"inputs":[{"name":"m"}],"output":{"name":"document"}}],[11,"from","","",285,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"from","","",285,{"inputs":[{"name":"string"}],"output":{"name":"parseerror"}}],[11,"from","","",281,{"inputs":[{"name":"coordinate"}],"output":{"name":"geopoint"}}],[11,"from","","",290,{"inputs":[{"name":"datetime"}],"output":{"name":"date"}}],[11,"from","","",292,{"inputs":[{"name":"bool"}],"output":{"name":"boolean"}}],[11,"from","","",281,{"inputs":[{"name":"point"}],"output":{"name":"geopoint"}}],[11,"from","","",299,{"inputs":[{"name":"geometry"}],"output":{"name":"geoshape"}}],[11,"from","","",300,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ip"}}],[11,"from","","",308,{"inputs":[{"name":"i32"}],"output":{"name":"integer"}}],[11,"from","","",309,{"inputs":[{"name":"i64"}],"output":{"name":"long"}}],[11,"from","","",310,{"inputs":[{"name":"i16"}],"output":{"name":"short"}}],[11,"from","","",311,{"inputs":[{"name":"i8"}],"output":{"name":"byte"}}],[11,"from","","",312,{"inputs":[{"name":"f32"}],"output":{"name":"float"}}],[11,"from","","",313,{"inputs":[{"name":"f64"}],"output":{"name":"double"}}],[11,"from","","",315,{"inputs":[{"name":"string"}],"output":{"name":"keyword"}}],[11,"from","","",317,{"inputs":[{"name":"string"}],"output":{"name":"text"}}],[11,"data_type","","",283,{"inputs":[],"output":{"name":"str"}}],[11,"fmt","","",285,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_string","","",249,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"description","","",285,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",285,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"name","","",289,{"inputs":[],"output":{"name":"str"}}],[11,"parse","","",289,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"format","","",289,{"inputs":[{"name":"datetime"}],"output":{"name":"string"}}],[11,"parse","","",286,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"format","","",286,{"inputs":[{"name":"datetime"}],"output":{"name":"string"}}],[11,"name","","",286,{"inputs":[],"output":{"name":"str"}}],[11,"parse","","",287,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"format","","",287,{"inputs":[{"name":"datetime"}],"output":{"name":"string"}}],[11,"name","","",287,{"inputs":[],"output":{"name":"str"}}],[11,"parse","","",288,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"format","","",288,{"inputs":[{"name":"datetime"}],"output":{"name":"string"}}],[11,"name","","",288,{"inputs":[],"output":{"name":"str"}}],[11,"new","elastic::http::header","Creates a new, empty headers map.",272,{"inputs":[],"output":{"name":"headers"}}],[11,"set","","Set a header field to the corresponding value.",272,null],[11,"get_raw","","Access the raw value of a header.",272,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",272,null],[11,"append_raw","","Append a value to raw value of this header.",272,null],[11,"remove_raw","","Remove a header set by set_raw",272,null],[11,"get","","Get a reference to the header field's value, if it exists.",272,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",272,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has","","Returns a boolean of whether a certain header is in the map.",272,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remove","","Removes a header from the map, if one existed. Returns true if a header has been removed.",272,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the header fields.",272,{"inputs":[{"name":"self"}],"output":{"name":"headersitems"}}],[11,"len","","Returns the number of headers in the map.",272,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Remove all headers from the map.",272,null],[11,"is","","Check if a HeaderView is a certain Header.",273,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"name","","Get the Header name as a slice.",273,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"value","","Cast the value to a certain Header type.",273,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"value_string","","Get just the header value as a String.",273,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",10,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"range"}}],[11,"bytes_multi","","Get byte range header with multiple subranges (\"bytes=from1-to1,from2-to2,fromX-toX\")",10,{"inputs":[{"name":"vec"}],"output":{"name":"range"}}],[11,"new","","Creates a new `QualityItem` from an item and a quality. The item can be of any type. The quality should be a value in the range [0, 1].",23,{"inputs":[{"name":"t"},{"name":"quality"}],"output":{"name":"qualityitem"}}],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",26,{"inputs":[],"output":{"name":"contenttype"}}],[11,"plaintext","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",26,{"inputs":[],"output":{"name":"contenttype"}}],[11,"html","","A constructor  to easily create a `Content-Type: text/html; charset=utf-8` header.",26,{"inputs":[],"output":{"name":"contenttype"}}],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",26,{"inputs":[],"output":{"name":"contenttype"}}],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",26,{"inputs":[],"output":{"name":"contenttype"}}],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",26,{"inputs":[],"output":{"name":"contenttype"}}],[11,"including_subdomains","","Create an STS header that includes subdomains",38,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",38,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"new","","Creates a new `Origin` header.",51,{"inputs":[{"name":"s"},{"name":"h"},{"name":"option"}],"output":{"name":"origin"}}],[11,"star","","A constructor to easily create `Accept: */*`.",59,{"inputs":[],"output":{"name":"accept"}}],[11,"json","","A constructor to easily create `Accept: application/json`.",59,{"inputs":[],"output":{"name":"accept"}}],[11,"text","","A constructor to easily create `Accept: text/*`.",59,{"inputs":[],"output":{"name":"accept"}}],[11,"image","","A constructor to easily create `Accept: image/*`.",59,{"inputs":[],"output":{"name":"accept"}}],[11,"close","","A constructor to easily create a `Connection: close` header.",63,{"inputs":[],"output":{"name":"connection"}}],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",63,{"inputs":[],"output":{"name":"connection"}}],[11,"new","","Creates a new Protocol with the given name and version",76,{"inputs":[{"name":"protocolname"},{"name":"option"}],"output":{"name":"protocol"}}],[11,"new","elastic::prelude","Create a new container for request parameters.",79,{"inputs":[{"name":"t"}],"output":{"name":"requestparams"}}],[11,"base_url","","Set the base url for the Elasticsearch node.",79,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"requestparams"}}],[11,"url_param","","Set a url param value.",79,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"requestparams"}}],[11,"header","","Set a header value on the params.",79,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"requestparams"}}],[11,"get_url_qry","","Get the url query params as a formatted string.",79,null],[11,"new","elastic::client::requests::endpoints","",101,{"inputs":[{"name":"b"}],"output":{"name":"mgetrequest"}}],[11,"for_index","","",101,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"mgetrequest"}}],[11,"for_index_ty","","",101,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"mgetrequest"}}],[11,"new","","",102,{"inputs":[],"output":{"name":"catrepositoriesrequest"}}],[11,"new","","",103,{"inputs":[],"output":{"name":"indicesgettemplaterequest"}}],[11,"for_name","","",103,{"inputs":[{"name":"iname"}],"output":{"name":"indicesgettemplaterequest"}}],[11,"new","","",104,{"inputs":[],"output":{"name":"taskslistrequest"}}],[11,"new","","",105,{"inputs":[],"output":{"name":"indicesgetmappingrequest"}}],[11,"for_index","","",105,{"inputs":[{"name":"iindex"}],"output":{"name":"indicesgetmappingrequest"}}],[11,"for_index_ty","","",105,{"inputs":[{"name":"iindex"},{"name":"itype"}],"output":{"name":"indicesgetmappingrequest"}}],[11,"for_ty","","",105,{"inputs":[{"name":"itype"}],"output":{"name":"indicesgetmappingrequest"}}],[11,"new","","",106,{"inputs":[],"output":{"name":"catthreadpoolrequest"}}],[11,"for_thread_pool_patterns","","",106,{"inputs":[{"name":"ithreadpoolpatterns"}],"output":{"name":"catthreadpoolrequest"}}],[11,"new","","",107,{"inputs":[],"output":{"name":"clustergetsettingsrequest"}}],[11,"for_index_ty_id","","",108,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"iid"},{"name":"b"}],"output":{"name":"createrequest"}}],[11,"for_index_name","","",109,{"inputs":[{"name":"iindex"},{"name":"iname"},{"name":"b"}],"output":{"name":"indicesputaliasrequest"}}],[11,"new","","",110,{"inputs":[{"name":"b"}],"output":{"name":"searchshardsrequest"}}],[11,"for_index","","",110,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"searchshardsrequest"}}],[11,"new","","",111,{"inputs":[{"name":"b"}],"output":{"name":"searchtemplaterequest"}}],[11,"for_index","","",111,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"searchtemplaterequest"}}],[11,"for_index_ty","","",111,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"searchtemplaterequest"}}],[11,"for_index_target","","",112,{"inputs":[{"name":"iindex"},{"name":"itarget"},{"name":"b"}],"output":{"name":"indicesshrinkrequest"}}],[11,"new","","",113,{"inputs":[],"output":{"name":"catpendingtasksrequest"}}],[11,"new","","",114,{"inputs":[],"output":{"name":"cattemplatesrequest"}}],[11,"for_name","","",114,{"inputs":[{"name":"iname"}],"output":{"name":"cattemplatesrequest"}}],[11,"new","","",115,{"inputs":[],"output":{"name":"catindicesrequest"}}],[11,"for_index","","",115,{"inputs":[{"name":"iindex"}],"output":{"name":"catindicesrequest"}}],[11,"new","","",116,{"inputs":[],"output":{"name":"catshardsrequest"}}],[11,"for_index","","",116,{"inputs":[{"name":"iindex"}],"output":{"name":"catshardsrequest"}}],[11,"for_index_ty","","",117,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"termvectorsrequest"}}],[11,"for_index_ty_id","","",117,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"iid"},{"name":"b"}],"output":{"name":"termvectorsrequest"}}],[11,"for_index_ty","","",118,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"indicesputmappingrequest"}}],[11,"for_ty","","",118,{"inputs":[{"name":"itype"},{"name":"b"}],"output":{"name":"indicesputmappingrequest"}}],[11,"new","","",119,{"inputs":[],"output":{"name":"catrecoveryrequest"}}],[11,"for_index","","",119,{"inputs":[{"name":"iindex"}],"output":{"name":"catrecoveryrequest"}}],[11,"for_repository_snapshot","","",120,{"inputs":[{"name":"irepository"},{"name":"isnapshot"},{"name":"b"}],"output":{"name":"snapshotrestorerequest"}}],[11,"for_task_id","","",121,{"inputs":[{"name":"itaskid"},{"name":"b"}],"output":{"name":"reindexrethrottlerequest"}}],[11,"new","","",122,{"inputs":[{"name":"b"}],"output":{"name":"mtermvectorsrequest"}}],[11,"for_index","","",122,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"mtermvectorsrequest"}}],[11,"for_index_ty","","",122,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"mtermvectorsrequest"}}],[11,"for_index","","",123,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"indicesopenrequest"}}],[11,"new","","",124,{"inputs":[],"output":{"name":"catpluginsrequest"}}],[11,"new","","",125,{"inputs":[],"output":{"name":"nodesinforequest"}}],[11,"for_metric","","",125,{"inputs":[{"name":"imetric"}],"output":{"name":"nodesinforequest"}}],[11,"for_node_id","","",125,{"inputs":[{"name":"inodeid"}],"output":{"name":"nodesinforequest"}}],[11,"for_node_id_metric","","",125,{"inputs":[{"name":"inodeid"},{"name":"imetric"}],"output":{"name":"nodesinforequest"}}],[11,"for_repository","","",126,{"inputs":[{"name":"irepository"}],"output":{"name":"snapshotdeleterepositoryrequest"}}],[11,"new","","",127,{"inputs":[{"name":"b"}],"output":{"name":"clusterrerouterequest"}}],[11,"new","","",128,{"inputs":[{"name":"b"}],"output":{"name":"indicesanalyzerequest"}}],[11,"for_index","","",128,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"indicesanalyzerequest"}}],[11,"for_id","","",129,{"inputs":[{"name":"iid"}],"output":{"name":"ingestdeletepipelinerequest"}}],[11,"for_repository_snapshot","","",130,{"inputs":[{"name":"irepository"},{"name":"isnapshot"},{"name":"b"}],"output":{"name":"snapshotcreaterequest"}}],[11,"for_index_name","","",131,{"inputs":[{"name":"iindex"},{"name":"iname"}],"output":{"name":"indicesdeletealiasrequest"}}],[11,"for_lang_id","","",132,{"inputs":[{"name":"ilang"},{"name":"iid"}],"output":{"name":"deletescriptrequest"}}],[11,"new","","",133,{"inputs":[],"output":{"name":"indicesshardstoresrequest"}}],[11,"for_index","","",133,{"inputs":[{"name":"iindex"}],"output":{"name":"indicesshardstoresrequest"}}],[11,"new","","",134,{"inputs":[{"name":"b"}],"output":{"name":"taskscancelrequest"}}],[11,"for_task_id","","",134,{"inputs":[{"name":"itaskid"},{"name":"b"}],"output":{"name":"taskscancelrequest"}}],[11,"new","","",135,{"inputs":[{"name":"b"}],"output":{"name":"rendersearchtemplaterequest"}}],[11,"for_id","","",135,{"inputs":[{"name":"iid"},{"name":"b"}],"output":{"name":"rendersearchtemplaterequest"}}],[11,"for_index_ty","","",136,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"percolaterequest"}}],[11,"for_index_ty_id","","",136,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"iid"},{"name":"b"}],"output":{"name":"percolaterequest"}}],[11,"for_id","","",137,{"inputs":[{"name":"iid"},{"name":"b"}],"output":{"name":"puttemplaterequest"}}],[11,"for_fields","","",138,{"inputs":[{"name":"ifields"}],"output":{"name":"indicesgetfieldmappingrequest"}}],[11,"for_index_fields","","",138,{"inputs":[{"name":"iindex"},{"name":"ifields"}],"output":{"name":"indicesgetfieldmappingrequest"}}],[11,"for_index_ty_fields","","",138,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"ifields"}],"output":{"name":"indicesgetfieldmappingrequest"}}],[11,"for_ty_fields","","",138,{"inputs":[{"name":"itype"},{"name":"ifields"}],"output":{"name":"indicesgetfieldmappingrequest"}}],[11,"new","","",139,{"inputs":[{"name":"b"}],"output":{"name":"reindexrequest"}}],[11,"new","","",140,{"inputs":[{"name":"b"}],"output":{"name":"indicesclearcacherequest"}}],[11,"for_index","","",140,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"indicesclearcacherequest"}}],[11,"new","","",141,{"inputs":[],"output":{"name":"catcountrequest"}}],[11,"for_index","","",141,{"inputs":[{"name":"iindex"}],"output":{"name":"catcountrequest"}}],[11,"for_index_ty","","",142,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"countpercolaterequest"}}],[11,"for_index_ty_id","","",142,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"iid"},{"name":"b"}],"output":{"name":"countpercolaterequest"}}],[11,"for_id","","",143,{"inputs":[{"name":"iid"},{"name":"b"}],"output":{"name":"ingestputpipelinerequest"}}],[11,"for_repository_snapshot","","",144,{"inputs":[{"name":"irepository"},{"name":"isnapshot"}],"output":{"name":"snapshotgetrequest"}}],[11,"new","","",145,{"inputs":[{"name":"b"}],"output":{"name":"indicesupdatealiasesrequest"}}],[11,"for_index","","",146,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"indicescreaterequest"}}],[11,"for_repository","","",147,{"inputs":[{"name":"irepository"},{"name":"b"}],"output":{"name":"snapshotverifyrepositoryrequest"}}],[11,"new","","",148,{"inputs":[],"output":{"name":"catsegmentsrequest"}}],[11,"for_index","","",148,{"inputs":[{"name":"iindex"}],"output":{"name":"catsegmentsrequest"}}],[11,"for_repository","","",149,{"inputs":[{"name":"irepository"},{"name":"b"}],"output":{"name":"snapshotcreaterepositoryrequest"}}],[11,"new","","",150,{"inputs":[],"output":{"name":"clusterpendingtasksrequest"}}],[11,"new","","",151,{"inputs":[],"output":{"name":"cattasksrequest"}}],[11,"for_index","","",152,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"updatebyqueryrequest"}}],[11,"for_index_ty","","",152,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"updatebyqueryrequest"}}],[11,"new","","",153,{"inputs":[{"name":"b"}],"output":{"name":"searchrequest"}}],[11,"for_index","","",153,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"searchrequest"}}],[11,"for_index_ty","","",153,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"searchrequest"}}],[11,"new","","",154,{"inputs":[],"output":{"name":"indicesgetupgraderequest"}}],[11,"for_index","","",154,{"inputs":[{"name":"iindex"}],"output":{"name":"indicesgetupgraderequest"}}],[11,"for_repository_snapshot","","",155,{"inputs":[{"name":"irepository"},{"name":"isnapshot"}],"output":{"name":"snapshotdeleterequest"}}],[11,"for_index_ty","","",156,{"inputs":[{"name":"iindex"},{"name":"itype"}],"output":{"name":"indicesexiststyperequest"}}],[11,"new","","",157,{"inputs":[],"output":{"name":"nodesstatsrequest"}}],[11,"for_metric","","",157,{"inputs":[{"name":"imetric"}],"output":{"name":"nodesstatsrequest"}}],[11,"for_metric_index_metric","","",157,{"inputs":[{"name":"imetric"},{"name":"iindexmetric"}],"output":{"name":"nodesstatsrequest"}}],[11,"for_node_id","","",157,{"inputs":[{"name":"inodeid"}],"output":{"name":"nodesstatsrequest"}}],[11,"for_node_id_metric","","",157,{"inputs":[{"name":"inodeid"},{"name":"imetric"}],"output":{"name":"nodesstatsrequest"}}],[11,"for_node_id_metric_index_metric","","",157,{"inputs":[{"name":"inodeid"},{"name":"imetric"},{"name":"iindexmetric"}],"output":{"name":"nodesstatsrequest"}}],[11,"new","","",158,{"inputs":[],"output":{"name":"catnodesrequest"}}],[11,"for_index","","",159,{"inputs":[{"name":"iindex"}],"output":{"name":"indicesexistsrequest"}}],[11,"new","","",160,{"inputs":[],"output":{"name":"simplesearchrequest"}}],[11,"for_index","","",160,{"inputs":[{"name":"iindex"}],"output":{"name":"simplesearchrequest"}}],[11,"for_index_ty","","",160,{"inputs":[{"name":"iindex"},{"name":"itype"}],"output":{"name":"simplesearchrequest"}}],[11,"new","","",161,{"inputs":[{"name":"b"}],"output":{"name":"indicesupgraderequest"}}],[11,"for_index","","",161,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"indicesupgraderequest"}}],[11,"for_index_ty_id","","",162,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"iid"}],"output":{"name":"deleterequest"}}],[11,"for_index","","",163,{"inputs":[{"name":"iindex"}],"output":{"name":"indicesexistsaliasrequest"}}],[11,"for_index_name","","",163,{"inputs":[{"name":"iindex"},{"name":"iname"}],"output":{"name":"indicesexistsaliasrequest"}}],[11,"for_name","","",163,{"inputs":[{"name":"iname"}],"output":{"name":"indicesexistsaliasrequest"}}],[11,"new","","",164,{"inputs":[],"output":{"name":"catmasterrequest"}}],[11,"new","","",165,{"inputs":[{"name":"b"}],"output":{"name":"countrequest"}}],[11,"for_index","","",165,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"countrequest"}}],[11,"for_index_ty","","",165,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"countrequest"}}],[11,"new","","",166,{"inputs":[],"output":{"name":"snapshotstatusrequest"}}],[11,"for_repository","","",166,{"inputs":[{"name":"irepository"}],"output":{"name":"snapshotstatusrequest"}}],[11,"for_repository_snapshot","","",166,{"inputs":[{"name":"irepository"},{"name":"isnapshot"}],"output":{"name":"snapshotstatusrequest"}}],[11,"for_index","","",167,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"deletebyqueryrequest"}}],[11,"for_index_ty","","",167,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"deletebyqueryrequest"}}],[11,"new","","",168,{"inputs":[],"output":{"name":"indicesgetaliasrequest"}}],[11,"for_index","","",168,{"inputs":[{"name":"iindex"}],"output":{"name":"indicesgetaliasrequest"}}],[11,"for_index_name","","",168,{"inputs":[{"name":"iindex"},{"name":"iname"}],"output":{"name":"indicesgetaliasrequest"}}],[11,"for_name","","",168,{"inputs":[{"name":"iname"}],"output":{"name":"indicesgetaliasrequest"}}],[11,"new","","",169,{"inputs":[],"output":{"name":"ingestgetpipelinerequest"}}],[11,"for_id","","",169,{"inputs":[{"name":"iid"}],"output":{"name":"ingestgetpipelinerequest"}}],[11,"new","","",170,{"inputs":[{"name":"b"}],"output":{"name":"bulkrequest"}}],[11,"for_index","","",170,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"bulkrequest"}}],[11,"for_index_ty","","",170,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"bulkrequest"}}],[11,"new","","",171,{"inputs":[{"name":"b"}],"output":{"name":"mpercolaterequest"}}],[11,"for_index","","",171,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"mpercolaterequest"}}],[11,"for_index_ty","","",171,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"mpercolaterequest"}}],[11,"new","","",172,{"inputs":[{"name":"b"}],"output":{"name":"suggestrequest"}}],[11,"for_index","","",172,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"suggestrequest"}}],[11,"new","","",173,{"inputs":[],"output":{"name":"clusterhealthrequest"}}],[11,"for_index","","",173,{"inputs":[{"name":"iindex"}],"output":{"name":"clusterhealthrequest"}}],[11,"for_task_id","","",174,{"inputs":[{"name":"itaskid"}],"output":{"name":"tasksgetrequest"}}],[11,"new","","",175,{"inputs":[{"name":"b"}],"output":{"name":"indicesflushrequest"}}],[11,"for_index","","",175,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"indicesflushrequest"}}],[11,"new","","",176,{"inputs":[],"output":{"name":"catfielddatarequest"}}],[11,"for_fields","","",176,{"inputs":[{"name":"ifields"}],"output":{"name":"catfielddatarequest"}}],[11,"new","","",177,{"inputs":[],"output":{"name":"clusterstaterequest"}}],[11,"for_metric","","",177,{"inputs":[{"name":"imetric"}],"output":{"name":"clusterstaterequest"}}],[11,"for_metric_index","","",177,{"inputs":[{"name":"imetric"},{"name":"iindex"}],"output":{"name":"clusterstaterequest"}}],[11,"new","","",178,{"inputs":[{"name":"b"}],"output":{"name":"indicesflushsyncedrequest"}}],[11,"for_index","","",178,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"indicesflushsyncedrequest"}}],[11,"new","","",179,{"inputs":[],"output":{"name":"nodeshotthreadsrequest"}}],[11,"for_node_id","","",179,{"inputs":[{"name":"inodeid"}],"output":{"name":"nodeshotthreadsrequest"}}],[11,"new","","",180,{"inputs":[{"name":"b"}],"output":{"name":"indicesputsettingsrequest"}}],[11,"for_index","","",180,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"indicesputsettingsrequest"}}],[11,"for_index_ty_id","","",181,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"iid"},{"name":"b"}],"output":{"name":"explainrequest"}}],[11,"for_id","","",182,{"inputs":[{"name":"iid"}],"output":{"name":"deletetemplaterequest"}}],[11,"for_lang_id","","",183,{"inputs":[{"name":"ilang"},{"name":"iid"},{"name":"b"}],"output":{"name":"putscriptrequest"}}],[11,"new","","",184,{"inputs":[],"output":{"name":"catnodeattrsrequest"}}],[11,"for_index_ty_id","","",185,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"iid"}],"output":{"name":"existsrequest"}}],[11,"new","","",186,{"inputs":[],"output":{"name":"pingrequest"}}],[11,"for_name","","",187,{"inputs":[{"name":"iname"}],"output":{"name":"indicesdeletetemplaterequest"}}],[11,"new","","",188,{"inputs":[],"output":{"name":"snapshotgetrepositoryrequest"}}],[11,"for_repository","","",188,{"inputs":[{"name":"irepository"}],"output":{"name":"snapshotgetrepositoryrequest"}}],[11,"new","","",189,{"inputs":[{"name":"b"}],"output":{"name":"msearchrequest"}}],[11,"for_index","","",189,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"msearchrequest"}}],[11,"for_index_ty","","",189,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"msearchrequest"}}],[11,"new","","",190,{"inputs":[{"name":"b"}],"output":{"name":"ingestsimulaterequest"}}],[11,"for_id","","",190,{"inputs":[{"name":"iid"},{"name":"b"}],"output":{"name":"ingestsimulaterequest"}}],[11,"new","","",191,{"inputs":[],"output":{"name":"indicesgetsettingsrequest"}}],[11,"for_index","","",191,{"inputs":[{"name":"iindex"}],"output":{"name":"indicesgetsettingsrequest"}}],[11,"for_index_name","","",191,{"inputs":[{"name":"iindex"},{"name":"iname"}],"output":{"name":"indicesgetsettingsrequest"}}],[11,"for_name","","",191,{"inputs":[{"name":"iname"}],"output":{"name":"indicesgetsettingsrequest"}}],[11,"new","","",192,{"inputs":[{"name":"b"}],"output":{"name":"clusterputsettingsrequest"}}],[11,"for_index","","",193,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"indicescloserequest"}}],[11,"new","","",194,{"inputs":[{"name":"b"}],"output":{"name":"indicesrefreshrequest"}}],[11,"for_index","","",194,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"indicesrefreshrequest"}}],[11,"new","","",195,{"inputs":[{"name":"b"}],"output":{"name":"clusterallocationexplainrequest"}}],[11,"new","","",196,{"inputs":[],"output":{"name":"clusterstatsrequest"}}],[11,"for_node_id","","",196,{"inputs":[{"name":"inodeid"}],"output":{"name":"clusterstatsrequest"}}],[11,"new","","",197,{"inputs":[],"output":{"name":"indicessegmentsrequest"}}],[11,"for_index","","",197,{"inputs":[{"name":"iindex"}],"output":{"name":"indicessegmentsrequest"}}],[11,"new","","",198,{"inputs":[],"output":{"name":"catallocationrequest"}}],[11,"for_node_id","","",198,{"inputs":[{"name":"inodeid"}],"output":{"name":"catallocationrequest"}}],[11,"for_alias","","",199,{"inputs":[{"name":"ialias"},{"name":"b"}],"output":{"name":"indicesrolloverrequest"}}],[11,"for_alias_new_index","","",199,{"inputs":[{"name":"ialias"},{"name":"inewindex"},{"name":"b"}],"output":{"name":"indicesrolloverrequest"}}],[11,"new","","",200,{"inputs":[{"name":"b"}],"output":{"name":"fieldstatsrequest"}}],[11,"for_index","","",200,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"fieldstatsrequest"}}],[11,"for_index","","",201,{"inputs":[{"name":"iindex"}],"output":{"name":"indicesdeleterequest"}}],[11,"new","","",202,{"inputs":[{"name":"b"}],"output":{"name":"clearscrollrequest"}}],[11,"for_scroll_id","","",202,{"inputs":[{"name":"iscrollid"},{"name":"b"}],"output":{"name":"clearscrollrequest"}}],[11,"for_index_ty","","",203,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"indexrequest"}}],[11,"for_index_ty_id","","",203,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"iid"},{"name":"b"}],"output":{"name":"indexrequest"}}],[11,"for_index","","",204,{"inputs":[{"name":"iindex"}],"output":{"name":"indicesgetrequest"}}],[11,"for_index_feature","","",204,{"inputs":[{"name":"iindex"},{"name":"ifeature"}],"output":{"name":"indicesgetrequest"}}],[11,"for_lang_id","","",205,{"inputs":[{"name":"ilang"},{"name":"iid"}],"output":{"name":"getscriptrequest"}}],[11,"new","","",206,{"inputs":[],"output":{"name":"cathealthrequest"}}],[11,"for_index_ty_id","","",207,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"iid"},{"name":"b"}],"output":{"name":"updaterequest"}}],[11,"new","","",208,{"inputs":[],"output":{"name":"cathelprequest"}}],[11,"for_name","","",209,{"inputs":[{"name":"iname"},{"name":"b"}],"output":{"name":"indicesputtemplaterequest"}}],[11,"new","","",210,{"inputs":[],"output":{"name":"catsnapshotsrequest"}}],[11,"for_repository","","",210,{"inputs":[{"name":"irepository"}],"output":{"name":"catsnapshotsrequest"}}],[11,"new","","",211,{"inputs":[{"name":"b"}],"output":{"name":"indicesforcemergerequest"}}],[11,"for_index","","",211,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"indicesforcemergerequest"}}],[11,"for_index_ty_id","","",212,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"iid"}],"output":{"name":"getrequest"}}],[11,"new","","",213,{"inputs":[{"name":"b"}],"output":{"name":"scrollrequest"}}],[11,"for_scroll_id","","",213,{"inputs":[{"name":"iscrollid"},{"name":"b"}],"output":{"name":"scrollrequest"}}],[11,"new","","",214,{"inputs":[],"output":{"name":"inforequest"}}],[11,"new","","",215,{"inputs":[{"name":"b"}],"output":{"name":"indicesvalidatequeryrequest"}}],[11,"for_index","","",215,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"indicesvalidatequeryrequest"}}],[11,"for_index_ty","","",215,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"indicesvalidatequeryrequest"}}],[11,"for_name","","",216,{"inputs":[{"name":"iname"}],"output":{"name":"indicesexiststemplaterequest"}}],[11,"new","","",217,{"inputs":[],"output":{"name":"cataliasesrequest"}}],[11,"for_name","","",217,{"inputs":[{"name":"iname"}],"output":{"name":"cataliasesrequest"}}],[11,"new","","",218,{"inputs":[],"output":{"name":"indicesstatsrequest"}}],[11,"for_index","","",218,{"inputs":[{"name":"iindex"}],"output":{"name":"indicesstatsrequest"}}],[11,"for_index_metric","","",218,{"inputs":[{"name":"iindex"},{"name":"imetric"}],"output":{"name":"indicesstatsrequest"}}],[11,"for_metric","","",218,{"inputs":[{"name":"imetric"}],"output":{"name":"indicesstatsrequest"}}],[11,"new","","",219,{"inputs":[],"output":{"name":"indicesrecoveryrequest"}}],[11,"for_index","","",219,{"inputs":[{"name":"iindex"}],"output":{"name":"indicesrecoveryrequest"}}],[11,"for_id","","",220,{"inputs":[{"name":"iid"}],"output":{"name":"gettemplaterequest"}}],[11,"new","","",221,{"inputs":[{"name":"b"}],"output":{"name":"msearchtemplaterequest"}}],[11,"for_index","","",221,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"msearchtemplaterequest"}}],[11,"for_index_ty","","",221,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"msearchtemplaterequest"}}],[11,"for_index_ty_id","","",222,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"iid"}],"output":{"name":"getsourcerequest"}}],[11,"response","elastic::client::responses","Get the response body from JSON.",280,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"new","","Create a new HTTP response from the given status code and body.",280,{"inputs":[{"name":"u16"},{"name":"r"}],"output":{"name":"httpresponse"}}],[11,"status","","Get the status code.",280,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"new","elastic::client::responses::parse","Create a new response that indicates where or not the body is successful or an `ApiError`.",321,{"inputs":[{"name":"bool"},{"name":"i"}],"output":{"name":"maybeokresponse"}}],[11,"ok","","Create a response where the body is successful.",321,{"inputs":[{"name":"i"}],"output":{"name":"maybeokresponse"}}],[11,"err","","Create a resposne where the body is an error.",321,{"inputs":[{"name":"i"}],"output":{"name":"maybeokresponse"}}],[11,"status","","Get the HTTP status code for the response.",322,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"body","","Buffer the response body into a `serde_json::Value` and return a `BufferedResponse`.",322,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"status","","Get the HTTP status code for the response.",323,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"mapping","elastic::types::prelude","Get the mapping for this type.",268,{"inputs":[],"output":{"name":"m"}}],[11,"data_type","","Get the type name for this mapping, like `date` or `string`.",267,{"inputs":[],"output":{"name":"str"}}],[11,"new","","Creates a new `Boolean` with the given mapping.",292,{"inputs":[{"name":"i"}],"output":{"name":"boolean"}}],[11,"remap","","Change the mapping of this boolean.",292,{"inputs":[{"name":"self"}],"output":{"name":"boolean"}}],[11,"new","","Creates a new `Date` from the given `chrono::DateTime<UTC>`.",290,{"inputs":[{"name":"datetime"}],"output":{"name":"date"}}],[11,"build","","Creates an `Date` from the given UTC primitives:",290,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"now","","Gets the current system time.",290,{"inputs":[],"output":{"name":"date"}}],[11,"parse","","Parse the date and time from a string.",290,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"format","","Format the date and time as a string.",290,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"remap","","Change the format/mapping of this date.",290,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"new","","Creates a new `GeoPoint` from the given coordinate.",281,{"inputs":[{"name":"i"}],"output":{"name":"geopoint"}}],[11,"build","","Creates an `GeoPoint` from the given `x` and `y` primitives:",281,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"geopoint"}}],[11,"remap","","Change the format/mapping of this geo point.",281,{"inputs":[{"name":"self"}],"output":{"name":"geopoint"}}],[11,"new","","Creates a new `GeoShape` from the given `Geometry`.",299,{"inputs":[{"name":"i"}],"output":{"name":"geoshape"}}],[11,"remap","","Change the mapping of this geo shape.",299,{"inputs":[{"name":"self"}],"output":{"name":"geoshape"}}],[11,"new","","Creates a new `Ip` with the given mapping.",300,{"inputs":[{"name":"i"}],"output":{"name":"ip"}}],[11,"remap","","Change the mapping of this ip.",300,{"inputs":[{"name":"self"}],"output":{"name":"ip"}}],[11,"new","","Creates a new number with the given mapping.",311,{"inputs":[{"name":"i"}],"output":{"name":"byte"}}],[11,"remap","","Change the mapping of this number.",311,{"inputs":[{"name":"self"}],"output":{"name":"byte"}}],[11,"new","","Creates a new number with the given mapping.",313,{"inputs":[{"name":"i"}],"output":{"name":"double"}}],[11,"remap","","Change the mapping of this number.",313,{"inputs":[{"name":"self"}],"output":{"name":"double"}}],[11,"new","","Creates a new number with the given mapping.",308,{"inputs":[{"name":"i"}],"output":{"name":"integer"}}],[11,"remap","","Change the mapping of this number.",308,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"new","","Creates a new number with the given mapping.",310,{"inputs":[{"name":"i"}],"output":{"name":"short"}}],[11,"remap","","Change the mapping of this number.",310,{"inputs":[{"name":"self"}],"output":{"name":"short"}}],[11,"new","","Creates a new number with the given mapping.",312,{"inputs":[{"name":"i"}],"output":{"name":"float"}}],[11,"remap","","Change the mapping of this number.",312,{"inputs":[{"name":"self"}],"output":{"name":"float"}}],[11,"new","","Creates a new number with the given mapping.",309,{"inputs":[{"name":"i"}],"output":{"name":"long"}}],[11,"remap","","Change the mapping of this number.",309,{"inputs":[{"name":"self"}],"output":{"name":"long"}}],[11,"new","","Creates a new `Keyword` with the given mapping.",315,{"inputs":[{"name":"i"}],"output":{"name":"keyword"}}],[11,"remap","","Change the mapping of this string.",315,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"new","","Creates a new `Text` with the given mapping.",317,{"inputs":[{"name":"i"}],"output":{"name":"text"}}],[11,"remap","","Change the mapping of this string.",317,{"inputs":[{"name":"self"}],"output":{"name":"text"}}]],"paths":[[4,"HttpError"],[4,"ApiError"],[4,"ResponseError"],[4,"ErrorKind"],[8,"ResultExt"],[3,"Error"],[3,"ExtendedValue"],[8,"Header"],[8,"HeaderFormat"],[3,"HeaderFormatter"],[4,"Range"],[4,"Vary"],[4,"CacheDirective"],[3,"Quality"],[4,"RangeUnit"],[4,"Preference"],[3,"Expires"],[3,"AccessControlMaxAge"],[3,"AccessControlRequestMethod"],[3,"Server"],[3,"Host"],[4,"ConnectionOption"],[3,"ContentEncoding"],[3,"QualityItem"],[3,"HttpDate"],[3,"UserAgent"],[3,"ContentType"],[4,"IfRange"],[4,"IfMatch"],[4,"DispositionType"],[4,"Encoding"],[3,"Allow"],[4,"IfNoneMatch"],[3,"AcceptCharset"],[3,"TransferEncoding"],[3,"ContentLength"],[4,"Charset"],[3,"EntityTag"],[3,"StrictTransportSecurity"],[3,"LastModified"],[3,"Basic"],[3,"IfUnmodifiedSince"],[4,"ByteRangeSpec"],[3,"Upgrade"],[3,"Authorization"],[8,"Scheme"],[4,"AccessControlAllowOrigin"],[3,"Location"],[3,"ContentLanguage"],[3,"CacheControl"],[3,"IfModifiedSince"],[3,"Origin"],[3,"Date"],[4,"ContentRangeSpec"],[3,"AcceptRanges"],[3,"AccessControlAllowHeaders"],[3,"From"],[3,"Prefer"],[3,"SetCookie"],[3,"Accept"],[4,"DispositionParam"],[3,"AcceptEncoding"],[4,"Expect"],[3,"Connection"],[3,"ContentRange"],[3,"Referer"],[3,"AccessControlAllowMethods"],[3,"PreferenceApplied"],[3,"AccessControlExposeHeaders"],[3,"AccessControlRequestHeaders"],[4,"ReferrerPolicy"],[3,"ContentDisposition"],[3,"Cookie"],[3,"Bearer"],[3,"AcceptLanguage"],[3,"ETag"],[3,"Protocol"],[4,"ProtocolName"],[4,"Pragma"],[3,"RequestParams"],[8,"IntoBody"],[3,"HttpRequest"],[4,"HttpMethod"],[3,"Fields"],[3,"Id"],[3,"Feature"],[3,"Metric"],[3,"NodeId"],[3,"Repository"],[3,"ScrollId"],[3,"ThreadPoolPatterns"],[3,"Lang"],[3,"Index"],[3,"Snapshot"],[3,"Target"],[3,"TaskId"],[3,"NewIndex"],[3,"Alias"],[3,"IndexMetric"],[3,"Type"],[3,"Name"],[3,"MgetRequest"],[3,"CatRepositoriesRequest"],[3,"IndicesGetTemplateRequest"],[3,"TasksListRequest"],[3,"IndicesGetMappingRequest"],[3,"CatThreadPoolRequest"],[3,"ClusterGetSettingsRequest"],[3,"CreateRequest"],[3,"IndicesPutAliasRequest"],[3,"SearchShardsRequest"],[3,"SearchTemplateRequest"],[3,"IndicesShrinkRequest"],[3,"CatPendingTasksRequest"],[3,"CatTemplatesRequest"],[3,"CatIndicesRequest"],[3,"CatShardsRequest"],[3,"TermvectorsRequest"],[3,"IndicesPutMappingRequest"],[3,"CatRecoveryRequest"],[3,"SnapshotRestoreRequest"],[3,"ReindexRethrottleRequest"],[3,"MtermvectorsRequest"],[3,"IndicesOpenRequest"],[3,"CatPluginsRequest"],[3,"NodesInfoRequest"],[3,"SnapshotDeleteRepositoryRequest"],[3,"ClusterRerouteRequest"],[3,"IndicesAnalyzeRequest"],[3,"IngestDeletePipelineRequest"],[3,"SnapshotCreateRequest"],[3,"IndicesDeleteAliasRequest"],[3,"DeleteScriptRequest"],[3,"IndicesShardStoresRequest"],[3,"TasksCancelRequest"],[3,"RenderSearchTemplateRequest"],[3,"PercolateRequest"],[3,"PutTemplateRequest"],[3,"IndicesGetFieldMappingRequest"],[3,"ReindexRequest"],[3,"IndicesClearCacheRequest"],[3,"CatCountRequest"],[3,"CountPercolateRequest"],[3,"IngestPutPipelineRequest"],[3,"SnapshotGetRequest"],[3,"IndicesUpdateAliasesRequest"],[3,"IndicesCreateRequest"],[3,"SnapshotVerifyRepositoryRequest"],[3,"CatSegmentsRequest"],[3,"SnapshotCreateRepositoryRequest"],[3,"ClusterPendingTasksRequest"],[3,"CatTasksRequest"],[3,"UpdateByQueryRequest"],[3,"SearchRequest"],[3,"IndicesGetUpgradeRequest"],[3,"SnapshotDeleteRequest"],[3,"IndicesExistsTypeRequest"],[3,"NodesStatsRequest"],[3,"CatNodesRequest"],[3,"IndicesExistsRequest"],[3,"SimpleSearchRequest"],[3,"IndicesUpgradeRequest"],[3,"DeleteRequest"],[3,"IndicesExistsAliasRequest"],[3,"CatMasterRequest"],[3,"CountRequest"],[3,"SnapshotStatusRequest"],[3,"DeleteByQueryRequest"],[3,"IndicesGetAliasRequest"],[3,"IngestGetPipelineRequest"],[3,"BulkRequest"],[3,"MpercolateRequest"],[3,"SuggestRequest"],[3,"ClusterHealthRequest"],[3,"TasksGetRequest"],[3,"IndicesFlushRequest"],[3,"CatFielddataRequest"],[3,"ClusterStateRequest"],[3,"IndicesFlushSyncedRequest"],[3,"NodesHotThreadsRequest"],[3,"IndicesPutSettingsRequest"],[3,"ExplainRequest"],[3,"DeleteTemplateRequest"],[3,"PutScriptRequest"],[3,"CatNodeattrsRequest"],[3,"ExistsRequest"],[3,"PingRequest"],[3,"IndicesDeleteTemplateRequest"],[3,"SnapshotGetRepositoryRequest"],[3,"MsearchRequest"],[3,"IngestSimulateRequest"],[3,"IndicesGetSettingsRequest"],[3,"ClusterPutSettingsRequest"],[3,"IndicesCloseRequest"],[3,"IndicesRefreshRequest"],[3,"ClusterAllocationExplainRequest"],[3,"ClusterStatsRequest"],[3,"IndicesSegmentsRequest"],[3,"CatAllocationRequest"],[3,"IndicesRolloverRequest"],[3,"FieldStatsRequest"],[3,"IndicesDeleteRequest"],[3,"ClearScrollRequest"],[3,"IndexRequest"],[3,"IndicesGetRequest"],[3,"GetScriptRequest"],[3,"CatHealthRequest"],[3,"UpdateRequest"],[3,"CatHelpRequest"],[3,"IndicesPutTemplateRequest"],[3,"CatSnapshotsRequest"],[3,"IndicesForcemergeRequest"],[3,"GetRequest"],[3,"ScrollRequest"],[3,"InfoRequest"],[3,"IndicesValidateQueryRequest"],[3,"IndicesExistsTemplateRequest"],[3,"CatAliasesRequest"],[3,"IndicesStatsRequest"],[3,"IndicesRecoveryRequest"],[3,"GetTemplateRequest"],[3,"MsearchTemplateRequest"],[3,"GetSourceRequest"],[8,"TryForDoc"],[8,"TryForMapping"],[3,"Hit"],[3,"Hits"],[3,"Shards"],[8,"FromResponse"],[4,"MaybeBufferedResponse"],[3,"Client"],[3,"RequestBuilder"],[3,"ResponseBuilder"],[8,"DocumentType"],[8,"DocumentMapping"],[8,"PropertiesMapping"],[4,"Dynamic"],[8,"BooleanMapping"],[8,"DateMapping"],[8,"Timelike"],[8,"DateFormat"],[8,"Datelike"],[8,"GeoPointMapping"],[8,"GeoPointFormat"],[8,"GeoShapeMapping"],[4,"Tree"],[4,"Strategy"],[4,"Orientation"],[4,"DistanceUnit"],[3,"Distance"],[8,"IpMapping"],[8,"IntegerMapping"],[8,"LongMapping"],[8,"ShortMapping"],[8,"ByteMapping"],[8,"FloatMapping"],[8,"DoubleMapping"],[8,"KeywordMapping"],[3,"KeywordFieldMapping"],[8,"TextMapping"],[4,"TermVector"],[3,"FieldDataFrequencyFilter"],[3,"TextFieldMapping"],[4,"IndexOptions"],[4,"StringField"],[3,"ElasticTokenCountFieldMapping"],[3,"ElasticCompletionFieldMapping"],[8,"FieldMapping"],[8,"FieldType"],[4,"IndexAnalysis"],[8,"SerializeField"],[3,"JsonError"],[3,"Headers"],[3,"HeaderView"],[3,"AccessControlAllowCredentials"],[3,"HTTP_VALUE"],[3,"HeadersItems"],[3,"Url"],[3,"Aggregations"],[3,"AggregationIterator"],[3,"HttpResponse"],[3,"GeoPoint"],[3,"DefaultMapping"],[3,"WrappedMapping"],[3,"DefaultDateMapping"],[3,"ParseError"],[3,"ChronoFormat"],[3,"BasicDateTimeNoMillis"],[3,"BasicDateTime"],[3,"EpochMillis"],[3,"Date"],[3,"DefaultBooleanMapping"],[3,"Boolean"],[3,"DefaultGeoPointMapping"],[3,"GeoPointObject"],[3,"GeoPointString"],[3,"GeoPointHash"],[3,"GeoPointArray"],[3,"DefaultGeoShapeMapping"],[3,"GeoShape"],[3,"Ip"],[3,"DefaultIpMapping"],[3,"DefaultIntegerMapping"],[3,"DefaultLongMapping"],[3,"DefaultShortMapping"],[3,"DefaultByteMapping"],[3,"DefaultFloatMapping"],[3,"DefaultDoubleMapping"],[3,"Integer"],[3,"Long"],[3,"Short"],[3,"Byte"],[3,"Float"],[3,"Double"],[3,"DefaultKeywordMapping"],[3,"Keyword"],[3,"DefaultTextMapping"],[3,"Text"],[3,"DefaultStringMapping"],[3,"Field"],[3,"Document"],[3,"MaybeOkResponse"],[3,"UnbufferedResponse"],[3,"BufferedResponse"]]};
searchIndex["elastic_requests"] = {"doc":"Elasticsearch Request Types","items":[[3,"Url","elastic_requests","A wrapper around an owned or borrowed url.",null,null],[3,"HttpRequest","","A general request type that all endpoints can be converted into.",null,null],[12,"url","","",0,null],[12,"method","","",0,null],[12,"body","","",0,null],[4,"HttpMethod","","A standard HTTP verb.",null,null],[13,"Head","","",1,null],[13,"Get","","",1,null],[13,"Post","","",1,null],[13,"Put","","",1,null],[13,"Delete","","",1,null],[13,"Patch","","",1,null],[5,"empty_body","","A convenience method for a default, empty body. This method doesn't allocate.",null,{"inputs":[],"output":{"name":"defaultbody"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"url"}}],[11,"from","","",2,{"inputs":[{"name":"string"}],"output":{"name":"url"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"httprequest"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"httpmethod"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"httpmethod"}}],[0,"params","","Common url params like `Id` and `Index`.",null,null],[3,"Alias","elastic_requests::params","",null,null],[12,"0","","",3,null],[3,"Feature","","",null,null],[12,"0","","",4,null],[3,"Fields","","",null,null],[12,"0","","",5,null],[3,"Id","","",null,null],[12,"0","","",6,null],[3,"Index","","",null,null],[12,"0","","",7,null],[3,"IndexMetric","","",null,null],[12,"0","","",8,null],[3,"Lang","","",null,null],[12,"0","","",9,null],[3,"Metric","","",null,null],[12,"0","","",10,null],[3,"Name","","",null,null],[12,"0","","",11,null],[3,"NewIndex","","",null,null],[12,"0","","",12,null],[3,"NodeId","","",null,null],[12,"0","","",13,null],[3,"Repository","","",null,null],[12,"0","","",14,null],[3,"ScrollId","","",null,null],[12,"0","","",15,null],[3,"Snapshot","","",null,null],[12,"0","","",16,null],[3,"Target","","",null,null],[12,"0","","",17,null],[3,"TaskId","","",null,null],[12,"0","","",18,null],[3,"ThreadPoolPatterns","","",null,null],[12,"0","","",19,null],[3,"Type","","",null,null],[12,"0","","",20,null],[0,"endpoints","elastic_requests","REST API endpoints.",null,null],[3,"IndicesCloseRequest","elastic_requests::endpoints","",null,null],[12,"url","","",21,null],[12,"body","","",21,null],[3,"DeleteScriptRequest","","",null,null],[12,"url","","",22,null],[3,"TermvectorsRequest","","",null,null],[12,"url","","",23,null],[12,"body","","",23,null],[3,"FieldStatsRequest","","",null,null],[12,"url","","",24,null],[12,"body","","",24,null],[3,"CatThreadPoolRequest","","",null,null],[12,"url","","",25,null],[3,"SnapshotDeleteRequest","","",null,null],[12,"url","","",26,null],[3,"IndicesGetSettingsRequest","","",null,null],[12,"url","","",27,null],[3,"CreateRequest","","",null,null],[12,"url","","",28,null],[12,"body","","",28,null],[3,"SnapshotDeleteRepositoryRequest","","",null,null],[12,"url","","",29,null],[3,"ClusterAllocationExplainRequest","","",null,null],[12,"url","","",30,null],[12,"body","","",30,null],[3,"IndicesPutTemplateRequest","","",null,null],[12,"url","","",31,null],[12,"body","","",31,null],[3,"IndicesGetTemplateRequest","","",null,null],[12,"url","","",32,null],[3,"ClusterStateRequest","","",null,null],[12,"url","","",33,null],[3,"MsearchTemplateRequest","","",null,null],[12,"url","","",34,null],[12,"body","","",34,null],[3,"BulkRequest","","",null,null],[12,"url","","",35,null],[12,"body","","",35,null],[3,"ExplainRequest","","",null,null],[12,"url","","",36,null],[12,"body","","",36,null],[3,"SuggestRequest","","",null,null],[12,"url","","",37,null],[12,"body","","",37,null],[3,"SnapshotGetRepositoryRequest","","",null,null],[12,"url","","",38,null],[3,"RenderSearchTemplateRequest","","",null,null],[12,"url","","",39,null],[12,"body","","",39,null],[3,"IndicesStatsRequest","","",null,null],[12,"url","","",40,null],[3,"CatRepositoriesRequest","","",null,null],[12,"url","","",41,null],[3,"IndicesForcemergeRequest","","",null,null],[12,"url","","",42,null],[12,"body","","",42,null],[3,"PingRequest","","",null,null],[12,"url","","",43,null],[3,"TasksGetRequest","","",null,null],[12,"url","","",44,null],[3,"IndicesExistsRequest","","",null,null],[12,"url","","",45,null],[3,"IndicesFlushSyncedRequest","","",null,null],[12,"url","","",46,null],[12,"body","","",46,null],[3,"MsearchRequest","","",null,null],[12,"url","","",47,null],[12,"body","","",47,null],[3,"InfoRequest","","",null,null],[12,"url","","",48,null],[3,"SearchTemplateRequest","","",null,null],[12,"url","","",49,null],[12,"body","","",49,null],[3,"IndicesDeleteRequest","","",null,null],[12,"url","","",50,null],[3,"DeleteByQueryRequest","","",null,null],[12,"url","","",51,null],[12,"body","","",51,null],[3,"DeleteTemplateRequest","","",null,null],[12,"url","","",52,null],[3,"IndicesCreateRequest","","",null,null],[12,"url","","",53,null],[12,"body","","",53,null],[3,"PercolateRequest","","",null,null],[12,"url","","",54,null],[12,"body","","",54,null],[3,"SearchRequest","","",null,null],[12,"url","","",55,null],[12,"body","","",55,null],[3,"CatNodeattrsRequest","","",null,null],[12,"url","","",56,null],[3,"SnapshotVerifyRepositoryRequest","","",null,null],[12,"url","","",57,null],[12,"body","","",57,null],[3,"CountRequest","","",null,null],[12,"url","","",58,null],[12,"body","","",58,null],[3,"CatAllocationRequest","","",null,null],[12,"url","","",59,null],[3,"IndicesFlushRequest","","",null,null],[12,"url","","",60,null],[12,"body","","",60,null],[3,"IndicesRefreshRequest","","",null,null],[12,"url","","",61,null],[12,"body","","",61,null],[3,"CatHelpRequest","","",null,null],[12,"url","","",62,null],[3,"SearchShardsRequest","","",null,null],[12,"url","","",63,null],[12,"body","","",63,null],[3,"ClusterHealthRequest","","",null,null],[12,"url","","",64,null],[3,"IndicesExistsAliasRequest","","",null,null],[12,"url","","",65,null],[3,"IndicesGetFieldMappingRequest","","",null,null],[12,"url","","",66,null],[3,"IngestPutPipelineRequest","","",null,null],[12,"url","","",67,null],[12,"body","","",67,null],[3,"ClusterPendingTasksRequest","","",null,null],[12,"url","","",68,null],[3,"IngestSimulateRequest","","",null,null],[12,"url","","",69,null],[12,"body","","",69,null],[3,"IndicesGetAliasRequest","","",null,null],[12,"url","","",70,null],[3,"GetScriptRequest","","",null,null],[12,"url","","",71,null],[3,"IndicesRecoveryRequest","","",null,null],[12,"url","","",72,null],[3,"IngestDeletePipelineRequest","","",null,null],[12,"url","","",73,null],[3,"TasksCancelRequest","","",null,null],[12,"url","","",74,null],[12,"body","","",74,null],[3,"IndicesClearCacheRequest","","",null,null],[12,"url","","",75,null],[12,"body","","",75,null],[3,"DeleteRequest","","",null,null],[12,"url","","",76,null],[3,"IndicesPutMappingRequest","","",null,null],[12,"url","","",77,null],[12,"body","","",77,null],[3,"CatAliasesRequest","","",null,null],[12,"url","","",78,null],[3,"ClusterStatsRequest","","",null,null],[12,"url","","",79,null],[3,"IndicesValidateQueryRequest","","",null,null],[12,"url","","",80,null],[12,"body","","",80,null],[3,"CatPendingTasksRequest","","",null,null],[12,"url","","",81,null],[3,"ClearScrollRequest","","",null,null],[12,"url","","",82,null],[12,"body","","",82,null],[3,"CatShardsRequest","","",null,null],[12,"url","","",83,null],[3,"IndicesShardStoresRequest","","",null,null],[12,"url","","",84,null],[3,"IndicesUpdateAliasesRequest","","",null,null],[12,"url","","",85,null],[12,"body","","",85,null],[3,"CatSegmentsRequest","","",null,null],[12,"url","","",86,null],[3,"MpercolateRequest","","",null,null],[12,"url","","",87,null],[12,"body","","",87,null],[3,"IndicesOpenRequest","","",null,null],[12,"url","","",88,null],[12,"body","","",88,null],[3,"GetRequest","","",null,null],[12,"url","","",89,null],[3,"UpdateByQueryRequest","","",null,null],[12,"url","","",90,null],[12,"body","","",90,null],[3,"MtermvectorsRequest","","",null,null],[12,"url","","",91,null],[12,"body","","",91,null],[3,"CatRecoveryRequest","","",null,null],[12,"url","","",92,null],[3,"SnapshotRestoreRequest","","",null,null],[12,"url","","",93,null],[12,"body","","",93,null],[3,"ReindexRequest","","",null,null],[12,"url","","",94,null],[12,"body","","",94,null],[3,"CatHealthRequest","","",null,null],[12,"url","","",95,null],[3,"CatCountRequest","","",null,null],[12,"url","","",96,null],[3,"CatSnapshotsRequest","","",null,null],[12,"url","","",97,null],[3,"IndicesGetMappingRequest","","",null,null],[12,"url","","",98,null],[3,"SnapshotGetRequest","","",null,null],[12,"url","","",99,null],[3,"CatNodesRequest","","",null,null],[12,"url","","",100,null],[3,"ExistsRequest","","",null,null],[12,"url","","",101,null],[3,"ClusterRerouteRequest","","",null,null],[12,"url","","",102,null],[12,"body","","",102,null],[3,"NodesHotThreadsRequest","","",null,null],[12,"url","","",103,null],[3,"NodesStatsRequest","","",null,null],[12,"url","","",104,null],[3,"IngestGetPipelineRequest","","",null,null],[12,"url","","",105,null],[3,"PutTemplateRequest","","",null,null],[12,"url","","",106,null],[12,"body","","",106,null],[3,"GetSourceRequest","","",null,null],[12,"url","","",107,null],[3,"SnapshotCreateRequest","","",null,null],[12,"url","","",108,null],[12,"body","","",108,null],[3,"ScrollRequest","","",null,null],[12,"url","","",109,null],[12,"body","","",109,null],[3,"SnapshotStatusRequest","","",null,null],[12,"url","","",110,null],[3,"MgetRequest","","",null,null],[12,"url","","",111,null],[12,"body","","",111,null],[3,"IndicesExistsTemplateRequest","","",null,null],[12,"url","","",112,null],[3,"IndicesGetUpgradeRequest","","",null,null],[12,"url","","",113,null],[3,"PutScriptRequest","","",null,null],[12,"url","","",114,null],[12,"body","","",114,null],[3,"GetTemplateRequest","","",null,null],[12,"url","","",115,null],[3,"IndicesDeleteTemplateRequest","","",null,null],[12,"url","","",116,null],[3,"IndexRequest","","",null,null],[12,"url","","",117,null],[12,"body","","",117,null],[3,"IndicesPutSettingsRequest","","",null,null],[12,"url","","",118,null],[12,"body","","",118,null],[3,"CatTemplatesRequest","","",null,null],[12,"url","","",119,null],[3,"CatIndicesRequest","","",null,null],[12,"url","","",120,null],[3,"ClusterPutSettingsRequest","","",null,null],[12,"url","","",121,null],[12,"body","","",121,null],[3,"UpdateRequest","","",null,null],[12,"url","","",122,null],[12,"body","","",122,null],[3,"IndicesPutAliasRequest","","",null,null],[12,"url","","",123,null],[12,"body","","",123,null],[3,"CatPluginsRequest","","",null,null],[12,"url","","",124,null],[3,"CountPercolateRequest","","",null,null],[12,"url","","",125,null],[12,"body","","",125,null],[3,"IndicesUpgradeRequest","","",null,null],[12,"url","","",126,null],[12,"body","","",126,null],[3,"IndicesDeleteAliasRequest","","",null,null],[12,"url","","",127,null],[3,"CatTasksRequest","","",null,null],[12,"url","","",128,null],[3,"IndicesRolloverRequest","","",null,null],[12,"url","","",129,null],[12,"body","","",129,null],[3,"ReindexRethrottleRequest","","",null,null],[12,"url","","",130,null],[12,"body","","",130,null],[3,"SnapshotCreateRepositoryRequest","","",null,null],[12,"url","","",131,null],[12,"body","","",131,null],[3,"IndicesGetRequest","","",null,null],[12,"url","","",132,null],[3,"IndicesAnalyzeRequest","","",null,null],[12,"url","","",133,null],[12,"body","","",133,null],[3,"CatFielddataRequest","","",null,null],[12,"url","","",134,null],[3,"IndicesSegmentsRequest","","",null,null],[12,"url","","",135,null],[3,"IndicesShrinkRequest","","",null,null],[12,"url","","",136,null],[12,"body","","",136,null],[3,"TasksListRequest","","",null,null],[12,"url","","",137,null],[3,"CatMasterRequest","","",null,null],[12,"url","","",138,null],[3,"IndicesExistsTypeRequest","","",null,null],[12,"url","","",139,null],[3,"ClusterGetSettingsRequest","","",null,null],[12,"url","","",140,null],[3,"NodesInfoRequest","","",null,null],[12,"url","","",141,null],[3,"SimpleSearchRequest","","",null,null],[12,"url","","",142,null],[6,"DefaultBody","elastic_requests","A default body type.",null,null],[11,"fmt","elastic_requests::endpoints","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"indicescloserequest"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"indicescloserequest"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"indicescloserequest"}}],[11,"for_index","","",21,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",21,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"deletescriptrequest"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"deletescriptrequest"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"deletescriptrequest"}}],[11,"for_lang_id","","",22,{"inputs":[{"name":"ilang"},{"name":"iid"}],"output":{"name":"self"}}],[11,"into","","",22,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"termvectorsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"termvectorsrequest"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"termvectorsrequest"}}],[11,"for_index_ty","","",23,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"self"}}],[11,"for_index_ty_id","","",23,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"iid"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",23,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"fieldstatsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"fieldstatsrequest"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"fieldstatsrequest"}}],[11,"new","","",24,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_index","","",24,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",24,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"catthreadpoolrequest"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"catthreadpoolrequest"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"catthreadpoolrequest"}}],[11,"new","","",25,{"inputs":[],"output":{"name":"self"}}],[11,"for_thread_pool_patterns","","",25,{"inputs":[{"name":"ithreadpoolpatterns"}],"output":{"name":"self"}}],[11,"into","","",25,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"snapshotdeleterequest"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"snapshotdeleterequest"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"snapshotdeleterequest"}}],[11,"for_repository_snapshot","","",26,{"inputs":[{"name":"irepository"},{"name":"isnapshot"}],"output":{"name":"self"}}],[11,"into","","",26,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"indicesgetsettingsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"indicesgetsettingsrequest"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"indicesgetsettingsrequest"}}],[11,"new","","",27,{"inputs":[],"output":{"name":"self"}}],[11,"for_index","","",27,{"inputs":[{"name":"iindex"}],"output":{"name":"self"}}],[11,"for_index_name","","",27,{"inputs":[{"name":"iindex"},{"name":"iname"}],"output":{"name":"self"}}],[11,"for_name","","",27,{"inputs":[{"name":"iname"}],"output":{"name":"self"}}],[11,"into","","",27,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"createrequest"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"createrequest"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"createrequest"}}],[11,"for_index_ty_id","","",28,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"iid"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",28,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"snapshotdeleterepositoryrequest"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"snapshotdeleterepositoryrequest"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"snapshotdeleterepositoryrequest"}}],[11,"for_repository","","",29,{"inputs":[{"name":"irepository"}],"output":{"name":"self"}}],[11,"into","","",29,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"clusterallocationexplainrequest"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"clusterallocationexplainrequest"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"clusterallocationexplainrequest"}}],[11,"new","","",30,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",30,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"indicesputtemplaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"indicesputtemplaterequest"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"indicesputtemplaterequest"}}],[11,"for_name","","",31,{"inputs":[{"name":"iname"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",31,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"indicesgettemplaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"indicesgettemplaterequest"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"indicesgettemplaterequest"}}],[11,"new","","",32,{"inputs":[],"output":{"name":"self"}}],[11,"for_name","","",32,{"inputs":[{"name":"iname"}],"output":{"name":"self"}}],[11,"into","","",32,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"clusterstaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"clusterstaterequest"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"clusterstaterequest"}}],[11,"new","","",33,{"inputs":[],"output":{"name":"self"}}],[11,"for_metric","","",33,{"inputs":[{"name":"imetric"}],"output":{"name":"self"}}],[11,"for_metric_index","","",33,{"inputs":[{"name":"imetric"},{"name":"iindex"}],"output":{"name":"self"}}],[11,"into","","",33,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"msearchtemplaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"msearchtemplaterequest"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"msearchtemplaterequest"}}],[11,"new","","",34,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_index","","",34,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"for_index_ty","","",34,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",34,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"bulkrequest"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"bulkrequest"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bulkrequest"}}],[11,"new","","",35,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_index","","",35,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"for_index_ty","","",35,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",35,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"explainrequest"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"explainrequest"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"explainrequest"}}],[11,"for_index_ty_id","","",36,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"iid"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",36,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"suggestrequest"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"suggestrequest"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"suggestrequest"}}],[11,"new","","",37,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_index","","",37,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",37,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"snapshotgetrepositoryrequest"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"snapshotgetrepositoryrequest"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"snapshotgetrepositoryrequest"}}],[11,"new","","",38,{"inputs":[],"output":{"name":"self"}}],[11,"for_repository","","",38,{"inputs":[{"name":"irepository"}],"output":{"name":"self"}}],[11,"into","","",38,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"rendersearchtemplaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"rendersearchtemplaterequest"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"rendersearchtemplaterequest"}}],[11,"new","","",39,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_id","","",39,{"inputs":[{"name":"iid"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",39,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"indicesstatsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"indicesstatsrequest"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"indicesstatsrequest"}}],[11,"new","","",40,{"inputs":[],"output":{"name":"self"}}],[11,"for_index","","",40,{"inputs":[{"name":"iindex"}],"output":{"name":"self"}}],[11,"for_index_metric","","",40,{"inputs":[{"name":"iindex"},{"name":"imetric"}],"output":{"name":"self"}}],[11,"for_metric","","",40,{"inputs":[{"name":"imetric"}],"output":{"name":"self"}}],[11,"into","","",40,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"catrepositoriesrequest"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"catrepositoriesrequest"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"catrepositoriesrequest"}}],[11,"new","","",41,{"inputs":[],"output":{"name":"self"}}],[11,"into","","",41,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"indicesforcemergerequest"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"indicesforcemergerequest"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"indicesforcemergerequest"}}],[11,"new","","",42,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_index","","",42,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",42,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"pingrequest"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"pingrequest"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"pingrequest"}}],[11,"new","","",43,{"inputs":[],"output":{"name":"self"}}],[11,"into","","",43,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"tasksgetrequest"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"tasksgetrequest"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"tasksgetrequest"}}],[11,"for_task_id","","",44,{"inputs":[{"name":"itaskid"}],"output":{"name":"self"}}],[11,"into","","",44,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"indicesexistsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"indicesexistsrequest"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"indicesexistsrequest"}}],[11,"for_index","","",45,{"inputs":[{"name":"iindex"}],"output":{"name":"self"}}],[11,"into","","",45,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"indicesflushsyncedrequest"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"indicesflushsyncedrequest"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"indicesflushsyncedrequest"}}],[11,"new","","",46,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_index","","",46,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",46,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"msearchrequest"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"msearchrequest"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"msearchrequest"}}],[11,"new","","",47,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_index","","",47,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"for_index_ty","","",47,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",47,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"inforequest"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"inforequest"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"inforequest"}}],[11,"new","","",48,{"inputs":[],"output":{"name":"self"}}],[11,"into","","",48,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"searchtemplaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"searchtemplaterequest"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"searchtemplaterequest"}}],[11,"new","","",49,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_index","","",49,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"for_index_ty","","",49,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",49,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"indicesdeleterequest"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"indicesdeleterequest"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"indicesdeleterequest"}}],[11,"for_index","","",50,{"inputs":[{"name":"iindex"}],"output":{"name":"self"}}],[11,"into","","",50,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"deletebyqueryrequest"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"deletebyqueryrequest"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"deletebyqueryrequest"}}],[11,"for_index","","",51,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"for_index_ty","","",51,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",51,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"deletetemplaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"deletetemplaterequest"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"deletetemplaterequest"}}],[11,"for_id","","",52,{"inputs":[{"name":"iid"}],"output":{"name":"self"}}],[11,"into","","",52,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"indicescreaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"indicescreaterequest"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"indicescreaterequest"}}],[11,"for_index","","",53,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",53,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"percolaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"percolaterequest"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"percolaterequest"}}],[11,"for_index_ty","","",54,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"self"}}],[11,"for_index_ty_id","","",54,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"iid"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",54,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"searchrequest"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"searchrequest"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"searchrequest"}}],[11,"new","","",55,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_index","","",55,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"for_index_ty","","",55,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",55,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"catnodeattrsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"catnodeattrsrequest"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"catnodeattrsrequest"}}],[11,"new","","",56,{"inputs":[],"output":{"name":"self"}}],[11,"into","","",56,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"snapshotverifyrepositoryrequest"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"snapshotverifyrepositoryrequest"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"snapshotverifyrepositoryrequest"}}],[11,"for_repository","","",57,{"inputs":[{"name":"irepository"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",57,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"countrequest"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"countrequest"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"countrequest"}}],[11,"new","","",58,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_index","","",58,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"for_index_ty","","",58,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",58,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"catallocationrequest"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"catallocationrequest"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"catallocationrequest"}}],[11,"new","","",59,{"inputs":[],"output":{"name":"self"}}],[11,"for_node_id","","",59,{"inputs":[{"name":"inodeid"}],"output":{"name":"self"}}],[11,"into","","",59,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"indicesflushrequest"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"indicesflushrequest"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"indicesflushrequest"}}],[11,"new","","",60,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_index","","",60,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",60,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"indicesrefreshrequest"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"indicesrefreshrequest"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"indicesrefreshrequest"}}],[11,"new","","",61,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_index","","",61,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",61,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"cathelprequest"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"cathelprequest"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"cathelprequest"}}],[11,"new","","",62,{"inputs":[],"output":{"name":"self"}}],[11,"into","","",62,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"searchshardsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"searchshardsrequest"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"searchshardsrequest"}}],[11,"new","","",63,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_index","","",63,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",63,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"clusterhealthrequest"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"clusterhealthrequest"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"clusterhealthrequest"}}],[11,"new","","",64,{"inputs":[],"output":{"name":"self"}}],[11,"for_index","","",64,{"inputs":[{"name":"iindex"}],"output":{"name":"self"}}],[11,"into","","",64,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"indicesexistsaliasrequest"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"indicesexistsaliasrequest"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"indicesexistsaliasrequest"}}],[11,"for_index","","",65,{"inputs":[{"name":"iindex"}],"output":{"name":"self"}}],[11,"for_index_name","","",65,{"inputs":[{"name":"iindex"},{"name":"iname"}],"output":{"name":"self"}}],[11,"for_name","","",65,{"inputs":[{"name":"iname"}],"output":{"name":"self"}}],[11,"into","","",65,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"indicesgetfieldmappingrequest"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"indicesgetfieldmappingrequest"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"indicesgetfieldmappingrequest"}}],[11,"for_fields","","",66,{"inputs":[{"name":"ifields"}],"output":{"name":"self"}}],[11,"for_index_fields","","",66,{"inputs":[{"name":"iindex"},{"name":"ifields"}],"output":{"name":"self"}}],[11,"for_index_ty_fields","","",66,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"ifields"}],"output":{"name":"self"}}],[11,"for_ty_fields","","",66,{"inputs":[{"name":"itype"},{"name":"ifields"}],"output":{"name":"self"}}],[11,"into","","",66,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"ingestputpipelinerequest"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"ingestputpipelinerequest"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"ingestputpipelinerequest"}}],[11,"for_id","","",67,{"inputs":[{"name":"iid"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",67,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"clusterpendingtasksrequest"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"clusterpendingtasksrequest"}],"output":{"name":"bool"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"clusterpendingtasksrequest"}}],[11,"new","","",68,{"inputs":[],"output":{"name":"self"}}],[11,"into","","",68,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"ingestsimulaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"ingestsimulaterequest"}],"output":{"name":"bool"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"ingestsimulaterequest"}}],[11,"new","","",69,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_id","","",69,{"inputs":[{"name":"iid"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",69,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"indicesgetaliasrequest"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"indicesgetaliasrequest"}],"output":{"name":"bool"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"indicesgetaliasrequest"}}],[11,"new","","",70,{"inputs":[],"output":{"name":"self"}}],[11,"for_index","","",70,{"inputs":[{"name":"iindex"}],"output":{"name":"self"}}],[11,"for_index_name","","",70,{"inputs":[{"name":"iindex"},{"name":"iname"}],"output":{"name":"self"}}],[11,"for_name","","",70,{"inputs":[{"name":"iname"}],"output":{"name":"self"}}],[11,"into","","",70,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"getscriptrequest"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"getscriptrequest"}],"output":{"name":"bool"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"getscriptrequest"}}],[11,"for_lang_id","","",71,{"inputs":[{"name":"ilang"},{"name":"iid"}],"output":{"name":"self"}}],[11,"into","","",71,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"indicesrecoveryrequest"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"indicesrecoveryrequest"}],"output":{"name":"bool"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"indicesrecoveryrequest"}}],[11,"new","","",72,{"inputs":[],"output":{"name":"self"}}],[11,"for_index","","",72,{"inputs":[{"name":"iindex"}],"output":{"name":"self"}}],[11,"into","","",72,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"ingestdeletepipelinerequest"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"ingestdeletepipelinerequest"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"ingestdeletepipelinerequest"}}],[11,"for_id","","",73,{"inputs":[{"name":"iid"}],"output":{"name":"self"}}],[11,"into","","",73,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"taskscancelrequest"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"taskscancelrequest"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"taskscancelrequest"}}],[11,"new","","",74,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_task_id","","",74,{"inputs":[{"name":"itaskid"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",74,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"indicesclearcacherequest"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"indicesclearcacherequest"}],"output":{"name":"bool"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"indicesclearcacherequest"}}],[11,"new","","",75,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_index","","",75,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",75,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"deleterequest"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"deleterequest"}],"output":{"name":"bool"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"deleterequest"}}],[11,"for_index_ty_id","","",76,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"iid"}],"output":{"name":"self"}}],[11,"into","","",76,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"indicesputmappingrequest"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"indicesputmappingrequest"}],"output":{"name":"bool"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"indicesputmappingrequest"}}],[11,"for_index_ty","","",77,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"self"}}],[11,"for_ty","","",77,{"inputs":[{"name":"itype"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",77,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"cataliasesrequest"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"cataliasesrequest"}],"output":{"name":"bool"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"cataliasesrequest"}}],[11,"new","","",78,{"inputs":[],"output":{"name":"self"}}],[11,"for_name","","",78,{"inputs":[{"name":"iname"}],"output":{"name":"self"}}],[11,"into","","",78,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"clusterstatsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"clusterstatsrequest"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"clusterstatsrequest"}}],[11,"new","","",79,{"inputs":[],"output":{"name":"self"}}],[11,"for_node_id","","",79,{"inputs":[{"name":"inodeid"}],"output":{"name":"self"}}],[11,"into","","",79,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"indicesvalidatequeryrequest"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"indicesvalidatequeryrequest"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"indicesvalidatequeryrequest"}}],[11,"new","","",80,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_index","","",80,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"for_index_ty","","",80,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",80,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"catpendingtasksrequest"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"catpendingtasksrequest"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"catpendingtasksrequest"}}],[11,"new","","",81,{"inputs":[],"output":{"name":"self"}}],[11,"into","","",81,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"clearscrollrequest"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"clearscrollrequest"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"clearscrollrequest"}}],[11,"new","","",82,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_scroll_id","","",82,{"inputs":[{"name":"iscrollid"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",82,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"catshardsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"catshardsrequest"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"catshardsrequest"}}],[11,"new","","",83,{"inputs":[],"output":{"name":"self"}}],[11,"for_index","","",83,{"inputs":[{"name":"iindex"}],"output":{"name":"self"}}],[11,"into","","",83,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"indicesshardstoresrequest"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"indicesshardstoresrequest"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"indicesshardstoresrequest"}}],[11,"new","","",84,{"inputs":[],"output":{"name":"self"}}],[11,"for_index","","",84,{"inputs":[{"name":"iindex"}],"output":{"name":"self"}}],[11,"into","","",84,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"indicesupdatealiasesrequest"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"indicesupdatealiasesrequest"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"indicesupdatealiasesrequest"}}],[11,"new","","",85,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",85,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"catsegmentsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"catsegmentsrequest"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"catsegmentsrequest"}}],[11,"new","","",86,{"inputs":[],"output":{"name":"self"}}],[11,"for_index","","",86,{"inputs":[{"name":"iindex"}],"output":{"name":"self"}}],[11,"into","","",86,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"mpercolaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"mpercolaterequest"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"mpercolaterequest"}}],[11,"new","","",87,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_index","","",87,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"for_index_ty","","",87,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",87,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"indicesopenrequest"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"indicesopenrequest"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"indicesopenrequest"}}],[11,"for_index","","",88,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",88,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"getrequest"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"getrequest"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"getrequest"}}],[11,"for_index_ty_id","","",89,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"iid"}],"output":{"name":"self"}}],[11,"into","","",89,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"updatebyqueryrequest"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"updatebyqueryrequest"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"updatebyqueryrequest"}}],[11,"for_index","","",90,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"for_index_ty","","",90,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",90,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"mtermvectorsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"mtermvectorsrequest"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"mtermvectorsrequest"}}],[11,"new","","",91,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_index","","",91,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"for_index_ty","","",91,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",91,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"catrecoveryrequest"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"catrecoveryrequest"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"catrecoveryrequest"}}],[11,"new","","",92,{"inputs":[],"output":{"name":"self"}}],[11,"for_index","","",92,{"inputs":[{"name":"iindex"}],"output":{"name":"self"}}],[11,"into","","",92,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"snapshotrestorerequest"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"snapshotrestorerequest"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"snapshotrestorerequest"}}],[11,"for_repository_snapshot","","",93,{"inputs":[{"name":"irepository"},{"name":"isnapshot"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",93,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"reindexrequest"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"reindexrequest"}],"output":{"name":"bool"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"reindexrequest"}}],[11,"new","","",94,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",94,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"cathealthrequest"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"cathealthrequest"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"cathealthrequest"}}],[11,"new","","",95,{"inputs":[],"output":{"name":"self"}}],[11,"into","","",95,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"catcountrequest"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"catcountrequest"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"catcountrequest"}}],[11,"new","","",96,{"inputs":[],"output":{"name":"self"}}],[11,"for_index","","",96,{"inputs":[{"name":"iindex"}],"output":{"name":"self"}}],[11,"into","","",96,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"catsnapshotsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"catsnapshotsrequest"}],"output":{"name":"bool"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"catsnapshotsrequest"}}],[11,"new","","",97,{"inputs":[],"output":{"name":"self"}}],[11,"for_repository","","",97,{"inputs":[{"name":"irepository"}],"output":{"name":"self"}}],[11,"into","","",97,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"indicesgetmappingrequest"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"indicesgetmappingrequest"}],"output":{"name":"bool"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"indicesgetmappingrequest"}}],[11,"new","","",98,{"inputs":[],"output":{"name":"self"}}],[11,"for_index","","",98,{"inputs":[{"name":"iindex"}],"output":{"name":"self"}}],[11,"for_index_ty","","",98,{"inputs":[{"name":"iindex"},{"name":"itype"}],"output":{"name":"self"}}],[11,"for_ty","","",98,{"inputs":[{"name":"itype"}],"output":{"name":"self"}}],[11,"into","","",98,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"snapshotgetrequest"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"snapshotgetrequest"}],"output":{"name":"bool"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"snapshotgetrequest"}}],[11,"for_repository_snapshot","","",99,{"inputs":[{"name":"irepository"},{"name":"isnapshot"}],"output":{"name":"self"}}],[11,"into","","",99,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"catnodesrequest"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"catnodesrequest"}],"output":{"name":"bool"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"catnodesrequest"}}],[11,"new","","",100,{"inputs":[],"output":{"name":"self"}}],[11,"into","","",100,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"existsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"existsrequest"}],"output":{"name":"bool"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"existsrequest"}}],[11,"for_index_ty_id","","",101,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"iid"}],"output":{"name":"self"}}],[11,"into","","",101,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"clusterrerouterequest"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"clusterrerouterequest"}],"output":{"name":"bool"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"clusterrerouterequest"}}],[11,"new","","",102,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",102,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"nodeshotthreadsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"self"},{"name":"nodeshotthreadsrequest"}],"output":{"name":"bool"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"nodeshotthreadsrequest"}}],[11,"new","","",103,{"inputs":[],"output":{"name":"self"}}],[11,"for_node_id","","",103,{"inputs":[{"name":"inodeid"}],"output":{"name":"self"}}],[11,"into","","",103,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"nodesstatsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"self"},{"name":"nodesstatsrequest"}],"output":{"name":"bool"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"nodesstatsrequest"}}],[11,"new","","",104,{"inputs":[],"output":{"name":"self"}}],[11,"for_metric","","",104,{"inputs":[{"name":"imetric"}],"output":{"name":"self"}}],[11,"for_metric_index_metric","","",104,{"inputs":[{"name":"imetric"},{"name":"iindexmetric"}],"output":{"name":"self"}}],[11,"for_node_id","","",104,{"inputs":[{"name":"inodeid"}],"output":{"name":"self"}}],[11,"for_node_id_metric","","",104,{"inputs":[{"name":"inodeid"},{"name":"imetric"}],"output":{"name":"self"}}],[11,"for_node_id_metric_index_metric","","",104,{"inputs":[{"name":"inodeid"},{"name":"imetric"},{"name":"iindexmetric"}],"output":{"name":"self"}}],[11,"into","","",104,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"ingestgetpipelinerequest"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"ingestgetpipelinerequest"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"ingestgetpipelinerequest"}}],[11,"new","","",105,{"inputs":[],"output":{"name":"self"}}],[11,"for_id","","",105,{"inputs":[{"name":"iid"}],"output":{"name":"self"}}],[11,"into","","",105,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"puttemplaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"puttemplaterequest"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"puttemplaterequest"}}],[11,"for_id","","",106,{"inputs":[{"name":"iid"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",106,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"getsourcerequest"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"getsourcerequest"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"getsourcerequest"}}],[11,"for_index_ty_id","","",107,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"iid"}],"output":{"name":"self"}}],[11,"into","","",107,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"snapshotcreaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"snapshotcreaterequest"}],"output":{"name":"bool"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"snapshotcreaterequest"}}],[11,"for_repository_snapshot","","",108,{"inputs":[{"name":"irepository"},{"name":"isnapshot"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",108,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"scrollrequest"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"scrollrequest"}],"output":{"name":"bool"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"scrollrequest"}}],[11,"new","","",109,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_scroll_id","","",109,{"inputs":[{"name":"iscrollid"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",109,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"snapshotstatusrequest"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"snapshotstatusrequest"}],"output":{"name":"bool"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"snapshotstatusrequest"}}],[11,"new","","",110,{"inputs":[],"output":{"name":"self"}}],[11,"for_repository","","",110,{"inputs":[{"name":"irepository"}],"output":{"name":"self"}}],[11,"for_repository_snapshot","","",110,{"inputs":[{"name":"irepository"},{"name":"isnapshot"}],"output":{"name":"self"}}],[11,"into","","",110,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"mgetrequest"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"mgetrequest"}],"output":{"name":"bool"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"mgetrequest"}}],[11,"new","","",111,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_index","","",111,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"for_index_ty","","",111,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",111,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"indicesexiststemplaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"indicesexiststemplaterequest"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"indicesexiststemplaterequest"}}],[11,"for_name","","",112,{"inputs":[{"name":"iname"}],"output":{"name":"self"}}],[11,"into","","",112,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"indicesgetupgraderequest"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"indicesgetupgraderequest"}],"output":{"name":"bool"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"indicesgetupgraderequest"}}],[11,"new","","",113,{"inputs":[],"output":{"name":"self"}}],[11,"for_index","","",113,{"inputs":[{"name":"iindex"}],"output":{"name":"self"}}],[11,"into","","",113,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"putscriptrequest"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"putscriptrequest"}],"output":{"name":"bool"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"putscriptrequest"}}],[11,"for_lang_id","","",114,{"inputs":[{"name":"ilang"},{"name":"iid"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",114,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"gettemplaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"gettemplaterequest"}],"output":{"name":"bool"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"gettemplaterequest"}}],[11,"for_id","","",115,{"inputs":[{"name":"iid"}],"output":{"name":"self"}}],[11,"into","","",115,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"indicesdeletetemplaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"self"},{"name":"indicesdeletetemplaterequest"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"indicesdeletetemplaterequest"}}],[11,"for_name","","",116,{"inputs":[{"name":"iname"}],"output":{"name":"self"}}],[11,"into","","",116,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",117,{"inputs":[{"name":"self"},{"name":"indexrequest"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"self"},{"name":"indexrequest"}],"output":{"name":"bool"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"indexrequest"}}],[11,"for_index_ty","","",117,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"self"}}],[11,"for_index_ty_id","","",117,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"iid"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",117,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"indicesputsettingsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"self"},{"name":"indicesputsettingsrequest"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"indicesputsettingsrequest"}}],[11,"new","","",118,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_index","","",118,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",118,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"cattemplatesrequest"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"self"},{"name":"cattemplatesrequest"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"cattemplatesrequest"}}],[11,"new","","",119,{"inputs":[],"output":{"name":"self"}}],[11,"for_name","","",119,{"inputs":[{"name":"iname"}],"output":{"name":"self"}}],[11,"into","","",119,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"catindicesrequest"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"catindicesrequest"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"catindicesrequest"}}],[11,"new","","",120,{"inputs":[],"output":{"name":"self"}}],[11,"for_index","","",120,{"inputs":[{"name":"iindex"}],"output":{"name":"self"}}],[11,"into","","",120,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"clusterputsettingsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"self"},{"name":"clusterputsettingsrequest"}],"output":{"name":"bool"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"clusterputsettingsrequest"}}],[11,"new","","",121,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",121,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"updaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"self"},{"name":"updaterequest"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"updaterequest"}}],[11,"for_index_ty_id","","",122,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"iid"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",122,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"indicesputaliasrequest"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"self"},{"name":"indicesputaliasrequest"}],"output":{"name":"bool"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"indicesputaliasrequest"}}],[11,"for_index_name","","",123,{"inputs":[{"name":"iindex"},{"name":"iname"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",123,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"catpluginsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"self"},{"name":"catpluginsrequest"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"catpluginsrequest"}}],[11,"new","","",124,{"inputs":[],"output":{"name":"self"}}],[11,"into","","",124,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"countpercolaterequest"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"self"},{"name":"countpercolaterequest"}],"output":{"name":"bool"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"countpercolaterequest"}}],[11,"for_index_ty","","",125,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"b"}],"output":{"name":"self"}}],[11,"for_index_ty_id","","",125,{"inputs":[{"name":"iindex"},{"name":"itype"},{"name":"iid"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",125,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"indicesupgraderequest"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"self"},{"name":"indicesupgraderequest"}],"output":{"name":"bool"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"indicesupgraderequest"}}],[11,"new","","",126,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_index","","",126,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",126,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"indicesdeletealiasrequest"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"self"},{"name":"indicesdeletealiasrequest"}],"output":{"name":"bool"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"indicesdeletealiasrequest"}}],[11,"for_index_name","","",127,{"inputs":[{"name":"iindex"},{"name":"iname"}],"output":{"name":"self"}}],[11,"into","","",127,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"cattasksrequest"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"self"},{"name":"cattasksrequest"}],"output":{"name":"bool"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"cattasksrequest"}}],[11,"new","","",128,{"inputs":[],"output":{"name":"self"}}],[11,"into","","",128,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"indicesrolloverrequest"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"self"},{"name":"indicesrolloverrequest"}],"output":{"name":"bool"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"indicesrolloverrequest"}}],[11,"for_alias","","",129,{"inputs":[{"name":"ialias"},{"name":"b"}],"output":{"name":"self"}}],[11,"for_alias_new_index","","",129,{"inputs":[{"name":"ialias"},{"name":"inewindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",129,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"reindexrethrottlerequest"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"self"},{"name":"reindexrethrottlerequest"}],"output":{"name":"bool"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"reindexrethrottlerequest"}}],[11,"for_task_id","","",130,{"inputs":[{"name":"itaskid"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",130,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"snapshotcreaterepositoryrequest"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"self"},{"name":"snapshotcreaterepositoryrequest"}],"output":{"name":"bool"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"snapshotcreaterepositoryrequest"}}],[11,"for_repository","","",131,{"inputs":[{"name":"irepository"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",131,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"indicesgetrequest"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"self"},{"name":"indicesgetrequest"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"indicesgetrequest"}}],[11,"for_index","","",132,{"inputs":[{"name":"iindex"}],"output":{"name":"self"}}],[11,"for_index_feature","","",132,{"inputs":[{"name":"iindex"},{"name":"ifeature"}],"output":{"name":"self"}}],[11,"into","","",132,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"indicesanalyzerequest"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"self"},{"name":"indicesanalyzerequest"}],"output":{"name":"bool"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"indicesanalyzerequest"}}],[11,"new","","",133,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"for_index","","",133,{"inputs":[{"name":"iindex"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",133,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"catfielddatarequest"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"catfielddatarequest"}],"output":{"name":"bool"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"catfielddatarequest"}}],[11,"new","","",134,{"inputs":[],"output":{"name":"self"}}],[11,"for_fields","","",134,{"inputs":[{"name":"ifields"}],"output":{"name":"self"}}],[11,"into","","",134,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"indicessegmentsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"self"},{"name":"indicessegmentsrequest"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"indicessegmentsrequest"}}],[11,"new","","",135,{"inputs":[],"output":{"name":"self"}}],[11,"for_index","","",135,{"inputs":[{"name":"iindex"}],"output":{"name":"self"}}],[11,"into","","",135,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"indicesshrinkrequest"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"self"},{"name":"indicesshrinkrequest"}],"output":{"name":"bool"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"indicesshrinkrequest"}}],[11,"for_index_target","","",136,{"inputs":[{"name":"iindex"},{"name":"itarget"},{"name":"b"}],"output":{"name":"self"}}],[11,"into","","",136,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"taskslistrequest"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"self"},{"name":"taskslistrequest"}],"output":{"name":"bool"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"taskslistrequest"}}],[11,"new","","",137,{"inputs":[],"output":{"name":"self"}}],[11,"into","","",137,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"catmasterrequest"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"self"},{"name":"catmasterrequest"}],"output":{"name":"bool"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"catmasterrequest"}}],[11,"new","","",138,{"inputs":[],"output":{"name":"self"}}],[11,"into","","",138,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"indicesexiststyperequest"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"self"},{"name":"indicesexiststyperequest"}],"output":{"name":"bool"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"indicesexiststyperequest"}}],[11,"for_index_ty","","",139,{"inputs":[{"name":"iindex"},{"name":"itype"}],"output":{"name":"self"}}],[11,"into","","",139,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"clustergetsettingsrequest"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"clustergetsettingsrequest"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"clustergetsettingsrequest"}}],[11,"new","","",140,{"inputs":[],"output":{"name":"self"}}],[11,"into","","",140,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"nodesinforequest"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"self"},{"name":"nodesinforequest"}],"output":{"name":"bool"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"nodesinforequest"}}],[11,"new","","",141,{"inputs":[],"output":{"name":"self"}}],[11,"for_metric","","",141,{"inputs":[{"name":"imetric"}],"output":{"name":"self"}}],[11,"for_node_id","","",141,{"inputs":[{"name":"inodeid"}],"output":{"name":"self"}}],[11,"for_node_id_metric","","",141,{"inputs":[{"name":"inodeid"},{"name":"imetric"}],"output":{"name":"self"}}],[11,"into","","",141,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"simplesearchrequest"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"self"},{"name":"simplesearchrequest"}],"output":{"name":"bool"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"simplesearchrequest"}}],[11,"new","","",142,{"inputs":[],"output":{"name":"self"}}],[11,"for_index","","",142,{"inputs":[{"name":"iindex"}],"output":{"name":"self"}}],[11,"for_index_ty","","",142,{"inputs":[{"name":"iindex"},{"name":"itype"}],"output":{"name":"self"}}],[11,"into","","",142,{"inputs":[{"name":"self"}],"output":{"name":"httprequest"}}],[11,"fmt","elastic_requests::params","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"alias"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"alias"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"alias"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"alias"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"alias"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"feature"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"feature"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"feature"}}],[11,"from","","",4,{"inputs":[{"name":"str"}],"output":{"name":"feature"}}],[11,"from","","",4,{"inputs":[{"name":"string"}],"output":{"name":"feature"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"fields"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"fields"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fields"}}],[11,"from","","",5,{"inputs":[{"name":"str"}],"output":{"name":"fields"}}],[11,"from","","",5,{"inputs":[{"name":"string"}],"output":{"name":"fields"}}],[11,"deref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"id"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"id"}}],[11,"from","","",6,{"inputs":[{"name":"str"}],"output":{"name":"id"}}],[11,"from","","",6,{"inputs":[{"name":"string"}],"output":{"name":"id"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"index"}}],[11,"from","","",7,{"inputs":[{"name":"str"}],"output":{"name":"index"}}],[11,"from","","",7,{"inputs":[{"name":"string"}],"output":{"name":"index"}}],[11,"deref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"indexmetric"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"indexmetric"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"indexmetric"}}],[11,"from","","",8,{"inputs":[{"name":"str"}],"output":{"name":"indexmetric"}}],[11,"from","","",8,{"inputs":[{"name":"string"}],"output":{"name":"indexmetric"}}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"lang"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"lang"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"lang"}}],[11,"from","","",9,{"inputs":[{"name":"str"}],"output":{"name":"lang"}}],[11,"from","","",9,{"inputs":[{"name":"string"}],"output":{"name":"lang"}}],[11,"deref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"metric"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"metric"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"metric"}}],[11,"from","","",10,{"inputs":[{"name":"str"}],"output":{"name":"metric"}}],[11,"from","","",10,{"inputs":[{"name":"string"}],"output":{"name":"metric"}}],[11,"deref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"from","","",11,{"inputs":[{"name":"str"}],"output":{"name":"name"}}],[11,"from","","",11,{"inputs":[{"name":"string"}],"output":{"name":"name"}}],[11,"deref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"newindex"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"newindex"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"newindex"}}],[11,"from","","",12,{"inputs":[{"name":"str"}],"output":{"name":"newindex"}}],[11,"from","","",12,{"inputs":[{"name":"string"}],"output":{"name":"newindex"}}],[11,"deref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"from","","",13,{"inputs":[{"name":"str"}],"output":{"name":"nodeid"}}],[11,"from","","",13,{"inputs":[{"name":"string"}],"output":{"name":"nodeid"}}],[11,"deref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"repository"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"repository"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"repository"}}],[11,"from","","",14,{"inputs":[{"name":"str"}],"output":{"name":"repository"}}],[11,"from","","",14,{"inputs":[{"name":"string"}],"output":{"name":"repository"}}],[11,"deref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"scrollid"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"scrollid"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"scrollid"}}],[11,"from","","",15,{"inputs":[{"name":"str"}],"output":{"name":"scrollid"}}],[11,"from","","",15,{"inputs":[{"name":"string"}],"output":{"name":"scrollid"}}],[11,"deref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"snapshot"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"snapshot"}}],[11,"from","","",16,{"inputs":[{"name":"str"}],"output":{"name":"snapshot"}}],[11,"from","","",16,{"inputs":[{"name":"string"}],"output":{"name":"snapshot"}}],[11,"deref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"from","","",17,{"inputs":[{"name":"str"}],"output":{"name":"target"}}],[11,"from","","",17,{"inputs":[{"name":"string"}],"output":{"name":"target"}}],[11,"deref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"taskid"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"taskid"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"taskid"}}],[11,"from","","",18,{"inputs":[{"name":"str"}],"output":{"name":"taskid"}}],[11,"from","","",18,{"inputs":[{"name":"string"}],"output":{"name":"taskid"}}],[11,"deref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"threadpoolpatterns"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"threadpoolpatterns"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"threadpoolpatterns"}}],[11,"from","","",19,{"inputs":[{"name":"str"}],"output":{"name":"threadpoolpatterns"}}],[11,"from","","",19,{"inputs":[{"name":"string"}],"output":{"name":"threadpoolpatterns"}}],[11,"deref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"from","","",20,{"inputs":[{"name":"str"}],"output":{"name":"type"}}],[11,"from","","",20,{"inputs":[{"name":"string"}],"output":{"name":"type"}}],[11,"deref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[3,"HttpRequest"],[4,"HttpMethod"],[3,"Url"],[3,"Alias"],[3,"Feature"],[3,"Fields"],[3,"Id"],[3,"Index"],[3,"IndexMetric"],[3,"Lang"],[3,"Metric"],[3,"Name"],[3,"NewIndex"],[3,"NodeId"],[3,"Repository"],[3,"ScrollId"],[3,"Snapshot"],[3,"Target"],[3,"TaskId"],[3,"ThreadPoolPatterns"],[3,"Type"],[3,"IndicesCloseRequest"],[3,"DeleteScriptRequest"],[3,"TermvectorsRequest"],[3,"FieldStatsRequest"],[3,"CatThreadPoolRequest"],[3,"SnapshotDeleteRequest"],[3,"IndicesGetSettingsRequest"],[3,"CreateRequest"],[3,"SnapshotDeleteRepositoryRequest"],[3,"ClusterAllocationExplainRequest"],[3,"IndicesPutTemplateRequest"],[3,"IndicesGetTemplateRequest"],[3,"ClusterStateRequest"],[3,"MsearchTemplateRequest"],[3,"BulkRequest"],[3,"ExplainRequest"],[3,"SuggestRequest"],[3,"SnapshotGetRepositoryRequest"],[3,"RenderSearchTemplateRequest"],[3,"IndicesStatsRequest"],[3,"CatRepositoriesRequest"],[3,"IndicesForcemergeRequest"],[3,"PingRequest"],[3,"TasksGetRequest"],[3,"IndicesExistsRequest"],[3,"IndicesFlushSyncedRequest"],[3,"MsearchRequest"],[3,"InfoRequest"],[3,"SearchTemplateRequest"],[3,"IndicesDeleteRequest"],[3,"DeleteByQueryRequest"],[3,"DeleteTemplateRequest"],[3,"IndicesCreateRequest"],[3,"PercolateRequest"],[3,"SearchRequest"],[3,"CatNodeattrsRequest"],[3,"SnapshotVerifyRepositoryRequest"],[3,"CountRequest"],[3,"CatAllocationRequest"],[3,"IndicesFlushRequest"],[3,"IndicesRefreshRequest"],[3,"CatHelpRequest"],[3,"SearchShardsRequest"],[3,"ClusterHealthRequest"],[3,"IndicesExistsAliasRequest"],[3,"IndicesGetFieldMappingRequest"],[3,"IngestPutPipelineRequest"],[3,"ClusterPendingTasksRequest"],[3,"IngestSimulateRequest"],[3,"IndicesGetAliasRequest"],[3,"GetScriptRequest"],[3,"IndicesRecoveryRequest"],[3,"IngestDeletePipelineRequest"],[3,"TasksCancelRequest"],[3,"IndicesClearCacheRequest"],[3,"DeleteRequest"],[3,"IndicesPutMappingRequest"],[3,"CatAliasesRequest"],[3,"ClusterStatsRequest"],[3,"IndicesValidateQueryRequest"],[3,"CatPendingTasksRequest"],[3,"ClearScrollRequest"],[3,"CatShardsRequest"],[3,"IndicesShardStoresRequest"],[3,"IndicesUpdateAliasesRequest"],[3,"CatSegmentsRequest"],[3,"MpercolateRequest"],[3,"IndicesOpenRequest"],[3,"GetRequest"],[3,"UpdateByQueryRequest"],[3,"MtermvectorsRequest"],[3,"CatRecoveryRequest"],[3,"SnapshotRestoreRequest"],[3,"ReindexRequest"],[3,"CatHealthRequest"],[3,"CatCountRequest"],[3,"CatSnapshotsRequest"],[3,"IndicesGetMappingRequest"],[3,"SnapshotGetRequest"],[3,"CatNodesRequest"],[3,"ExistsRequest"],[3,"ClusterRerouteRequest"],[3,"NodesHotThreadsRequest"],[3,"NodesStatsRequest"],[3,"IngestGetPipelineRequest"],[3,"PutTemplateRequest"],[3,"GetSourceRequest"],[3,"SnapshotCreateRequest"],[3,"ScrollRequest"],[3,"SnapshotStatusRequest"],[3,"MgetRequest"],[3,"IndicesExistsTemplateRequest"],[3,"IndicesGetUpgradeRequest"],[3,"PutScriptRequest"],[3,"GetTemplateRequest"],[3,"IndicesDeleteTemplateRequest"],[3,"IndexRequest"],[3,"IndicesPutSettingsRequest"],[3,"CatTemplatesRequest"],[3,"CatIndicesRequest"],[3,"ClusterPutSettingsRequest"],[3,"UpdateRequest"],[3,"IndicesPutAliasRequest"],[3,"CatPluginsRequest"],[3,"CountPercolateRequest"],[3,"IndicesUpgradeRequest"],[3,"IndicesDeleteAliasRequest"],[3,"CatTasksRequest"],[3,"IndicesRolloverRequest"],[3,"ReindexRethrottleRequest"],[3,"SnapshotCreateRepositoryRequest"],[3,"IndicesGetRequest"],[3,"IndicesAnalyzeRequest"],[3,"CatFielddataRequest"],[3,"IndicesSegmentsRequest"],[3,"IndicesShrinkRequest"],[3,"TasksListRequest"],[3,"CatMasterRequest"],[3,"IndicesExistsTypeRequest"],[3,"ClusterGetSettingsRequest"],[3,"NodesInfoRequest"],[3,"SimpleSearchRequest"]]};
searchIndex["elastic_reqwest"] = {"doc":"Elasticsearch REST API Client","items":[[3,"RequestParams","elastic_reqwest","Misc parameters for any request.",null,null],[12,"base_url","","Base url for Elasticsearch.",0,null],[12,"url_params","","Simple key-value store for url query params.",0,null],[12,"headers","","The complete set of headers that will be sent with the request.",0,null],[5,"default","","Get a default `Client` and `RequestParams`.",null,{"inputs":[],"output":{"name":"result"}}],[0,"req","","Request types.",null,null],[8,"IntoReqwestBody","","A type that can be converted into a `reqwest::Body`.",null,null],[10,"into_body","","Convert self into a body.",1,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[8,"ElasticClient","","Represents a client that can send Elasticsearch requests.",null,null],[10,"elastic_req","","Send a request and get a response.",2,{"inputs":[{"name":"self"},{"name":"requestparams"},{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"requestparams"}}],[11,"new","","Create a new container for request parameters.",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"base_url","","Set the base url for the Elasticsearch node.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"url_param","","Set a url param value.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"self"}}],[11,"header","","Set a header value on the params.",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"self"}}],[11,"get_url_qry","","Get the url query params as a formatted string.",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}]],"paths":[[3,"RequestParams"],[8,"IntoReqwestBody"],[8,"ElasticClient"]]};
searchIndex["elastic_responses"] = {"doc":"Elasticsearch Response Iterators","items":[[3,"GetResponseOf","elastic_responses","Response for a get document request.",null,null],[12,"index","","",0,null],[12,"ty","","",0,null],[12,"version","","",0,null],[12,"found","","",0,null],[12,"source","","",0,null],[12,"routing","","",0,null],[3,"SearchResponseOf","","Main `struct` of the crate, provides access to the `hits` and `aggs` iterators.",null,null],[12,"took","","",1,null],[12,"timed_out","","",1,null],[12,"shards","","",1,null],[12,"hits","","",1,null],[12,"aggregations","","",1,null],[12,"status","","",1,null],[3,"Shards","","",null,null],[12,"total","","",2,null],[12,"successful","","",2,null],[12,"failed","","",2,null],[3,"Hits","","Struct to hold the search's Hits, serializable to type `T` or `serde_json::Value`",null,null],[12,"total","","",3,null],[12,"max_score","","",3,null],[12,"hits","","",3,null],[3,"Hit","","",null,null],[12,"index","","",4,null],[12,"ty","","",4,null],[12,"version","","",4,null],[12,"score","","",4,null],[12,"source","","",4,null],[12,"routing","","",4,null],[3,"Aggregations","","Type Struct to hold a generic `serde_json::Value` tree of the Aggregation results.",null,null],[3,"AggregationIterator","","Aggregator that traverses the results from Elasticsearch's Aggregations and returns a result row by row in a table-styled fashion.",null,null],[3,"HttpResponse","","A raw HTTP response with enough information to parse a concrete type from it.",null,null],[0,"error","","Error types from Elasticsearch",null,null],[4,"ResponseError","elastic_responses::error","An error parsing a REST API response to a success value.",null,null],[13,"Api","","",5,null],[13,"Json","","",5,null],[4,"ApiError","","A REST API error response.",null,null],[13,"IndexNotFound","","",6,null],[12,"index","elastic_responses::error::ApiError","",6,null],[13,"Parsing","elastic_responses::error","",6,null],[12,"line","elastic_responses::error::ApiError","",6,null],[12,"col","","",6,null],[12,"reason","","",6,null],[13,"Other","elastic_responses::error","",6,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"apierror"}],"output":{"name":"responseerror"}}],[11,"from","","",5,{"inputs":[{"name":"jsonerror"}],"output":{"name":"responseerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"apierror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"apierror"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"map"}],"output":{"name":"self"}}],[0,"parse","elastic_responses","Response type parsing.",null,null],[3,"MaybeOkResponse","elastic_responses::parse","A response that might be successful or an `ApiError`.",null,null],[3,"UnbufferedResponse","","An untouched response body.",null,null],[3,"BufferedResponse","","A previously buffered response body.",null,null],[4,"MaybeBufferedResponse","","A response body that may or may not have been buffered.",null,null],[13,"Unbuffered","","",7,null],[13,"Buffered","","",7,null],[11,"read","elastic_responses","",8,null],[11,"response","","Get the response body from JSON.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"new","elastic_responses::parse","Create a new response that indicates where or not the body is successful or an `ApiError`.",9,{"inputs":[{"name":"bool"},{"name":"i"}],"output":{"name":"self"}}],[11,"ok","","Create a response where the body is successful.",9,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"err","","Create a resposne where the body is an error.",9,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"unbufferedresponse"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"bufferedresponse"}],"output":{"name":"self"}}],[11,"status","","Get the HTTP status code for the response.",10,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"body","","Buffer the response body into a `serde_json::Value` and return a `BufferedResponse`.",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"status","","Get the HTTP status code for the response.",11,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"fmt","elastic_responses","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_response","","",0,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_response","","",1,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"hits","","Returns an Iterator to the search results or hits of the response.",1,null],[11,"aggs","","Returns an Iterator to the search results or aggregations part of the response.",1,{"inputs":[{"name":"self"}],"output":{"name":"aggregations"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"GetResponse","","",null,null],[6,"SearchResponse","","",null,null],[8,"FromResponse","","Convert a response message into a either a success or failure result.",null,null],[10,"from_response","","",14,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"new","","Create a new HTTP response from the given status code and body.",8,{"inputs":[{"name":"u16"},{"name":"r"}],"output":{"name":"self"}}],[11,"status","","Get the status code.",8,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}]],"paths":[[3,"GetResponseOf"],[3,"SearchResponseOf"],[3,"Shards"],[3,"Hits"],[3,"Hit"],[4,"ResponseError"],[4,"ApiError"],[4,"MaybeBufferedResponse"],[3,"HttpResponse"],[3,"MaybeOkResponse"],[3,"UnbufferedResponse"],[3,"BufferedResponse"],[3,"Aggregations"],[3,"AggregationIterator"],[8,"FromResponse"]]};
searchIndex["elastic_types"] = {"doc":"Elasticsearch Core Types","items":[[0,"document","elastic_types","Base requirements for indexable document mappings.",null,null],[3,"Document","elastic_types::document","A wrapper type for serialising user types.",null,null],[4,"Dynamic","","The dynamic setting may be set at the mapping type level, and on each inner object. Inner objects inherit the setting from their parent object or from the mapping type.",null,null],[13,"True","","Newly detected fields are added to the mapping. (default).",0,null],[13,"False","","Newly detected fields are ignored. New fields must be added explicitly.",0,null],[13,"Strict","","If new fields are detected, an exception is thrown and the document is rejected.",0,null],[5,"field_ser","","Serialise a field mapping using the given serialiser.",null,{"inputs":[{"name":"s"},{"name":"str"},{"name":"m"}],"output":{"name":"result"}}],[5,"doc_ser","","Serialise a document mapping using the given serialiser.",null,{"inputs":[{"name":"s"},{"name":"str"},{"name":"m"}],"output":{"name":"result"}}],[17,"OBJECT_DATATYPE","","Elasticsearch datatype name.",null,null],[17,"DYNAMIC_DATATYPE","","Elasticsearch datatype name.",null,null],[17,"NESTED_DATATYPE","","Elasticsearch datatype name.",null,null],[8,"DocumentType","","The additional fields available to an indexable Elasticsearch type.",null,null],[11,"name","","Get the name for this type.",1,{"inputs":[],"output":{"name":"str"}}],[8,"DocumentMapping","","The base requirements for mapping an `object` type.",null,null],[10,"name","","Get the indexed name for this mapping.",2,{"inputs":[],"output":{"name":"str"}}],[11,"data_type","","Get the type name for this mapping, like `object` or `nested`.",2,{"inputs":[],"output":{"name":"str"}}],[11,"dynamic","","Whether or not new properties should be added dynamically to an existing object. Accepts `true` (default), `false` and `strict`.",2,{"inputs":[],"output":{"name":"option"}}],[11,"enabled","","Whether the JSON value given for the object field should be parsed and indexed (`true`, default) or completely ignored (`false`).",2,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Sets the default `include_in_all` value for all the properties within the object. The object itself is not added to the `_all` field.",2,{"inputs":[],"output":{"name":"option"}}],[8,"PropertiesMapping","","Serialisation for the mapping of object properties.",null,null],[10,"props_len","","The number of mapped property fields for this type.",3,{"inputs":[],"output":{"name":"usize"}}],[10,"serialize_props","","Serialisation for the mapped property fields on this type.",3,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"document"}}],[11,"from","","",4,{"inputs":[{"name":"m"}],"output":{"name":"self"}}],[11,"serialize","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"dynamic"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[0,"date","elastic_types","Implementation of the Elasticsearch `date` type.",null,null],[8,"Datelike","elastic_types::date","The common set of methods for date component.",null,null],[10,"year","","Returns the year number in the calendar date.",5,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",5,null],[10,"month","","Returns the month number starting from 1.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"month0","","Returns the month number starting from 0.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day","","Returns the day of month starting from 1.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day0","","Returns the day of month starting from 0.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal","","Returns the day of year starting from 1.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal0","","Returns the day of year starting from 0.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"weekday","","Returns the day of week.",5,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[10,"isoweekdate","","Returns the ISO week date: an adjusted year, week number and day of week. The adjusted year may differ from that of the calendar date.",5,null],[10,"with_year","","Makes a new value with the year number changed.",5,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",5,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",6,null],[10,"minute","","Returns the minute number from 0 to 59.",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"second","","Returns the second number from 0 to 59.",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"with_hour","","Makes a new value with the hour number changed.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_minute","","Makes a new value with the minute number changed.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_second","","Makes a new value with the second number changed.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[3,"ParseError","","Represents an error encountered during parsing.",null,null],[3,"Date","","An Elasticsearch `date` type with a required `time` component.",null,null],[3,"ChronoFormat","","Format for default `chrono::DateTime`.",null,null],[3,"BasicDateTimeNoMillis","","Format for `basic_date_time_no_millis`.",null,null],[3,"BasicDateTime","","Format for `basic_date_time`.",null,null],[3,"EpochMillis","","Format for `epoch_millis`.",null,null],[5,"parse_from_tokens","","Parse a date string using an owned slice of items.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"result"}}],[5,"format_with_tokens","","Format a date string using an owned slice of items.",null,{"inputs":[{"name":"datetime"},{"name":"vec"}],"output":{"name":"string"}}],[0,"mapping","","Mapping for the Elasticsearch `date` type.",null,null],[3,"DefaultDateMapping","elastic_types::date::mapping","Default mapping for `date`.",null,null],[17,"DATE_DATATYPE","","Elasticsearch datatype name.",null,null],[8,"DateMapping","","The base requirements for mapping a `date` type.",null,null],[16,"Format","","The date format bound to this mapping.",7,null],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",7,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",7,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",7,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",7,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",7,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",7,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a date value in one of the configured format's as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",7,{"inputs":[],"output":{"name":"option"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"defaultdatemapping"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"defaultdatemapping"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"defaultdatemapping"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"defaultdatemapping"}}],[11,"fmt","elastic_types::date","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",9,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"from","","",9,{"inputs":[{"name":"string"}],"output":{"name":"parseerror"}}],[11,"parse","","",10,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"format","","",10,{"inputs":[{"name":"datetime"}],"output":{"name":"string"}}],[11,"name","","",10,{"inputs":[],"output":{"name":"str"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"chronoformat"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"chronoformat"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"chronoformat"}}],[11,"parse","","",11,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"format","","",11,{"inputs":[{"name":"datetime"}],"output":{"name":"string"}}],[11,"name","","",11,{"inputs":[],"output":{"name":"str"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"basicdatetimenomillis"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"basicdatetimenomillis"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"basicdatetimenomillis"}}],[11,"parse","","",12,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"format","","",12,{"inputs":[{"name":"datetime"}],"output":{"name":"string"}}],[11,"name","","",12,{"inputs":[],"output":{"name":"str"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"basicdatetime"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"basicdatetime"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"basicdatetime"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"epochmillis"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"epochmillis"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"epochmillis"}}],[11,"name","","",13,{"inputs":[],"output":{"name":"str"}}],[11,"parse","","",13,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"format","","",13,{"inputs":[{"name":"datetime"}],"output":{"name":"string"}}],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",5,null],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",5,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",6,null],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Date` from the given `chrono::DateTime<UTC>`.",14,{"inputs":[{"name":"chronodatetime"}],"output":{"name":"date"}}],[11,"build","","Creates an `Date` from the given UTC primitives:",14,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"now","","Gets the current system time.",14,{"inputs":[],"output":{"name":"date"}}],[11,"parse","","Parse the date and time from a string.",14,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"format","","Format the date and time as a string.",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"remap","","Change the format/mapping of this date.",14,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"from","","",14,{"inputs":[{"name":"chronodatetime"}],"output":{"name":"self"}}],[11,"as_ref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"chronodatetime"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"chronodatetime"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"chronodatetime"}],"output":{"name":"bool"}}],[11,"deref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"chronodatetime"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"date"}}],[11,"serialize","","",14,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"prelude","","Includes all types for the `date` type.",null,null],[8,"Datelike","elastic_types::date::prelude","The common set of methods for date component.",null,null],[10,"year","","Returns the year number in the calendar date.",5,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",5,null],[10,"month","","Returns the month number starting from 1.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"month0","","Returns the month number starting from 0.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day","","Returns the day of month starting from 1.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day0","","Returns the day of month starting from 0.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal","","Returns the day of year starting from 1.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal0","","Returns the day of year starting from 0.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"weekday","","Returns the day of week.",5,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[10,"isoweekdate","","Returns the ISO week date: an adjusted year, week number and day of week. The adjusted year may differ from that of the calendar date.",5,null],[10,"with_year","","Makes a new value with the year number changed.",5,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",5,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",6,null],[10,"minute","","Returns the minute number from 0 to 59.",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"second","","Returns the second number from 0 to 59.",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"with_hour","","Makes a new value with the hour number changed.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_minute","","Makes a new value with the minute number changed.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_second","","Makes a new value with the second number changed.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[3,"ParseError","","Represents an error encountered during parsing.",null,null],[3,"Date","","An Elasticsearch `date` type with a required `time` component.",null,null],[3,"ChronoFormat","","Format for default `chrono::DateTime`.",null,null],[3,"BasicDateTimeNoMillis","","Format for `basic_date_time_no_millis`.",null,null],[3,"BasicDateTime","","Format for `basic_date_time`.",null,null],[3,"EpochMillis","","Format for `epoch_millis`.",null,null],[5,"parse_from_tokens","","Parse a date string using an owned slice of items.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"result"}}],[5,"format_with_tokens","","Format a date string using an owned slice of items.",null,{"inputs":[{"name":"datetime"},{"name":"vec"}],"output":{"name":"string"}}],[8,"DateFormat","","A format used for parsing and formatting dates.",null,null],[10,"parse","","Parses a date string to a `chrono::DateTime<UTC>` result.",15,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[10,"format","","Formats a given `chrono::DateTime<UTC>` as a string.",15,{"inputs":[{"name":"datetime"}],"output":{"name":"string"}}],[10,"name","","The name of the format.",15,{"inputs":[],"output":{"name":"str"}}],[6,"ChronoDateTime","elastic_types::date","A re-export of the `chrono::DateTime` struct with `UTC` timezone.",null,null],[6,"DefaultDateFormat","","The default `date` format (`BasicDateTime`).",null,null],[8,"DateFormat","","A format used for parsing and formatting dates.",null,null],[10,"parse","","Parses a date string to a `chrono::DateTime<UTC>` result.",15,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[10,"format","","Formats a given `chrono::DateTime<UTC>` as a string.",15,{"inputs":[{"name":"datetime"}],"output":{"name":"string"}}],[10,"name","","The name of the format.",15,{"inputs":[],"output":{"name":"str"}}],[0,"boolean","elastic_types","Implementation of the Elasticsearch `boolean` types.",null,null],[3,"Boolean","elastic_types::boolean","An Elasticsearch `boolean` with a mapping.",null,null],[0,"mapping","","Mapping for the Elasticsearch `boolean` type.",null,null],[3,"DefaultBooleanMapping","elastic_types::boolean::mapping","Default mapping for `bool`.",null,null],[17,"BOOLEAN_DATATYPE","","Elasticsearch datatype name.",null,null],[8,"BooleanMapping","","The base requirements for mapping a `boolean` type.",null,null],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",16,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",16,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",16,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a string value which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",16,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",16,{"inputs":[],"output":{"name":"option"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"defaultbooleanmapping"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"defaultbooleanmapping"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"defaultbooleanmapping"}}],[11,"fmt","elastic_types::boolean","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"boolean"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"boolean"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"boolean"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"boolean"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Boolean` with the given mapping.",18,{"inputs":[{"name":"i"}],"output":{"name":"boolean"}}],[11,"remap","","Change the mapping of this boolean.",18,{"inputs":[{"name":"self"}],"output":{"name":"boolean"}}],[11,"from","","",18,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"as_ref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"deref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"serialize","","",18,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",18,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"prelude","","Includes all types for the `boolean` type.",null,null],[3,"Boolean","elastic_types::boolean::prelude","An Elasticsearch `boolean` with a mapping.",null,null],[0,"geo","elastic_types","Implementation of the Elasticsearch `geo` types.",null,null],[0,"point","elastic_types::geo","Implementation of the Elasticsearch `geo_point` type.",null,null],[3,"GeoPoint","elastic_types::geo::point","An Elasticsearch `geo_point` type with a format.",null,null],[3,"GeoPointObject","","Geo-point expressed as an object, with `lat` and `lon` keys.",null,null],[3,"GeoPointString","","Geo-point expressed as a string with the format: `\"lat,lon\"`.",null,null],[3,"GeoPointHash","","Geo-point expressed as a geohash.",null,null],[3,"GeoPointArray","","Geo-point expressed as an array with the format: `[lon, lat]`",null,null],[0,"mapping","","Mapping for the Elasticsearch `geo_point` type.",null,null],[3,"DefaultGeoPointMapping","elastic_types::geo::point::mapping","Default mapping for `geo_point`.",null,null],[17,"GEOPOINT_DATATYPE","","Elasticsearch datatype name.",null,null],[8,"GeoPointMapping","","The base requirements for mapping a `geo_point` type.",null,null],[16,"Format","","The format used to serialise and deserialise the geo point.",19,null],[11,"geohash","","Should the `geo-point` also be indexed as a geohash in the `.geohash` sub-field? Defaults to `false`, unless `geohash_prefix` is `true`.",19,{"inputs":[],"output":{"name":"option"}}],[11,"geohash_precision","","The maximum length of the geohash to use for the geohash and `geohash_prefix` options.",19,{"inputs":[],"output":{"name":"option"}}],[11,"geohash_prefix","","Should the `geo-point` also be indexed as a geohash plus all its prefixes? Defaults to `false`.",19,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed `geo-points` are ignored. If `false` (default), malformed `geo-points` throw an exception and reject the whole document.",19,{"inputs":[],"output":{"name":"option"}}],[11,"lat_lon","","Should the `geo-point` also be indexed as `.lat` and `.lon` sub-fields? Accepts `true` and `false` (default).",19,{"inputs":[],"output":{"name":"option"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"defaultgeopointmapping"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"defaultgeopointmapping"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"defaultgeopointmapping"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"defaultgeopointmapping"}}],[11,"fmt","elastic_types::geo::point","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"geopoint"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"geopoint"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"geopoint"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `GeoPoint` from the given coordinate.",21,{"inputs":[{"name":"i"}],"output":{"name":"geopoint"}}],[11,"build","","Creates an `GeoPoint` from the given `x` and `y` primitives:",21,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"geopoint"}}],[11,"remap","","Change the format/mapping of this geo point.",21,{"inputs":[{"name":"self"}],"output":{"name":"geopoint"}}],[11,"from","","",21,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"as_ref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"deref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"from","","",21,{"inputs":[{"name":"c"}],"output":{"name":"geopoint"}}],[11,"to_geo","","",21,{"inputs":[{"name":"self"}],"output":{"name":"g"}}],[11,"serialize","","",21,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",21,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"geopointobject"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"geopointobject"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"geopointobject"}}],[11,"parse","","",22,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"format","","",22,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"geopointstring"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"geopointstring"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"geopointstring"}}],[11,"parse","","",23,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"format","","",23,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"geopointhash"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"geopointhash"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"geopointhash"}}],[11,"parse","","",24,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"format","","",24,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"geopointarray"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"geopointarray"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"geopointarray"}}],[11,"parse","","",25,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"format","","",25,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"result"}}],[0,"prelude","","Includes all types for the `geo_point` type.",null,null],[3,"GeoPoint","elastic_types::geo::point::prelude","An Elasticsearch `geo_point` type with a format.",null,null],[3,"GeoPointObject","","Geo-point expressed as an object, with `lat` and `lon` keys.",null,null],[3,"GeoPointString","","Geo-point expressed as a string with the format: `\"lat,lon\"`.",null,null],[3,"GeoPointHash","","Geo-point expressed as a geohash.",null,null],[3,"GeoPointArray","","Geo-point expressed as an array with the format: `[lon, lat]`",null,null],[8,"GeoPointFormat","","A format used for parsing and formatting geo points.",null,null],[10,"parse","","Parses a `geo::Point`.",26,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[10,"format","","Formats a `geo::Point`.",26,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"result"}}],[6,"DefaultGeoPointFormat","elastic_types::geo::point","The default `geo_point` format (`GeoPointArray`).",null,null],[8,"GeoPointFormat","","A format used for parsing and formatting geo points.",null,null],[10,"parse","","Parses a `geo::Point`.",26,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[10,"format","","Formats a `geo::Point`.",26,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"result"}}],[0,"shape","elastic_types::geo","Implementation of the Elasticsearch `geo_shape` type.",null,null],[3,"GeoShape","elastic_types::geo::shape","Geo shape type with a given mapping.",null,null],[0,"mapping","","Mapping for Elasticsearch `geo_shape` types.",null,null],[3,"DefaultGeoShapeMapping","elastic_types::geo::shape::mapping","Default mapping for `geo_shape`.",null,null],[4,"Tree","","Name of the `PrefixTree` implementation to be used.",null,null],[13,"Geohash","","For `GeohashPrefixTree`.",27,null],[13,"QuadPrefix","","For `QuadPrefixTree`.",27,null],[4,"Strategy","","The strategy defines the approach for how to represent shapes at indexing and search time.",null,null],[13,"Recursive","","Recursive strategy supports all shape types.",28,null],[13,"Term","","Term strategy supports point types only.",28,null],[4,"Orientation","","This parameter defines one of two coordinate system rules (Right-hand or Left-hand) each of which can be specified in a few different ways. - Right-hand rule: right, ccw, counterclockwise, - Left-hand rule: left, cw, clockwise. The default orientation (counterclockwise) complies with the OGC standard which defines outer ring vertices in counterclockwise order with inner ring(s) vertices (holes) in clockwise order.",null,null],[13,"Clockwise","","For `cw`.",29,null],[13,"CounterClockwise","","For `ccw`.",29,null],[17,"GEOSHAPE_DATATYPE","","Elasticsearch datatype name.",null,null],[8,"GeoShapeMapping","","The base requirements for mapping a `geo_shape` type.",null,null],[11,"tree","","Name of the PrefixTree implementation to be used: `geohash` for `GeohashPrefixTree` and `quadtree` for `QuadPrefixTree`.",30,{"inputs":[],"output":{"name":"option"}}],[11,"precision","","This parameter may be used instead of `tree_levels` to set an appropriate value for the `tree_levels` parameter. The value specifies the desired precision and Elasticsearch will calculate the best `tree_levels` value to honor this precision. The value should be a number followed by an optional distance unit.",30,{"inputs":[],"output":{"name":"option"}}],[11,"tree_levels","","Maximum number of layers to be used by the `PrefixTree`. This can be used to control the precision of shape representations and therefore how many terms are indexed. Defaults to the default value of the chosen `PrefixTree` implementation. Since this parameter requires a certain level of understanding of the underlying implementation, users may use the `precision` parameter instead. However, Elasticsearch only uses the `tree_levels` parameter internally and this is what is returned via the mapping API even if you use the `precision` parameter.",30,{"inputs":[],"output":{"name":"option"}}],[11,"strategy","","The `strategy` parameter defines the approach for how to represent shapes at indexing and search time. It also influences the capabilities available so it is recommended to let Elasticsearch set this parameter automatically. There are two strategies available: `recursive` and `term`. Term strategy supports point types only (the `points_only` parameter will be automatically set to `true`) while `Recursive` strategy supports all shape types.",30,{"inputs":[],"output":{"name":"option"}}],[11,"distance_error_pct","","Used as a hint to the `PrefixTree` about how precise it should be. Defaults to `0.025` (2.5%) with `0.5` as the maximum supported value.",30,{"inputs":[],"output":{"name":"option"}}],[11,"orientation","","Setting this parameter in the `geo_shape` mapping explicitly sets vertex order for the coordinate list of a `geo_shape` field but can be overridden in each individual GeoJSON document.",30,{"inputs":[],"output":{"name":"option"}}],[11,"points_only","","Setting this option to `true` (defaults to `false`) configures the `geo_shape` field type for point shapes only (NOTE: Multi-Points are not yet supported). This optimizes index and search performance for the geohash and quadtree when it is known that only points will be indexed. At present `geo_shape` queries can not be executed on geo_point field types. This option bridges the gap by improving point performance on a `geo_shape` field so that geo_shape queries are optimal on a point only field.",30,{"inputs":[],"output":{"name":"option"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"defaultgeoshapemapping"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"defaultgeoshapemapping"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"defaultgeoshapemapping"}}],[11,"serialize","","",27,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",29,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","elastic_types::geo::shape","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"geoshape"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"geoshape"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"geoshape"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `GeoShape` from the given `Geometry`.",32,{"inputs":[{"name":"i"}],"output":{"name":"geoshape"}}],[11,"remap","","Change the mapping of this geo shape.",32,{"inputs":[{"name":"self"}],"output":{"name":"geoshape"}}],[11,"from","","",32,{"inputs":[{"name":"geometry"}],"output":{"name":"self"}}],[11,"as_ref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"geometry"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"geometry"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"geometry"}],"output":{"name":"bool"}}],[11,"deref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"geometry"}}],[11,"serialize","","",32,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",32,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"prelude","","Includes all types for the `geo_shape` types.",null,null],[3,"GeoShape","elastic_types::geo::shape::prelude","Geo shape type with a given mapping.",null,null],[0,"mapping","elastic_types::geo","Common mapping for the Elasticsearch `geo` types.",null,null],[3,"Distance","elastic_types::geo::mapping","A distance value paired with a unit of measure.",null,null],[12,"0","","",33,null],[12,"1","","",33,null],[4,"DistanceUnit","","A unit of measure for distance.",null,null],[13,"Inches","","For `in`.",34,null],[13,"Yards","","For `yd`.",34,null],[13,"Miles","","For `mi`.",34,null],[13,"Kilometers","","For `km`.",34,null],[13,"Meters","","For `m`.",34,null],[13,"Centimeters","","For `cm`.",34,null],[13,"Millimeters","","For `mm`.",34,null],[11,"to_string","","",33,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"serialize","","",33,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[0,"prelude","elastic_types::geo","Includes all types for the `geo_point` and `geo_shape` types.",null,null],[0,"ip","elastic_types","Implementation of the Elasticsearch `ip` type.",null,null],[3,"Ip","elastic_types::ip","An Elasticsearch `ip` with a mapping.",null,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"ip"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"ip"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"ip"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Ip` with the given mapping.",35,{"inputs":[{"name":"i"}],"output":{"name":"ip"}}],[11,"remap","","Change the mapping of this ip.",35,{"inputs":[{"name":"self"}],"output":{"name":"ip"}}],[11,"from","","",35,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"self"}}],[11,"as_ref","","",35,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"deref","","",35,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"serialize","","",35,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",35,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"mapping","","Mapping for the Elasticsearch `ip` type.",null,null],[3,"DefaultIpMapping","elastic_types::ip::mapping","Default mapping for `geo_shape`.",null,null],[17,"IP_DATATYPE","","Elasticsearch datatype name.",null,null],[8,"IpMapping","","The base requirements for mapping a `ip` type.",null,null],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",36,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",36,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",36,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a string value which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",36,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",36,{"inputs":[],"output":{"name":"option"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"defaultipmapping"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",37,{"inputs":[],"output":{"name":"defaultipmapping"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"defaultipmapping"}}],[0,"prelude","elastic_types::ip","Includes all types for the `ip` type.",null,null],[3,"Ip","elastic_types::ip::prelude","An Elasticsearch `ip` with a mapping.",null,null],[0,"number","elastic_types","Implementation of the Elasticsearch `number` types.",null,null],[3,"Integer","elastic_types::number","Number type with a given mapping.",null,null],[3,"Long","","Number type with a given mapping.",null,null],[3,"Short","","Number type with a given mapping.",null,null],[3,"Byte","","Number type with a given mapping.",null,null],[3,"Float","","Number type with a given mapping.",null,null],[3,"Double","","Number type with a given mapping.",null,null],[0,"mapping","","Mapping for the Elasticsearch `number` types.",null,null],[3,"DefaultIntegerMapping","elastic_types::number::mapping","Default mapping for an `integer` type.",null,null],[3,"DefaultLongMapping","","Default mapping for a `long` type.",null,null],[3,"DefaultShortMapping","","Default mapping for a `short` type.",null,null],[3,"DefaultByteMapping","","Default mapping for a `byte` type.",null,null],[3,"DefaultFloatMapping","","Default mapping for a `float` type.",null,null],[3,"DefaultDoubleMapping","","Default mapping for a `double` type.",null,null],[17,"INTEGER_DATATYPE","","Elasticsearch datatype name.",null,null],[17,"LONG_DATATYPE","","Elasticsearch datatype name.",null,null],[17,"SHORT_DATATYPE","","Elasticsearch datatype name.",null,null],[17,"BYTE_DATATYPE","","Elasticsearch datatype name.",null,null],[17,"DOUBLE_DATATYPE","","Elasticsearch datatype name.",null,null],[17,"FLOAT_DATATYPE","","Elasticsearch datatype name.",null,null],[8,"IntegerMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",38,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",38,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",38,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",38,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",38,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",38,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",38,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",38,{"inputs":[],"output":{"name":"option"}}],[8,"LongMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",39,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",39,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",39,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",39,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",39,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",39,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",39,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",39,{"inputs":[],"output":{"name":"option"}}],[8,"ShortMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",40,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",40,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",40,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",40,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",40,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",40,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",40,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",40,{"inputs":[],"output":{"name":"option"}}],[8,"ByteMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",41,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",41,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",41,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",41,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",41,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",41,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",41,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",41,{"inputs":[],"output":{"name":"option"}}],[8,"FloatMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",42,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",42,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",42,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",42,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",42,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",42,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",42,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",42,{"inputs":[],"output":{"name":"option"}}],[8,"DoubleMapping","","Base `number` mapping.",null,null],[11,"coerce","","Try to convert strings to numbers and truncate fractions for integers. Accepts `true` (default) and `false`.",43,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",43,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",43,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_malformed","","If `true`, malformed numbers are ignored. If `false` (default), malformed numbers throw an exception and reject the whole document.",43,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts `true` or `false`. Defaults to false if index is set to no, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",43,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",43,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a numeric value of the same type as the field which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",43,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts true or false (default).",43,{"inputs":[],"output":{"name":"option"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"defaultintegermapping"}],"output":{"name":"bool"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",44,{"inputs":[],"output":{"name":"defaultintegermapping"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"defaultintegermapping"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"defaultlongmapping"}],"output":{"name":"bool"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",45,{"inputs":[],"output":{"name":"defaultlongmapping"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"defaultlongmapping"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"defaultshortmapping"}],"output":{"name":"bool"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",46,{"inputs":[],"output":{"name":"defaultshortmapping"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"defaultshortmapping"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"defaultbytemapping"}],"output":{"name":"bool"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"defaultbytemapping"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"defaultbytemapping"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"defaultfloatmapping"}],"output":{"name":"bool"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",48,{"inputs":[],"output":{"name":"defaultfloatmapping"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"defaultfloatmapping"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"defaultdoublemapping"}],"output":{"name":"bool"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",49,{"inputs":[],"output":{"name":"defaultdoublemapping"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"defaultdoublemapping"}}],[11,"fmt","elastic_types::number","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",50,{"inputs":[],"output":{"name":"integer"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"bool"}}],[11,"new","","Creates a new number with the given mapping.",50,{"inputs":[{"name":"i"}],"output":{"name":"integer"}}],[11,"remap","","Change the mapping of this number.",50,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"from","","",50,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"as_ref","","",50,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"deref","","",50,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"serialize","","",50,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",50,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"long"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"long"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"long"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"long"}],"output":{"name":"bool"}}],[11,"new","","Creates a new number with the given mapping.",51,{"inputs":[{"name":"i"}],"output":{"name":"long"}}],[11,"remap","","Change the mapping of this number.",51,{"inputs":[{"name":"self"}],"output":{"name":"long"}}],[11,"from","","",51,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"as_ref","","",51,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"deref","","",51,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"serialize","","",51,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",51,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",52,{"inputs":[],"output":{"name":"short"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"short"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"short"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"short"}],"output":{"name":"bool"}}],[11,"new","","Creates a new number with the given mapping.",52,{"inputs":[{"name":"i"}],"output":{"name":"short"}}],[11,"remap","","Change the mapping of this number.",52,{"inputs":[{"name":"self"}],"output":{"name":"short"}}],[11,"from","","",52,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"as_ref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"deref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"serialize","","",52,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",52,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",53,{"inputs":[],"output":{"name":"byte"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"byte"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"byte"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"byte"}],"output":{"name":"bool"}}],[11,"new","","Creates a new number with the given mapping.",53,{"inputs":[{"name":"i"}],"output":{"name":"byte"}}],[11,"remap","","Change the mapping of this number.",53,{"inputs":[{"name":"self"}],"output":{"name":"byte"}}],[11,"from","","",53,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"as_ref","","",53,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"deref","","",53,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"serialize","","",53,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",53,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",54,{"inputs":[],"output":{"name":"float"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"float"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"float"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"float"}],"output":{"name":"bool"}}],[11,"new","","Creates a new number with the given mapping.",54,{"inputs":[{"name":"i"}],"output":{"name":"float"}}],[11,"remap","","Change the mapping of this number.",54,{"inputs":[{"name":"self"}],"output":{"name":"float"}}],[11,"from","","",54,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"as_ref","","",54,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"deref","","",54,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"serialize","","",54,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",54,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",55,{"inputs":[],"output":{"name":"double"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"double"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"double"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"double"}],"output":{"name":"bool"}}],[11,"new","","Creates a new number with the given mapping.",55,{"inputs":[{"name":"i"}],"output":{"name":"double"}}],[11,"remap","","Change the mapping of this number.",55,{"inputs":[{"name":"self"}],"output":{"name":"double"}}],[11,"from","","",55,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"as_ref","","",55,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"deref","","",55,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"serialize","","",55,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",55,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"prelude","","Includes all types for the `number` type.",null,null],[3,"Integer","elastic_types::number::prelude","Number type with a given mapping.",null,null],[3,"Long","","Number type with a given mapping.",null,null],[3,"Short","","Number type with a given mapping.",null,null],[3,"Byte","","Number type with a given mapping.",null,null],[3,"Float","","Number type with a given mapping.",null,null],[3,"Double","","Number type with a given mapping.",null,null],[0,"string","elastic_types","Implementation of the Elasticsearch `keyword` and `text` types.",null,null],[3,"Keyword","elastic_types::string","An Elasticsearch `keyword` with a mapping.",null,null],[3,"Text","","An Elasticsearch `text` field with a mapping.",null,null],[0,"keyword","","Implementation of the Elasticsearch `keyword` type.",null,null],[3,"Keyword","elastic_types::string::keyword","An Elasticsearch `keyword` with a mapping.",null,null],[0,"mapping","","Mapping for the Elasticsearch `keyword` type.",null,null],[3,"DefaultKeywordMapping","elastic_types::string::keyword::mapping","Default mapping for `bool`.",null,null],[3,"KeywordFieldMapping","","A multi-field string mapping.",null,null],[12,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",56,null],[12,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",56,null],[12,"eager_global_ordinals","","Should global ordinals be loaded eagerly on refresh? Accepts `true` or `false` (default). Enabling this is a good idea on fields that are frequently used for (significant) terms aggregations.",56,null],[12,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",56,null],[12,"ignore_above","","The maximum number of characters to index. Any characters over this length will be ignored.",56,null],[12,"index","","Should the field be searchable? Accepts `true` (default) or `false`.",56,null],[12,"index_options","","What information should be stored in the index, for search and highlighting purposes. Defaults to `Positions`.",56,null],[12,"norms","","Whether field-length should be taken into account when scoring queries. Accepts `true` (default) or `false`.",56,null],[12,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",56,null],[12,"search_analyzer","","The analyzer that should be used at search time on analyzed fields. Defaults to the analyzer setting.",56,null],[12,"similarity","","Which scoring algorithm or similarity should be used. Defaults to `\"classic\"`, which uses TF/IDF.",56,null],[17,"KEYWORD_DATATYPE","","Elasticsearch datatype name.",null,null],[8,"KeywordMapping","","The base requirements for mapping a `string` type.",null,null],[11,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",57,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",57,{"inputs":[],"output":{"name":"option"}}],[11,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",57,{"inputs":[],"output":{"name":"option"}}],[11,"eager_global_ordinals","","Should global ordinals be loaded eagerly on refresh? Accepts `true` or `false` (default). Enabling this is a good idea on fields that are frequently used for (significant) terms aggregations.",57,{"inputs":[],"output":{"name":"option"}}],[11,"fields","","Multi-fields allow the same string value to be indexed in multiple ways for different purposes, such as one field for search and a multi-field for sorting and aggregations, or the same string value analyzed by different analyzers.",57,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",57,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_above","","The maximum number of characters to index. Any characters over this length will be ignored.",57,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `true` (default) or `false`.",57,{"inputs":[],"output":{"name":"option"}}],[11,"index_options","","What information should be stored in the index, for search and highlighting purposes. Defaults to `Positions`.",57,{"inputs":[],"output":{"name":"option"}}],[11,"norms","","Whether field-length should be taken into account when scoring queries. Accepts `true` (default) or `false`.",57,{"inputs":[],"output":{"name":"option"}}],[11,"null_value","","Accepts a `string` value which is substituted for any explicit null values. Defaults to `null`, which means the field is treated as missing.",57,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",57,{"inputs":[],"output":{"name":"option"}}],[11,"search_analyzer","","The analyzer that should be used at search time on analyzed fields. Defaults to the analyzer setting.",57,{"inputs":[],"output":{"name":"option"}}],[11,"similarity","","Which scoring algorithm or similarity should be used. Defaults to `\"classic\"`, which uses TF/IDF.",57,{"inputs":[],"output":{"name":"option"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"defaultkeywordmapping"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",58,{"inputs":[],"output":{"name":"defaultkeywordmapping"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"defaultkeywordmapping"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",56,{"inputs":[],"output":{"name":"keywordfieldmapping"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"keywordfieldmapping"}}],[11,"serialize","","",56,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","elastic_types::string","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"default","","",59,{"inputs":[],"output":{"name":"keyword"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Keyword` with the given mapping.",59,{"inputs":[{"name":"i"}],"output":{"name":"keyword"}}],[11,"remap","","Change the mapping of this string.",59,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"from","","",59,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",59,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"deref","","",59,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"as_ref","","",59,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"serialize","","",59,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",59,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"prelude","elastic_types::string::keyword","Includes all types for the `keyword` type.",null,null],[3,"Keyword","elastic_types::string::keyword::prelude","An Elasticsearch `keyword` with a mapping.",null,null],[0,"text","elastic_types::string","Implementation of the Elasticsearch `text` type.",null,null],[3,"Text","elastic_types::string::text","An Elasticsearch `text` field with a mapping.",null,null],[0,"mapping","","Mapping for the Elasticsearch `text` type.",null,null],[3,"DefaultTextMapping","elastic_types::string::text::mapping","Default mapping for `bool`.",null,null],[3,"FieldDataFrequencyFilter","","Fielddata for term frequency as a percentage range.",null,null],[12,"min","","The min frequency percentage.",60,null],[12,"max","","The max frequency percentage.",60,null],[12,"min_segment_size","","The minimum number of docs a segment should contain.",60,null],[3,"TextFieldMapping","","A multi-field string mapping.",null,null],[12,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",61,null],[12,"eager_global_ordinals","","Should global ordinals be loaded eagerly on refresh? Accepts `true` or `false` (default). Enabling this is a good idea on fields that are frequently used for (significant) terms aggregations.",61,null],[12,"fielddata","","Can the field use in-memory fielddata for sorting, aggregations, or scripting? Accepts `true` or `false` (default).",61,null],[12,"fielddata_frequency_filter","","Expert settings which allow to decide which values to load in memory when `fielddata` is enabled. By default all values are loaded.",61,null],[12,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",61,null],[12,"ignore_above","","The maximum number of characters to index. Any characters over this length will be ignored.",61,null],[12,"index","","Should the field be searchable? Accepts `true` (default) or `false`.",61,null],[12,"index_options","","What information should be stored in the index, for search and highlighting purposes. Defaults to `Positions`.",61,null],[12,"norms","","Whether field-length should be taken into account when scoring queries. Accepts `true` (default) or `false`.",61,null],[12,"position_increment_gap","","The number of fake term position which should be inserted between each element of an array of strings. Defaults to the `position_increment_gap` configured on the analyzer which defaults to `100`. `100` was chosen because it prevents phrase queries with reasonably large slops (less than `100`) from matching terms across field values.",61,null],[12,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",61,null],[12,"search_analyzer","","The analyzer that should be used at search time on analyzed fields. Defaults to the analyzer setting.",61,null],[12,"search_quote_analyzer","","The analyzer that should be used at search time when a phrase is encountered. Defaults to the `search_analyzer` setting.",61,null],[12,"similarity","","Which scoring algorithm or similarity should be used. Defaults to `\"classic\"`, which uses TF/IDF.",61,null],[12,"term_vector","","Whether term vectors should be stored for an `analyzed` field. Defaults to `No`.",61,null],[4,"TermVector","","Term vectors contain information about the terms produced by the analysis process.",null,null],[13,"No","","No term vectors are stored. (default)",62,null],[13,"Yes","","Just the terms in the field are stored.",62,null],[13,"WithPositions","","Terms and positions are stored.",62,null],[13,"WithOffsets","","Terms and character offsets are stored.",62,null],[13,"WithPositionsOffsets","","Terms, positions, and character offsets are stored.",62,null],[17,"TEXT_DATATYPE","","Elasticsearch datatype name.",null,null],[8,"TextMapping","","The base requirements for mapping a `string` type.",null,null],[11,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",63,{"inputs":[],"output":{"name":"option"}}],[11,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",63,{"inputs":[],"output":{"name":"option"}}],[11,"eager_global_ordinals","","Should global ordinals be loaded eagerly on refresh? Accepts `true` or `false` (default). Enabling this is a good idea on fields that are frequently used for (significant) terms aggregations.",63,{"inputs":[],"output":{"name":"option"}}],[11,"fielddata","","Can the field use in-memory fielddata for sorting, aggregations, or scripting? Accepts `true` or `false` (default).",63,{"inputs":[],"output":{"name":"option"}}],[11,"fielddata_frequency_filter","","Expert settings which allow to decide which values to load in memory when `fielddata` is enabled. By default all values are loaded.",63,{"inputs":[],"output":{"name":"option"}}],[11,"fields","","Multi-fields allow the same string value to be indexed in multiple ways for different purposes, such as one field for search and a multi-field for sorting and aggregations, or the same string value analyzed by different analyzers.",63,{"inputs":[],"output":{"name":"option"}}],[11,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",63,{"inputs":[],"output":{"name":"option"}}],[11,"ignore_above","","The maximum number of characters to index. Any characters over this length will be ignored.",63,{"inputs":[],"output":{"name":"option"}}],[11,"index","","Should the field be searchable? Accepts `true` (default) or `false`.",63,{"inputs":[],"output":{"name":"option"}}],[11,"index_options","","What information should be stored in the index, for search and highlighting purposes. Defaults to `Positions`.",63,{"inputs":[],"output":{"name":"option"}}],[11,"norms","","Whether field-length should be taken into account when scoring queries. Accepts `true` (default) or `false`.",63,{"inputs":[],"output":{"name":"option"}}],[11,"position_increment_gap","","The number of fake term position which should be inserted between each element of an array of strings. Defaults to the `position_increment_gap` configured on the analyzer which defaults to `100`. `100` was chosen because it prevents phrase queries with reasonably large slops (less than `100`) from matching terms across field values.",63,{"inputs":[],"output":{"name":"option"}}],[11,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",63,{"inputs":[],"output":{"name":"option"}}],[11,"search_analyzer","","The analyzer that should be used at search time on analyzed fields. Defaults to the analyzer setting.",63,{"inputs":[],"output":{"name":"option"}}],[11,"search_quote_analyzer","","The analyzer that should be used at search time when a phrase is encountered. Defaults to the `search_analyzer` setting.",63,{"inputs":[],"output":{"name":"option"}}],[11,"similarity","","Which scoring algorithm or similarity should be used. Defaults to `\"classic\"`, which uses TF/IDF.",63,{"inputs":[],"output":{"name":"option"}}],[11,"term_vector","","Whether term vectors should be stored for an `analyzed` field. Defaults to `No`.",63,{"inputs":[],"output":{"name":"option"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"defaulttextmapping"}],"output":{"name":"bool"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",64,{"inputs":[],"output":{"name":"defaulttextmapping"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"defaulttextmapping"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"termvector"}}],[11,"serialize","","",62,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",60,{"inputs":[],"output":{"name":"fielddatafrequencyfilter"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"fielddatafrequencyfilter"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"fielddatafrequencyfilter"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"fielddatafrequencyfilter"}}],[11,"serialize","","",60,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"textfieldmapping"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"textfieldmapping"}}],[11,"serialize","","",61,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","elastic_types::string","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"text"}}],[11,"default","","",65,{"inputs":[],"output":{"name":"text"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"text"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"text"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Text` with the given mapping.",65,{"inputs":[{"name":"i"}],"output":{"name":"text"}}],[11,"remap","","Change the mapping of this string.",65,{"inputs":[{"name":"self"}],"output":{"name":"text"}}],[11,"from","","",65,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",65,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"deref","","",65,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"as_ref","","",65,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"serialize","","",65,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",65,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"prelude","elastic_types::string::text","Includes all types for the `text` type.",null,null],[3,"Text","elastic_types::string::text::prelude","An Elasticsearch `text` field with a mapping.",null,null],[0,"mapping","elastic_types::string","Common mapping for the Elasticsearch `string` types.",null,null],[3,"DefaultStringMapping","elastic_types::string::mapping","Default mapping for `String`.",null,null],[3,"ElasticTokenCountFieldMapping","","A multi-field string mapping for a token count.",null,null],[12,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",66,null],[12,"boost","","Field-level index time boosting. Accepts a floating point number, defaults to `1.0`.",66,null],[12,"doc_values","","Should the field be stored on disk in a column-stride fashion, so that it can later be used for sorting, aggregations, or scripting? Accepts `true` (default) or `false`.",66,null],[12,"index","","Should the field be searchable? Accepts `not_analyzed` (default) and `no`.",66,null],[12,"include_in_all","","Whether or not the field value should be included in the `_all` field? Accepts true or false. Defaults to `false` if index is set to `no`, or if a parent object field sets `include_in_all` to false. Otherwise defaults to `true`.",66,null],[12,"precision_step","","Controls the number of extra terms that are indexed to make range queries faster. Defaults to `32`.",66,null],[12,"store","","Whether the field value should be stored and retrievable separately from the `_source` field. Accepts `true` or `false` (default).",66,null],[3,"ElasticCompletionFieldMapping","","A multi-field string mapping for a completion suggester.",null,null],[12,"analyzer","","The analyzer which should be used for analyzed string fields, both at index-time and at search-time (unless overridden by the `search_analyzer`). Defaults to the default index analyzer, or the `standard` analyzer.",67,null],[12,"search_analyzer","","The search analyzer to use, defaults to value of analyzer.",67,null],[12,"payloads","","Enables the storing of payloads, defaults to `false`.",67,null],[12,"preserve_separators","","Preserves the separators, defaults to `true`. If disabled, you could find a field starting with Foo Fighters, if you suggest for foof.",67,null],[12,"preserve_position_increments","","Enables position increments, defaults to `true`. If disabled and using stopwords analyzer, you could get a field starting with The Beatles, if you suggest for b. > Note: You could also achieve this by indexing two inputs, Beatles and The Beatles, no need to change a simple analyzer, if you are able to enrich your data.",67,null],[12,"max_input_length","","Limits the length of a single input, defaults to `50` `UTF-16` code points. This limit is only used at index time to reduce the total number of characters per input string in order to prevent massive inputs from bloating the underlying datastructure. The most usecases won’t be influenced by the default value since prefix completions hardly grow beyond prefixes longer than a handful of characters. (Old name \"max_input_len\" is deprecated)",67,null],[4,"IndexOptions","","The `index_options` parameter controls what information is added to the inverted index, for search and highlighting purposes.",null,null],[13,"Docs","","Only the doc number is indexed. Can answer the question Does this term exist in this field?",68,null],[13,"Freqs","","Doc number and term frequencies are indexed. Term frequencies are used to score repeated terms higher than single terms.",68,null],[13,"Positions","","Doc number, term frequencies, and term positions (or order) are indexed. Positions can be used for proximity or phrase queries.",68,null],[13,"Offsets","","Doc number, term frequencies, positions, and start and end character offsets (which map the term back to the original string) are indexed. Offsets are used by the postings highlighter.",68,null],[4,"StringField","","A string sub-field type.",null,null],[13,"TokenCount","","A `token_count` sub field.",69,null],[13,"Completion","","A `completion` suggester sub field.",69,null],[13,"Keyword","","A `keyword` sub field.",69,null],[13,"Text","","A `text` sub field.",69,null],[17,"TOKENCOUNT_DATATYPE","","Elasticsearch datatype name.",null,null],[17,"COMPLETION_DATATYPE","","Elasticsearch datatype name.",null,null],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"defaultstringmapping"}],"output":{"name":"bool"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",70,{"inputs":[],"output":{"name":"defaultstringmapping"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"defaultstringmapping"}}],[11,"fields","","",70,{"inputs":[],"output":{"name":"option"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"indexoptions"}}],[11,"serialize","","",68,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"stringfield"}}],[11,"serialize","","",69,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",66,{"inputs":[],"output":{"name":"elastictokencountfieldmapping"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"elastictokencountfieldmapping"}}],[11,"serialize","","",66,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",67,{"inputs":[],"output":{"name":"elasticcompletionfieldmapping"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"elasticcompletionfieldmapping"}}],[11,"serialize","","",67,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[0,"prelude","elastic_types::string","Includes all types for the `string` types.",null,null],[0,"prelude","elastic_types","Includes all data types.",null,null],[11,"eq","elastic_types::date","",71,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}]],"paths":[[4,"Dynamic"],[8,"DocumentType"],[8,"DocumentMapping"],[8,"PropertiesMapping"],[3,"Document"],[8,"Datelike"],[8,"Timelike"],[8,"DateMapping"],[3,"DefaultDateMapping"],[3,"ParseError"],[3,"ChronoFormat"],[3,"BasicDateTimeNoMillis"],[3,"BasicDateTime"],[3,"EpochMillis"],[3,"Date"],[8,"DateFormat"],[8,"BooleanMapping"],[3,"DefaultBooleanMapping"],[3,"Boolean"],[8,"GeoPointMapping"],[3,"DefaultGeoPointMapping"],[3,"GeoPoint"],[3,"GeoPointObject"],[3,"GeoPointString"],[3,"GeoPointHash"],[3,"GeoPointArray"],[8,"GeoPointFormat"],[4,"Tree"],[4,"Strategy"],[4,"Orientation"],[8,"GeoShapeMapping"],[3,"DefaultGeoShapeMapping"],[3,"GeoShape"],[3,"Distance"],[4,"DistanceUnit"],[3,"Ip"],[8,"IpMapping"],[3,"DefaultIpMapping"],[8,"IntegerMapping"],[8,"LongMapping"],[8,"ShortMapping"],[8,"ByteMapping"],[8,"FloatMapping"],[8,"DoubleMapping"],[3,"DefaultIntegerMapping"],[3,"DefaultLongMapping"],[3,"DefaultShortMapping"],[3,"DefaultByteMapping"],[3,"DefaultFloatMapping"],[3,"DefaultDoubleMapping"],[3,"Integer"],[3,"Long"],[3,"Short"],[3,"Byte"],[3,"Float"],[3,"Double"],[3,"KeywordFieldMapping"],[8,"KeywordMapping"],[3,"DefaultKeywordMapping"],[3,"Keyword"],[3,"FieldDataFrequencyFilter"],[3,"TextFieldMapping"],[4,"TermVector"],[8,"TextMapping"],[3,"DefaultTextMapping"],[3,"Text"],[3,"ElasticTokenCountFieldMapping"],[3,"ElasticCompletionFieldMapping"],[4,"IndexOptions"],[4,"StringField"],[3,"DefaultStringMapping"],[6,"ChronoDateTime"]]};
searchIndex["elastic_types_derive"] = {"doc":"Elasticsearch Core Types Codegen","items":[[5,"derive_elastic_type","elastic_types_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_date_format","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["elastic_types_derive_internals"] = {"doc":"Elasticsearch Core Types Codegen","items":[[0,"elastic_type","elastic_types_derive_internals","",null,null],[4,"DeriveElasticTypeError","elastic_types_derive_internals::elastic_type","",null,null],[13,"InvalidInput","","",0,null],[5,"expand_derive","","Derive `DocumentType` for the given input.",null,{"inputs":[{"name":"tokens"},{"name":"macroinput"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"date_format","elastic_types_derive_internals","",null,null],[4,"DeriveDateFormatError","elastic_types_derive_internals::date_format","",null,null],[13,"InvalidInput","","",1,null],[13,"MissingFormat","","",1,null],[13,"InvalidFormat","","",1,null],[5,"expand_derive","","Derive `DateFormat` for the given input.",null,{"inputs":[{"name":"tokens"},{"name":"macroinput"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"nomerror"}],"output":{"name":"derivedateformaterror"}}]],"paths":[[4,"DeriveElasticTypeError"],[4,"DeriveDateFormatError"]]};
searchIndex["error_chain"] = {"doc":"A library for consistent and reliable error handling","items":[[3,"Backtrace","error_chain","Representation of an owned and self-contained backtrace.",null,null],[3,"ErrorChainIter","","Iterator over the error chain using the `Error::cause()` method.",null,null],[12,"0","","",0,null],[0,"example_generated","","This modules show an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",null,null],[3,"Error","error_chain::example_generated","The Error type.",null,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",1,null],[13,"Inner","","Link to another `ErrorChain`.",1,null],[13,"Io","","Link to a `std::error::Error` type.",1,null],[13,"Custom","","A custom error kind.",1,null],[0,"inner","","Another code generated by the macro.",null,null],[3,"Error","error_chain::example_generated::inner","The Error type.",null,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",2,null],[6,"Result","","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",4,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",4,null],[11,"kind","","",4,null],[11,"iter","","",4,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extract_backtrace","","",4,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",4,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",4,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",4,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"deref","","",4,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[6,"Result","error_chain::example_generated","Convenient wrapper around `std::Result`.",null,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",6,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",6,null],[11,"kind","","",6,null],[11,"iter","","",6,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extract_backtrace","","",6,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",6,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",6,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",6,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"deref","","",6,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[8,"ExitCode","error_chain","Represents a value that can be used as the exit status of the process. See `quick_main!`.",null,null],[10,"code","","Returns the value to use as the exit status.",7,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[8,"ChainedError","","This trait is implemented on all the errors generated by the `error_chain` macro.",null,null],[16,"ErrorKind","","Associated kind type.",8,null],[10,"from_kind","","Constructs an error from a kind, and generates a backtrace.",8,null],[10,"kind","","Returns the kind of the error.",8,null],[10,"iter","","Iterates over the error chain.",8,{"inputs":[{"name":"self"}],"output":{"name":"errorchainiter"}}],[10,"backtrace","","Returns the backtrace associated with this error.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[14,"quick_error","","",null,null],[14,"error_chain_processed","","Prefer to use `error_chain` instead of this macro.",null,null],[14,"error_chain","","This macro is used for handling of duplicated and out-of-order fields. For the exact rules, see `error_chain_processed`.",null,null],[14,"quick_main","","Convenient wrapper to be able to use `try!` and such in the main. You can use it with a separated function:",null,null],[14,"bail","","Exits a function early with an error",null,null],[11,"new","","Captures a backtrace at the callsite of this function, returning an owned representation.",9,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",9,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",9,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from","","",9,{"inputs":[{"name":"vec"}],"output":{"name":"backtrace"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"backtrace"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"backtrace"}}]],"paths":[[3,"ErrorChainIter"],[4,"ErrorKind"],[4,"ErrorKind"],[8,"ResultExt"],[3,"Error"],[8,"ResultExt"],[3,"Error"],[8,"ExitCode"],[8,"ChainedError"],[3,"Backtrace"]]};
searchIndex["foreign_types"] = {"doc":"A framework for Rust wrappers over C APIs.","items":[[3,"Opaque","foreign_types","An opaque type used to define `ForeignTypeRef` types.",null,null],[8,"ForeignType","","A type implemented by wrappers over foreign types.",null,null],[16,"CType","","The raw C type.",0,null],[16,"Ref","","The type representing a reference to this type.",0,null],[10,"from_ptr","","Constructs an instance of this type from its raw type.",0,null],[10,"as_ptr","","Returns a raw pointer to the wrapped value.",0,null],[8,"ForeignTypeRef","","A trait implemented by types which reference borrowed foreign types.",null,null],[16,"CType","","The raw C type.",1,null],[11,"from_ptr","","Constructs a shared instance of this type from its raw type.",1,null],[11,"from_ptr_mut","","Constructs a mutable reference of this type from its raw type.",1,null],[11,"as_ptr","","Returns a raw pointer to the wrapped value.",1,null],[14,"foreign_type","","A macro to easily define wrappers for foreign types.",null,null]],"paths":[[8,"ForeignType"],[8,"ForeignTypeRef"]]};
searchIndex["geo"] = {"doc":"","items":[[3,"Coordinate","geo","",null,null],[12,"x","","",0,null],[12,"y","","",0,null],[3,"Bbox","","",null,null],[12,"xmin","","",1,null],[12,"xmax","","",1,null],[12,"ymin","","",1,null],[12,"ymax","","",1,null],[3,"Point","","",null,null],[12,"0","","",2,null],[3,"MultiPoint","","",null,null],[12,"0","","",3,null],[3,"LineString","","",null,null],[12,"0","","",4,null],[3,"MultiLineString","","",null,null],[12,"0","","",5,null],[3,"Polygon","","",null,null],[12,"exterior","","",6,null],[12,"interiors","","",6,null],[3,"MultiPolygon","","",null,null],[12,"0","","",7,null],[3,"GeometryCollection","","",null,null],[12,"0","","",8,null],[4,"Geometry","","",null,null],[13,"Point","","",9,null],[13,"LineString","","",9,null],[13,"Polygon","","",9,null],[13,"MultiPoint","","",9,null],[13,"MultiLineString","","",9,null],[13,"MultiPolygon","","",9,null],[13,"GeometryCollection","","",9,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"coordinate"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"coordinate"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"coordinate"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"bbox"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"bbox"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bbox"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new point.",2,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"point"}}],[11,"x","","Returns the x/horizontal component of the point.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_x","","Sets the x/horizontal component of the point.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"point"}}],[11,"y","","Returns the y/vertical component of the point.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_y","","Sets the y/vertical component of the point.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"point"}}],[11,"lng","","Returns the longitude/horizontal component of the point.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_lng","","Sets the longitude/horizontal component of the point.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"point"}}],[11,"lat","","Returns the latitude/vertical component of the point.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_lat","","Sets the latitude/vertical component of the point.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"point"}}],[11,"dot","","Returns the dot product of the two points: `dot = x1 * x2 + y1 * y2`",2,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"t"}}],[11,"neg","","Returns a point with the x and y components negated.",2,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"add","","Add a point to the given point.",2,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"sub","","Subtract a point from the given point.",2,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"point"}}],[11,"add","","Add a boundingox to the given boundingbox.",1,{"inputs":[{"name":"self"},{"name":"bbox"}],"output":{"name":"bbox"}}],[11,"add_assign","","Add a boundingox to the given boundingbox.",1,{"inputs":[{"name":"self"},{"name":"bbox"}],"output":null}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"multipoint"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"multipoint"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"multipoint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"linestring"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"linestring"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"linestring"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"multilinestring"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"multilinestring"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"multilinestring"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"polygon"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"polygon"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"polygon"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new polygon.",6,{"inputs":[{"name":"linestring"},{"name":"vec"}],"output":{"name":"polygon"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"multipolygon"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"multipolygon"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"multipolygon"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"geometrycollection"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"geometrycollection"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"geometrycollection"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"geometry"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"geometry"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"geometry"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"algorithm","","This module includes all the functions of geometric calculations",null,null],[0,"centroid","geo::algorithm","Calculation of the centroid.",null,null],[8,"Centroid","geo::algorithm::centroid","Calculation of the centroid.",null,null],[10,"centroid","","Calculation the centroid, see: https://en.wikipedia.org/wiki/Centroid",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"centroid","geo","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"centroid","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"centroid","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"centroid","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"contains","geo::algorithm","Checks if the geometry A is completely inside the B geometry.",null,null],[8,"Contains","geo::algorithm::contains","Checks if the geometry A is completely inside the B geometry.",null,null],[10,"contains","","Checks if the geometry A is completely inside the B geometry.",11,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"contains","geo","",2,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"contains","","",4,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"contains","","",6,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"contains","","",7,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"contains","","",6,{"inputs":[{"name":"self"},{"name":"linestring"}],"output":{"name":"bool"}}],[11,"contains","","",1,{"inputs":[{"name":"self"},{"name":"bbox"}],"output":{"name":"bool"}}],[0,"intersects","geo::algorithm","hecks if the geometry A intersects the geometry B.",null,null],[8,"Intersects","geo::algorithm::intersects","Checks if the geometry A intersects the geometry B.",null,null],[10,"intersects","","Checks if the geometry A intersects the geometry B.",12,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"intersects","geo","",4,{"inputs":[{"name":"self"},{"name":"linestring"}],"output":{"name":"bool"}}],[11,"intersects","","",6,{"inputs":[{"name":"self"},{"name":"linestring"}],"output":{"name":"bool"}}],[11,"intersects","","",1,{"inputs":[{"name":"self"},{"name":"bbox"}],"output":{"name":"bool"}}],[11,"intersects","","",1,{"inputs":[{"name":"self"},{"name":"polygon"}],"output":{"name":"bool"}}],[11,"intersects","","",6,{"inputs":[{"name":"self"},{"name":"bbox"}],"output":{"name":"bool"}}],[11,"intersects","","",6,{"inputs":[{"name":"self"},{"name":"polygon"}],"output":{"name":"bool"}}],[0,"area","geo::algorithm","Returns the area of the surface of geometry",null,null],[8,"Area","geo::algorithm::area","Calculation of the area.",null,null],[10,"area","","Area of polygon. See: https://en.wikipedia.org/wiki/Polygon",13,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"area","geo","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"area","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"area","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"length","geo::algorithm","Returns the length of a line.",null,null],[8,"Length","geo::algorithm::length","Calculation of the length",null,null],[10,"length","","Calculation the length of a Line",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"length","geo","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"length","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"distance","geo::algorithm","Returns the distance between two geometries.",null,null],[8,"Distance","geo::algorithm::distance","Returns the distance between two geometries.",null,null],[10,"distance","","Returns the distance between two geometries",15,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":{"name":"t"}}],[11,"distance","geo","",2,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"t"}}],[11,"distance","","",2,{"inputs":[{"name":"self"},{"name":"polygon"}],"output":{"name":"t"}}],[11,"distance","","",2,{"inputs":[{"name":"self"},{"name":"linestring"}],"output":{"name":"t"}}],[0,"boundingbox","geo::algorithm","Returns the Bbox of a geometry.",null,null],[8,"BoundingBox","geo::algorithm::boundingbox","Calculation of the bounding box of a geometry.",null,null],[10,"bbox","","Return a Bounding Box of a geometry",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bbox","geo","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bbox","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bbox","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bbox","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bbox","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"simplify","geo::algorithm","Simplifies a `LineString` using the Ramer-Douglas-Peucker algorithm.",null,null],[8,"Simplify","geo::algorithm::simplify","",null,null],[10,"simplify","","Returns the simplified representation of a LineString, using the Ramer–Douglas–Peucker algorithm",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"simplify","geo","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linestring"}}],[0,"simplifyvw","geo::algorithm","Simplifies a `LineString` using the Visvalingam-Whyatt algorithm.",null,null],[5,"visvalingam","geo::algorithm::simplifyvw","Simplify a line using the Visvalingam-Whyatt algorithm",null,null],[8,"SimplifyVW","","",null,null],[10,"simplifyvw","","Returns the simplified representation of a LineString, using the Visvalingam-Whyatt algorithm  ",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"simplifyvw","geo","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"linestring"}}],[7,"COORD_PRECISION","","",null,null],[8,"ToGeo","","",null,null],[10,"to_geo","","",19,{"inputs":[{"name":"self"}],"output":{"name":"geometry"}}]],"paths":[[3,"Coordinate"],[3,"Bbox"],[3,"Point"],[3,"MultiPoint"],[3,"LineString"],[3,"MultiLineString"],[3,"Polygon"],[3,"MultiPolygon"],[3,"GeometryCollection"],[4,"Geometry"],[8,"Centroid"],[8,"Contains"],[8,"Intersects"],[8,"Area"],[8,"Length"],[8,"Distance"],[8,"BoundingBox"],[8,"Simplify"],[8,"SimplifyVW"],[8,"ToGeo"]]};
searchIndex["geohash"] = {"doc":"","items":[[3,"Neighbors","geohash","",null,null],[12,"sw","","",0,null],[12,"s","","",0,null],[12,"se","","",0,null],[12,"w","","",0,null],[12,"e","","",0,null],[12,"nw","","",0,null],[12,"n","","",0,null],[12,"ne","","",0,null],[4,"Direction","","",null,null],[13,"Sw","","",1,null],[13,"S","","",1,null],[13,"Se","","",1,null],[13,"W","","",1,null],[13,"E","","",1,null],[13,"Nw","","",1,null],[13,"N","","",1,null],[13,"Ne","","",1,null],[5,"encode","","Encode latitude, longitude into geohash string",null,{"inputs":[{"name":"coordinate"},{"name":"usize"}],"output":{"name":"string"}}],[5,"decode_bbox","","Encode latitude, longitude into geohash string",null,null],[5,"decode","","Encode latitude, longitude into geohash string",null,null],[5,"neighbor","","",null,{"inputs":[{"name":"str"},{"name":"direction"}],"output":{"name":"string"}}],[5,"neighbors","","",null,{"inputs":[{"name":"str"}],"output":{"name":"neighbors"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"neighbors"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"bool"}}]],"paths":[[3,"Neighbors"],[4,"Direction"]]};
searchIndex["geojson"] = {"doc":"Examples","items":[[3,"Geometry","geojson","Geometry Objects",null,null],[12,"bbox","","",0,null],[12,"value","","",0,null],[12,"crs","","",0,null],[3,"Feature","","Feature Objects",null,null],[12,"bbox","","",1,null],[12,"crs","","",1,null],[12,"geometry","","",1,null],[12,"id","","",1,null],[12,"properties","","",1,null],[3,"FeatureCollection","","Feature Collection Objects",null,null],[12,"bbox","","",2,null],[12,"crs","","",2,null],[12,"features","","",2,null],[4,"Crs","","Coordinate Reference System Objects",null,null],[13,"Named","","Named CRS",3,null],[12,"name","geojson::Crs","",3,null],[13,"Linked","geojson","Linked CRS",3,null],[12,"href","geojson::Crs","",3,null],[12,"type_","","",3,null],[4,"GeoJson","geojson","GeoJSON Objects",null,null],[13,"Geometry","","",4,null],[13,"Feature","","",4,null],[13,"FeatureCollection","","",4,null],[4,"Value","","The underlying Geometry value",null,null],[13,"Point","","Point",5,null],[13,"MultiPoint","","MultiPoint",5,null],[13,"LineString","","LineString",5,null],[13,"MultiLineString","","MultiLineString",5,null],[13,"Polygon","","Polygon",5,null],[13,"MultiPolygon","","MultiPolygon",5,null],[13,"GeometryCollection","","GeometryCollection",5,null],[4,"Error","","Error when reading a GeoJSON object from a str or Object",null,null],[13,"BboxExpectedArray","","",6,null],[13,"BboxExpectedNumericValues","","",6,null],[13,"CrsExpectedObject","","",6,null],[13,"CrsUnknownType","","",6,null],[13,"GeoJsonExpectedObject","","",6,null],[13,"GeoJsonUnknownType","","",6,null],[13,"GeometryUnknownType","","",6,null],[13,"MalformedJson","","",6,null],[13,"PropertiesExpectedObjectOrNull","","",6,null],[13,"FeatureInvalidGeometryValue","","",6,null],[13,"ExpectedStringValue","","",6,null],[13,"ExpectedProperty","","",6,null],[13,"ExpectedF64Value","","",6,null],[13,"ExpectedArrayValue","","",6,null],[13,"ExpectedObjectValue","","",6,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"crs"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"crs"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"crs"}],"output":{"name":"bool"}}],[11,"serialize","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"geojson"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"geojson"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"geojson"}],"output":{"name":"bool"}}],[11,"from","","",4,{"inputs":[{"name":"geometry"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"feature"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"featurecollection"}],"output":{"name":"geojson"}}],[11,"serialize","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"serialize","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"geometry"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"geometry"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"geometry"}],"output":{"name":"bool"}}],[11,"new","","Returns a new `Geometry` with the specified `value`. `bbox` and `crs` will be set to `None`.",0,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"feature"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"feature"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"feature"}],"output":{"name":"bool"}}],[11,"serialize","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"featurecollection"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"featurecollection"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"featurecollection"}],"output":{"name":"bool"}}],[11,"serialize","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"point"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"multipoint"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"linestring"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"multilinestring"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"polygon"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"multipolygon"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"geometrycollection"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"geometry"}],"output":{"name":"self"}}],[6,"Bbox","","Bounding Boxes",null,null],[6,"Position","","Positions",null,null],[6,"PointType","","",null,null],[6,"LineStringType","","",null,null],[6,"PolygonType","","",null,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[3,"Geometry"],[3,"Feature"],[3,"FeatureCollection"],[4,"Crs"],[4,"GeoJson"],[4,"Value"],[4,"Error"]]};
searchIndex["httparse"] = {"doc":"httparse","items":[[3,"InvalidChunkSize","httparse","An error in parsing a chunk size.",null,null],[3,"Request","","A parsed Request.",null,null],[12,"method","","The request method, such as `GET`.",0,null],[12,"path","","The request path, such as `/about-us`.",0,null],[12,"version","","The request version, such as `HTTP/1.1`.",0,null],[12,"headers","","The request headers.",0,null],[3,"Response","","A parsed Response.",null,null],[12,"version","","The response version, such as `HTTP/1.1`.",1,null],[12,"code","","The response code, such as `200`.",1,null],[12,"reason","","The response reason-phrase, such as `OK`.",1,null],[12,"headers","","The response headers.",1,null],[3,"Header","","Represents a parsed header.",null,null],[12,"name","","The name portion of a header.",2,null],[12,"value","","The value portion of a header.",2,null],[4,"Error","","An error in parsing.",null,null],[13,"HeaderName","","Invalid byte in header name.",3,null],[13,"HeaderValue","","Invalid byte in header value.",3,null],[13,"NewLine","","Invalid byte in new line.",3,null],[13,"Status","","Invalid byte in Response status.",3,null],[13,"Token","","Invalid byte where token is required.",3,null],[13,"TooManyHeaders","","Parsed more headers than provided buffer can contain.",3,null],[13,"Version","","Invalid byte in HTTP version.",3,null],[4,"Status","","The result of a successful parse pass.",null,null],[13,"Complete","","The completed result.",4,null],[13,"Partial","","A partial result.",4,null],[5,"parse_headers","","Parse a buffer of bytes as headers.",null,null],[5,"parse_chunk_size","","Parse a buffer of bytes as a chunk size.",null,null],[6,"Result","","A Result of any parsing action.",null,null],[17,"EMPTY_HEADER","","An empty header, useful for constructing a `Header` array to pass in for parsing.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"invalidchunksize"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_complete","","Convenience method to check if status is complete.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_partial","","Convenience method to check if status is partial.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"unwrap","","Convenience method to unwrap a Complete value. Panics if the status is `Partial`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new","","Creates a new Request, using a slice of headers you allocate.",0,null],[11,"parse","","Try to parse a buffer of bytes into the Request.",0,null],[11,"new","","Creates a new `Response` using a slice of `Header`s you have allocated.",1,null],[11,"parse","","Try to parse a buffer of bytes into this `Response`.",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Request"],[3,"Response"],[3,"Header"],[4,"Error"],[4,"Status"],[3,"InvalidChunkSize"]]};
searchIndex["hyper"] = {"doc":"Hyper","items":[[3,"Url","hyper","A parsed URL record.",null,null],[3,"LanguageTag","","A language tag as described in BCP47.",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",0,null],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",0,null],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",0,null],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",0,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",0,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",0,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",0,null],[0,"client","","HTTP Client",null,null],[3,"Client","hyper::client","A Client to use additional features with Requests.",null,null],[3,"RequestBuilder","","Options for an individual Request.",null,null],[3,"ProxyConfig","","Proxy server configuration with a custom connector and TLS wrapper.",null,null],[4,"Body","","An enum of possible body types for a Request.",null,null],[13,"ChunkedBody","","A Reader does not necessarily know it's size, so it is chunked.",1,null],[13,"SizedBody","","For Readers that can know their size, like a `File`.",1,null],[13,"BufBody","","A String has a size, and uses Content-Length.",1,null],[4,"RedirectPolicy","","Behavior regarding how to handle redirects within a Client.",null,null],[13,"FollowNone","","Don't follow any redirects.",2,null],[13,"FollowAll","","Follow all redirects.",2,null],[13,"FollowIf","","Follow a redirect if the contained function returns true.",2,null],[0,"pool","","Client Connection Pooling",null,null],[3,"Pool","hyper::client::pool","The `NetworkConnector` that behaves as a connection pool used by hyper's `Client`.",null,null],[3,"Config","","Config options for the `Pool`.",null,null],[12,"max_idle","","The maximum idle connections per host.",3,null],[3,"PooledStream","","A Stream that will try to be returned to the Pool when dropped.",null,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"config"}}],[11,"new","","Creates a `Pool` with a `DefaultConnector`.",4,{"inputs":[{"name":"config"}],"output":{"name":"pool"}}],[11,"with_connector","","Creates a `Pool` with a specified `NetworkConnector`.",4,{"inputs":[{"name":"config"},{"name":"c"}],"output":{"name":"pool"}}],[11,"clear_idle","","Clear all idle connections from the Pool, closing them.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"connect","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Take the wrapped stream out of the pool completely.",5,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"read","","",5,null],[11,"write","","",5,null],[11,"flush","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peer_addr","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",5,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",5,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","",5,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_previous_response_expected_no_content","","",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"previous_response_expected_no_content","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[0,"request","hyper::client","Client Requests",null,null],[3,"Request","hyper::client::request","A client request to a remote server. The W type tracks the state of the request, Fresh vs Streaming.",null,null],[12,"url","","The target URI for this request.",6,null],[12,"version","","The HTTP version of this request.",6,null],[11,"headers","","Read the Request headers.",6,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"method","","Read the Request method.",6,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"set_write_timeout","","Set the write timeout.",6,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Set the read timeout.",6,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"with_message","","Create a new `Request<Fresh>` that will use the given `HttpMessage` for its communication with the server. This implies that the given `HttpMessage` instance has already been properly initialized by the caller (e.g. a TCP connection's already established).",6,{"inputs":[{"name":"method"},{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"new","","Create a new client request.",6,{"inputs":[{"name":"method"},{"name":"url"}],"output":{"name":"result"}}],[11,"with_connector","","Create a new client request with a specific underlying NetworkStream.",6,{"inputs":[{"name":"method"},{"name":"url"},{"name":"c"}],"output":{"name":"result"}}],[11,"start","","Consume a Fresh Request, writing the headers and method, returning a Streaming Request.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"headers_mut","","Get a mutable reference to the Request headers.",6,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"send","","Completes writing the request, and returns a response to read from.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"response","hyper::client","Client Responses",null,null],[3,"Response","hyper::client::response","A response for a client request to a remote server.",null,null],[12,"status","","The status from the server.",7,null],[12,"headers","","The headers from the server.",7,null],[12,"version","","The HTTP version of this response from the server.",7,null],[12,"url","","The final URL of this response.",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new response from a server.",7,{"inputs":[{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"with_message","","Creates a new response received from the server on the given `HttpMessage`.",7,{"inputs":[{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"status_raw","","Get the raw status code and reason.",7,{"inputs":[{"name":"self"}],"output":{"name":"rawstatus"}}],[11,"read","","",7,null],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[8,"IntoUrl","hyper::client","A helper trait to convert common objects into a Url.",null,null],[10,"into_url","","Consumes the object, trying to return a Url.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Client.",9,{"inputs":[],"output":{"name":"client"}}],[11,"with_pool_config","","Create a new Client with a configured Pool Config.",9,{"inputs":[{"name":"config"}],"output":{"name":"client"}}],[11,"with_http_proxy","","Create a Client with an HTTP proxy to a (host, port).",9,{"inputs":[{"name":"h"},{"name":"u16"}],"output":{"name":"client"}}],[11,"with_proxy_config","","Create a Client using a proxy with a custom connector and SSL client.",9,{"inputs":[{"name":"proxyconfig"}],"output":{"name":"client"}}],[11,"with_connector","","Create a new client with a specific connector.",9,{"inputs":[{"name":"c"}],"output":{"name":"client"}}],[11,"with_protocol","","Create a new client with a specific `Protocol`.",9,{"inputs":[{"name":"p"}],"output":{"name":"client"}}],[11,"set_redirect_policy","","Set the RedirectPolicy.",9,{"inputs":[{"name":"self"},{"name":"redirectpolicy"}],"output":null}],[11,"set_read_timeout","","Set the read timeout value for all requests.",9,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_write_timeout","","Set the write timeout value for all requests.",9,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"get","","Build a Get request.",9,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"head","","Build a Head request.",9,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"patch","","Build a Patch request.",9,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"post","","Build a Post request.",9,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"put","","Build a Put request.",9,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"delete","","Build a Delete request.",9,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"request","","Build a new request using this Client.",9,{"inputs":[{"name":"self"},{"name":"method"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"client"}}],[11,"body","","Set a request body to be sent.",10,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"requestbuilder"}}],[11,"headers","","Add additional headers to the request.",10,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"requestbuilder"}}],[11,"header","","Add an individual new header to the request.",10,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"requestbuilder"}}],[11,"send","","Execute this request and receive a Response back.",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",1,null],[11,"from","","",1,{"inputs":[{"name":"r"}],"output":{"name":"body"}}],[11,"into_url","hyper","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","hyper::client","Create a new `ProxyConfig`.",12,{"inputs":[{"name":"str"},{"name":"h"},{"name":"u16"},{"name":"c"},{"name":"s"}],"output":{"name":"proxyconfig"}}],[11,"set_pool_config","","Change the `pool::Config` for the proxy.",12,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"redirectpolicy"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"redirectpolicy"}}],[0,"error","hyper","Error and Result module.",null,null],[4,"ParseError","hyper::error","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",13,null],[13,"IdnaError","","",13,null],[13,"InvalidPort","","",13,null],[13,"InvalidIpv4Address","","",13,null],[13,"InvalidIpv6Address","","",13,null],[13,"InvalidDomainCharacter","","",13,null],[13,"RelativeUrlWithoutBase","","",13,null],[13,"RelativeUrlWithCannotBeABaseBase","","",13,null],[13,"SetHostOnCannotBeABaseUrl","","",13,null],[13,"Overflow","","",13,null],[4,"Error","","A set of errors that can occur parsing HTTP streams.",null,null],[13,"Method","","An invalid `Method`, such as `GE,T`.",14,null],[13,"Uri","","An invalid `RequestUri`, such as `exam ple.domain`.",14,null],[13,"Version","","An invalid `HttpVersion`, such as `HTP/1.1`",14,null],[13,"Header","","An invalid `Header`.",14,null],[13,"TooLarge","","A message head is too large to be reasonable.",14,null],[13,"Status","","An invalid `Status`, such as `1337 ELITE`.",14,null],[13,"Io","","An `io::Error` that occurred while trying to read or write to a network stream.",14,null],[13,"Ssl","","An error from a SSL library.",14,null],[13,"Utf8","","Parsing a field as string failed",14,null],[6,"Result","","Result type often returned from methods that can have hyper `Error`s.",null,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",14,{"inputs":[{"name":"ioerror"}],"output":{"name":"error"}}],[11,"from","","",14,{"inputs":[{"name":"parseerror"}],"output":{"name":"error"}}],[11,"from","","",14,{"inputs":[{"name":"utf8error"}],"output":{"name":"error"}}],[11,"from","","",14,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",14,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[0,"method","hyper","The HTTP request method",null,null],[4,"Method","hyper::method","The Request Method (VERB)",null,null],[13,"Options","","OPTIONS",15,null],[13,"Get","","GET",15,null],[13,"Post","","POST",15,null],[13,"Put","","PUT",15,null],[13,"Delete","","DELETE",15,null],[13,"Head","","HEAD",15,null],[13,"Trace","","TRACE",15,null],[13,"Connect","","CONNECT",15,null],[13,"Patch","","PATCH",15,null],[13,"Extension","","Method extensions. An example would be `let m = Extension(\"FOO\".to_string())`.",15,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"safe","","Whether a method is considered \"safe\", meaning the request is essentially read-only.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result is executed multiple times.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_str","","",15,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"header","hyper","Headers container, and common header fields.",null,null],[3,"EntityTag","hyper::header","An entity tag, defined in RFC7232",null,null],[12,"weak","","Weakness indicator for the tag",16,null],[3,"HttpDate","","A `time::Time` with HTTP formatting and parsing",null,null],[12,"0","","",17,null],[3,"Quality","","Represents a quality used in quality values.",null,null],[12,"0","","",18,null],[3,"QualityItem","","Represents an item with a quality value as defined in RFC7231.",null,null],[12,"item","","The actual contents of the field.",19,null],[12,"quality","","The quality (client or server preference) for the value.",19,null],[3,"Accept","","`Accept` header, defined in RFC7231",null,null],[12,"0","","",20,null],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of CORS",null,null],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of CORS",null,null],[12,"0","","",21,null],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of CORS",null,null],[12,"0","","",22,null],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of CORS",null,null],[12,"0","","",23,null],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of CORS",null,null],[12,"0","","",24,null],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of CORS",null,null],[12,"0","","",25,null],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of CORS",null,null],[12,"0","","",26,null],[3,"AcceptCharset","","`Accept-Charset` header, defined in RFC7231",null,null],[12,"0","","",27,null],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in RFC7231",null,null],[12,"0","","",28,null],[3,"AcceptLanguage","","`Accept-Language` header, defined in RFC7231",null,null],[12,"0","","",29,null],[3,"AcceptRanges","","`Accept-Ranges` header, defined in RFC7233",null,null],[12,"0","","",30,null],[3,"Allow","","`Allow` header, defined in RFC7231",null,null],[12,"0","","",31,null],[3,"Authorization","","`Authorization` header, defined in RFC7235",null,null],[12,"0","","",32,null],[3,"Basic","","Credential holder for Basic Authentication",null,null],[12,"username","","The username as a possibly empty string",33,null],[12,"password","","The password. `None` if the `:` delimiter character was not part of the parsed input.",33,null],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",null,null],[12,"token","","Actual bearer token as a string",34,null],[3,"CacheControl","","`Cache-Control` header, defined in RFC7234",null,null],[12,"0","","",35,null],[3,"Connection","","`Connection` header, defined in RFC7230",null,null],[12,"0","","",36,null],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in RFC6266",null,null],[12,"disposition","","The disposition",37,null],[12,"parameters","","Disposition parameters",37,null],[3,"ContentLength","","`Content-Length` header, defined in RFC7230",null,null],[12,"0","","",38,null],[3,"ContentEncoding","","`Content-Encoding` header, defined in RFC7231",null,null],[12,"0","","",39,null],[3,"ContentLanguage","","`Content-Language` header, defined in RFC7231",null,null],[12,"0","","",40,null],[3,"ContentRange","","`Content-Range` header, defined in RFC7233",null,null],[12,"0","","",41,null],[3,"ContentType","","`Content-Type` header, defined in RFC7231",null,null],[12,"0","","",42,null],[3,"Cookie","","`Cookie` header, defined in RFC6265",null,null],[12,"0","","",43,null],[3,"Date","","`Date` header, defined in RFC7231",null,null],[12,"0","","",44,null],[3,"ETag","","`ETag` header, defined in RFC7232",null,null],[12,"0","","",45,null],[3,"Expires","","`Expires` header, defined in RFC7234",null,null],[12,"0","","",46,null],[3,"From","","`From` header, defined in RFC7231",null,null],[12,"0","","",47,null],[3,"Host","","The `Host` header.",null,null],[12,"hostname","","The hostname, such a example.domain.",48,null],[12,"port","","An optional port number.",48,null],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in RFC7232",null,null],[12,"0","","",49,null],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in RFC7232",null,null],[12,"0","","",50,null],[3,"LastModified","","`Last-Modified` header, defined in RFC7232",null,null],[12,"0","","",51,null],[3,"Location","","`Location` header, defined in RFC7231",null,null],[12,"0","","",52,null],[3,"Origin","","The `Origin` header.",null,null],[12,"scheme","","The scheme, such as http or https",53,null],[12,"host","","The host, such as Host{hostname: \"hyper.rs\".to_owned(), port: None}",53,null],[3,"Prefer","","`Prefer` header, defined in RFC7240",null,null],[12,"0","","",54,null],[3,"PreferenceApplied","","`Preference-Applied` header, defined in RFC7240",null,null],[12,"0","","",55,null],[3,"Referer","","`Referer` header, defined in RFC7231",null,null],[12,"0","","",56,null],[3,"Server","","`Server` header, defined in RFC7231",null,null],[12,"0","","",57,null],[3,"SetCookie","","`Set-Cookie` header, defined RFC6265",null,null],[12,"0","","",58,null],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in RFC6797",null,null],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as any subdomains of the host's domain name.",59,null],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header field, during which the UA regards the host (from whom the message was received) as a Known HSTS Host.",59,null],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in RFC7230",null,null],[12,"0","","",60,null],[3,"Upgrade","","`Upgrade` header, defined in RFC7230",null,null],[12,"0","","",61,null],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",null,null],[12,"name","","The protocol identifier",62,null],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",62,null],[3,"UserAgent","","`User-Agent` header, defined in RFC7231",null,null],[12,"0","","",63,null],[3,"Headers","","A map of header fields on requests and responses.",null,null],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map.",null,null],[3,"HeaderView","","Returned with the `HeadersItems` iterator.",null,null],[3,"HeaderFormatter","","",null,null],[12,"0","","",64,null],[4,"Charset","","A Mime charset.",null,null],[13,"Us_Ascii","","US ASCII",65,null],[13,"Iso_8859_1","","ISO-8859-1",65,null],[13,"Iso_8859_2","","ISO-8859-2",65,null],[13,"Iso_8859_3","","ISO-8859-3",65,null],[13,"Iso_8859_4","","ISO-8859-4",65,null],[13,"Iso_8859_5","","ISO-8859-5",65,null],[13,"Iso_8859_6","","ISO-8859-6",65,null],[13,"Iso_8859_7","","ISO-8859-7",65,null],[13,"Iso_8859_8","","ISO-8859-8",65,null],[13,"Iso_8859_9","","ISO-8859-9",65,null],[13,"Iso_8859_10","","ISO-8859-10",65,null],[13,"Shift_Jis","","Shift_JIS",65,null],[13,"Euc_Jp","","EUC-JP",65,null],[13,"Iso_2022_Kr","","ISO-2022-KR",65,null],[13,"Euc_Kr","","EUC-KR",65,null],[13,"Iso_2022_Jp","","ISO-2022-JP",65,null],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",65,null],[13,"Iso_8859_6_E","","ISO-8859-6-E",65,null],[13,"Iso_8859_6_I","","ISO-8859-6-I",65,null],[13,"Iso_8859_8_E","","ISO-8859-8-E",65,null],[13,"Iso_8859_8_I","","ISO-8859-8-I",65,null],[13,"Gb2312","","GB2312",65,null],[13,"Big5","","Big5",65,null],[13,"Koi8_R","","KOI8-R",65,null],[13,"Ext","","An arbitrary charset specified as a string",65,null],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding` or `Accept-Encoding` header.",null,null],[13,"Chunked","","The `chunked` encoding.",66,null],[13,"Gzip","","The `gzip` encoding.",66,null],[13,"Deflate","","The `deflate` encoding.",66,null],[13,"Compress","","The `compress` encoding.",66,null],[13,"Identity","","The `identity` encoding.",66,null],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",66,null],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header, part of CORS",null,null],[13,"Any","","Allow all origins",67,null],[13,"Null","","A hidden origin",67,null],[13,"Value","","Allow one particular origin",67,null],[4,"RangeUnit","","Range Units, described in RFC7233",null,null],[13,"Bytes","","Indicating byte-range requests are supported.",68,null],[13,"None","","Reserved as keyword, indicating no ranges are supported.",68,null],[13,"Unregistered","","The given range unit is not registered at IANA.",68,null],[4,"CacheDirective","","`CacheControl` contains a list of these directives.",null,null],[13,"NoCache","","\"no-cache\"",69,null],[13,"NoStore","","\"no-store\"",69,null],[13,"NoTransform","","\"no-transform\"",69,null],[13,"OnlyIfCached","","\"only-if-cached\"",69,null],[13,"MaxAge","","\"max-age=delta\"",69,null],[13,"MaxStale","","\"max-stale=delta\"",69,null],[13,"MinFresh","","\"min-fresh=delta\"",69,null],[13,"MustRevalidate","","\"must-revalidate\"",69,null],[13,"Public","","\"public\"",69,null],[13,"Private","","\"private\"",69,null],[13,"ProxyRevalidate","","\"proxy-revalidate\"",69,null],[13,"SMaxAge","","\"s-maxage=delta\"",69,null],[13,"Extension","","Extension directives. Optionally include an argument.",69,null],[4,"ConnectionOption","","Values that can be in the `Connection` header.",null,null],[13,"KeepAlive","","The `keep-alive` connection value.",70,null],[13,"Close","","The `close` connection value.",70,null],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",70,null],[4,"DispositionType","","The implied disposition of the content of the HTTP body",null,null],[13,"Inline","","Inline implies default processing",71,null],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally, rather than process it normally (as per its media type).",71,null],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",71,null],[4,"DispositionParam","","A parameter to the disposition type",null,null],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of bytes representing the filename",72,null],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized parameters.",72,null],[4,"ContentRangeSpec","","Content-Range, described in RFC7233",null,null],[13,"Bytes","","Byte range",73,null],[12,"range","hyper::header::ContentRangeSpec","First and last bytes of the range, omitted if request could not be satisfied",73,null],[12,"instance_length","","Total length of the instance, can be omitted if unknown",73,null],[13,"Unregistered","hyper::header","Custom range, with unit not registered at IANA",73,null],[12,"unit","hyper::header::ContentRangeSpec","other-range-unit",73,null],[12,"resp","","other-range-resp",73,null],[4,"Expect","hyper::header","The `Expect` header.",null,null],[13,"Continue","","The value `100-continue`.",74,null],[4,"IfMatch","","`If-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",75,null],[13,"Items","","Only the listed items are a match",75,null],[4,"IfNoneMatch","","`If-None-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",76,null],[13,"Items","","Only the listed items are a match",76,null],[4,"IfRange","","`If-Range` header, defined in RFC7233",null,null],[13,"EntityTag","","The entity-tag the client has of the resource",77,null],[13,"Date","","The date when the client retrieved the resource",77,null],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",null,null],[13,"NoCache","","Corresponds to the `no-cache` value.",78,null],[13,"Ext","","Every value other than `no-cache`.",78,null],[4,"Preference","","Prefer contains a list of these preferences.",null,null],[13,"RespondAsync","","\"respond-async\"",79,null],[13,"ReturnRepresentation","","\"return=representation\"",79,null],[13,"ReturnMinimal","","\"return=minimal\"",79,null],[13,"HandlingStrict","","\"handling=strict\"",79,null],[13,"HandlingLeniant","","\"handling=leniant\"",79,null],[13,"Wait","","\"wait=delta\"",79,null],[13,"Extension","","Extension preferences. Always has a value, if none is specified it is just \"\". A preference can also have a list of parameters.",79,null],[4,"Range","","`Range` header, defined in RFC7233",null,null],[13,"Bytes","","Byte range",80,null],[13,"Unregistered","","Custom range, with unit not registered at IANA (`other-range-unit`: String , `other-range-set`: String)",80,null],[4,"ByteRangeSpec","","Each `Range::Bytes` header can contain one or more `ByteRangeSpecs`. Each `ByteRangeSpec` defines a range of bytes to fetch",null,null],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",81,null],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",81,null],[13,"Last","","Get last x bytes (\"-x\")",81,null],[4,"ReferrerPolicy","","`Referrer-Policy` header, part of Referrer Policy",null,null],[13,"NoReferrer","","`no-referrer`",82,null],[13,"NoReferrerWhenDowngrade","","`no-referrer-when-downgrade`",82,null],[13,"SameOrigin","","`same-origin`",82,null],[13,"Origin","","`origin`",82,null],[13,"OriginWhenCrossOrigin","","`origin-when-cross-origin`",82,null],[13,"UnsafeUrl","","`unsafe-url`",82,null],[13,"StrictOrigin","","`strict-origin`",82,null],[13,"StrictOriginWhenCrossOrigin","","`strict-origin-when-cross-origin`",82,null],[4,"ProtocolName","","A protocol name used to identify a spefic protocol. Names are case-sensitive except for the `WebSocket` value.",null,null],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",83,null],[13,"Tls","","`TLS` value, Transport Layer Security RFC2817",83,null],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol RFC6455",83,null],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",83,null],[13,"Unregistered","","Any other protocol name not known to hyper",83,null],[4,"Vary","","`Vary` header, defined in RFC7231",null,null],[13,"Any","","Any value is a match",84,null],[13,"Items","","Only the listed items are a match",84,null],[5,"qitem","","Convinience function to wrap a value in a `QualityItem` Sets `q` to the default 1.0",null,{"inputs":[{"name":"t"}],"output":{"name":"qualityitem"}}],[5,"q","","Convenience function to create a `Quality` from a float.",null,{"inputs":[{"name":"f32"}],"output":{"name":"quality"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"accept"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"deref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",20,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",20,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",20,null],[11,"fmt_header","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"star","","A constructor to easily create `Accept: */*`.",20,{"inputs":[],"output":{"name":"accept"}}],[11,"json","","A constructor to easily create `Accept: application/json`.",20,{"inputs":[],"output":{"name":"accept"}}],[11,"text","","A constructor to easily create `Accept: text/*`.",20,{"inputs":[],"output":{"name":"accept"}}],[11,"image","","A constructor to easily create `Accept: image/*`.",20,{"inputs":[],"output":{"name":"accept"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowcredentials"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"accesscontrolallowcredentials"}],"output":{"name":"bool"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",85,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",85,null],[11,"fmt_header","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowheaders"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"deref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",21,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",21,null],[11,"fmt_header","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowmethods"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"deref","","",22,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",22,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",22,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",22,null],[11,"fmt_header","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",67,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",67,null],[11,"fmt_header","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolexposeheaders"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"deref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",23,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",23,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",23,null],[11,"fmt_header","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolmaxage"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"deref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"deref_mut","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"header_name","","",24,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",24,null],[11,"fmt_header","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestheaders"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"deref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",25,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",25,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",25,null],[11,"fmt_header","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestmethod"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"deref","","",26,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"deref_mut","","",26,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"header_name","","",26,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",26,null],[11,"fmt_header","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"acceptcharset"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"deref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",27,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",27,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",27,null],[11,"fmt_header","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"acceptencoding"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"deref","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",28,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",28,null],[11,"fmt_header","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"acceptlanguage"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"deref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",29,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",29,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",29,null],[11,"fmt_header","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"acceptranges"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"deref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",30,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",30,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",30,null],[11,"fmt_header","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"rangeunit"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"from_str","","",68,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"allow"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"deref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",31,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",31,null],[11,"fmt_header","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"authorization"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",32,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"header_name","","",32,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",32,null],[11,"fmt_header","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"basic"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scheme","","",33,{"inputs":[],"output":{"name":"option"}}],[11,"fmt_scheme","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",33,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bearer"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scheme","","",34,{"inputs":[],"output":{"name":"option"}}],[11,"fmt_scheme","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",34,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"cachecontrol"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",35,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",35,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",35,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",35,null],[11,"fmt_header","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"cachedirective"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",69,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"cookie"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",43,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",43,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",43,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",43,null],[11,"fmt_header","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"connectionoption"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",70,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"connection"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"deref","","",36,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",36,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",36,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",36,null],[11,"fmt_header","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","A constructor to easily create a `Connection: close` header.",36,{"inputs":[],"output":{"name":"connection"}}],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",36,{"inputs":[],"output":{"name":"connection"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"dispositiontype"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"dispositionparam"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"contentdisposition"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"header_name","","",37,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",37,null],[11,"fmt_header","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"contentencoding"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"deref","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",39,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",39,null],[11,"fmt_header","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"contentlanguage"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"deref","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",40,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",40,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",40,null],[11,"fmt_header","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"contentlength"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"header_name","","",38,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",38,null],[11,"fmt_header","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"deref_mut","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"contentrange"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"deref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"deref_mut","","",41,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"header_name","","",41,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",41,null],[11,"fmt_header","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",73,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"contenttype"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"deref","","",42,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"deref_mut","","",42,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"header_name","","",42,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",42,null],[11,"fmt_header","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",42,{"inputs":[],"output":{"name":"contenttype"}}],[11,"plaintext","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",42,{"inputs":[],"output":{"name":"contenttype"}}],[11,"html","","A constructor  to easily create a `Content-Type: text/html; charset=utf-8` header.",42,{"inputs":[],"output":{"name":"contenttype"}}],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",42,{"inputs":[],"output":{"name":"contenttype"}}],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",42,{"inputs":[],"output":{"name":"contenttype"}}],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",42,{"inputs":[],"output":{"name":"contenttype"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"deref","","",44,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",44,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",44,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",44,null],[11,"fmt_header","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"etag"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"deref","","",45,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"deref_mut","","",45,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"header_name","","",45,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",45,null],[11,"fmt_header","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"expect"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"expect"}],"output":{"name":"bool"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",74,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",74,null],[11,"fmt_header","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"expires"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"deref","","",46,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",46,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",46,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",46,null],[11,"fmt_header","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"from"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"deref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",47,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",47,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",47,null],[11,"fmt_header","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",48,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",48,null],[11,"fmt_header","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",48,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"ifmatch"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"header_name","","",75,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",75,null],[11,"fmt_header","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"ifmodifiedsince"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"deref","","",49,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",49,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",49,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",49,null],[11,"fmt_header","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"ifnonematch"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"header_name","","",76,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",76,null],[11,"fmt_header","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"ifrange"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"header_name","","",77,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",77,null],[11,"fmt_header","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"ifunmodifiedsince"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"deref","","",50,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",50,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",50,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",50,null],[11,"fmt_header","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"lastmodified"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"deref","","",51,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",51,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"header_name","","",51,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",51,null],[11,"fmt_header","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"deref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",52,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",52,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",52,null],[11,"fmt_header","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Origin` header.",53,{"inputs":[{"name":"s"},{"name":"h"},{"name":"option"}],"output":{"name":"origin"}}],[11,"header_name","","",53,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",53,null],[11,"from_str","","",53,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt_header","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"pragma"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",78,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",78,null],[11,"fmt_header","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"prefer"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",54,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",54,null],[11,"fmt_header","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"preference"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",79,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"preferenceapplied"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",55,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",55,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",55,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",55,null],[11,"fmt_header","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"byterangespec"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",80,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"range"}}],[11,"bytes_multi","","Get byte range header with multiple subranges (\"bytes=from1-to1,from2-to2,fromX-toX\")",80,{"inputs":[{"name":"vec"}],"output":{"name":"range"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",80,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",81,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"header_name","","",80,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",80,null],[11,"fmt_header","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"referer"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"deref","","",56,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",56,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",56,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",56,null],[11,"fmt_header","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"referrerpolicy"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"referrerpolicy"}],"output":{"name":"bool"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",82,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",82,null],[11,"fmt_header","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"server"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"deref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",57,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",57,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",57,null],[11,"fmt_header","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"setcookie"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",58,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",58,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",58,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",58,null],[11,"fmt_header","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_multi_header","","",58,{"inputs":[{"name":"self"},{"name":"multilineformatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"stricttransportsecurity"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"including_subdomains","","Create an STS header that includes subdomains",59,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",59,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"from_str","","",59,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"header_name","","",59,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",59,null],[11,"fmt_header","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"transferencoding"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"deref","","",60,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",60,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",60,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",60,null],[11,"fmt_header","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"upgrade"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"deref","","",61,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",61,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"header_name","","",61,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",61,null],[11,"fmt_header","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"protocolname"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"from_str","","",83,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"protocol"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"new","","Creates a new Protocol with the given name and version",62,{"inputs":[{"name":"protocolname"},{"name":"option"}],"output":{"name":"protocol"}}],[11,"from_str","","",62,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"useragent"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"deref","","",63,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",63,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"header_name","","",63,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",63,null],[11,"fmt_header","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"vary"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"header_name","","",84,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",84,null],[11,"fmt_header","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"charset"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",65,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",66,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"new","","Constructs a new EntityTag. # Panics If the tag contains invalid characters.",16,{"inputs":[{"name":"bool"},{"name":"string"}],"output":{"name":"entitytag"}}],[11,"weak","","Constructs a new weak EntityTag. # Panics If the tag contains invalid characters.",16,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"strong","","Constructs a new strong EntityTag. # Panics If the tag contains invalid characters.",16,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"tag","","Get the tag.",16,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"set_tag","","Set the tag. # Panics If the tag contains invalid characters.",16,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.",16,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their opaque-tags match character-by-character, regardless of either or both being tagged as \"weak\".",16,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",16,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",16,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",16,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"ordering"}}],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"quality"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"ordering"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"quality"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"qualityitem"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `QualityItem` from an item and a quality. The item can be of any type. The quality should be a value in the range [0, 1].",19,{"inputs":[{"name":"t"},{"name":"quality"}],"output":{"name":"qualityitem"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"option"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"parsing","","Utility functions for Header implementations.",null,null],[3,"ExtendedValue","hyper::header::parsing","An extended header parameter value (i.e., tagged with a character set and optionally, a language), as defined in RFC 5987.",null,null],[12,"charset","","The character set that is used to encode the `value` to a string.",86,null],[12,"language_tag","","The human language details of the `value`, if available.",86,null],[12,"value","","The parameter value, as expressed in octets.",86,null],[3,"HTTP_VALUE","","This encode set is used for HTTP header values and is defined at https://tools.ietf.org/html/rfc5987#section-3.2",null,null],[5,"from_one_raw_str","","Reads a single raw string when parsing a header.",null,null],[5,"from_raw_str","","Reads a raw string into a value.",null,null],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec.",null,null],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string.",null,null],[5,"parse_extended_value","","Parses extended header parameter values (`ext-value`), as defined in RFC 5987.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"extendedvalue"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"http_value"}}],[11,"contains","","",87,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Scheme","hyper::header","An Authorization scheme to be used in the header.",null,null],[10,"scheme","","An optional Scheme name.",88,{"inputs":[],"output":{"name":"option"}}],[10,"fmt_scheme","","Format the Scheme data into a header value.",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Header","","A trait for any object that will represent a header field and value.",null,null],[10,"header_name","","Returns the name of the header field this belongs to.",89,{"inputs":[],"output":{"name":"str"}}],[10,"parse_header","","Parse a header from a raw stream of bytes.",89,null],[8,"HeaderFormat","","A trait for any object that will represent a header field and value.",null,null],[10,"fmt_header","","Format a header to be output into a TcpStream.",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"new","","Creates a new, empty headers map.",91,{"inputs":[],"output":{"name":"headers"}}],[11,"set","","Set a header field to the corresponding value.",91,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"get_raw","","Access the raw value of a header.",91,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",91,{"inputs":[{"name":"self"},{"name":"k"},{"name":"vec"}],"output":null}],[11,"append_raw","","Append a value to raw value of this header.",91,{"inputs":[{"name":"self"},{"name":"k"},{"name":"vec"}],"output":null}],[11,"remove_raw","","Remove a header set by set_raw",91,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"get","","Get a reference to the header field's value, if it exists.",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has","","Returns a boolean of whether a certain header is in the map.",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remove","","Removes a header from the map, if one existed. Returns true if a header has been removed.",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the header fields.",91,{"inputs":[{"name":"self"}],"output":{"name":"headersitems"}}],[11,"len","","Returns the number of headers in the map.",91,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Remove all headers from the map.",91,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"bool"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Check if a HeaderView is a certain Header.",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"name","","Get the Header name as a slice.",93,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"value","","Cast the value to a certain Header type.",93,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"value_string","","Get just the header value as a String.",93,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"extend","","",91,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",91,{"inputs":[{"name":"i"}],"output":{"name":"headers"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"http","hyper","Pieces pertaining to the HTTP message protocol.",null,null],[3,"RawStatus","hyper::http","The raw status code and reason-phrase.",null,null],[12,"0","","",94,null],[12,"1","","",94,null],[5,"should_keep_alive","","Checks if a connection should be kept alive.",null,{"inputs":[{"name":"httpversion"},{"name":"headers"}],"output":{"name":"bool"}}],[0,"h1","","Adapts the HTTP/1.1 implementation into the `HttpMessage` API.",null,null],[3,"Http11Message","hyper::http::h1","An implementation of the `HttpMessage` trait for HTTP/1.1.",null,null],[3,"Http11Protocol","","The `Protocol` implementation provides HTTP/1.1 messages.",null,null],[3,"EndError","","",null,null],[3,"Incoming","","An Incoming Message head. Includes request/status line, and headers.",null,null],[12,"version","","HTTP version of the message.",95,null],[12,"subject","","Subject (request line or status line) of Incoming message.",95,null],[12,"headers","","Headers of the Incoming message.",95,null],[4,"HttpReader","","Readers to handle different Transfer-Encodings.",null,null],[13,"SizedReader","","A Reader used when a Content-Length header is passed with a positive integer.",96,null],[13,"ChunkedReader","","A Reader used when Transfer-Encoding is `chunked`.",96,null],[13,"EofReader","","A Reader used for responses that don't indicate a length or chunked.",96,null],[13,"EmptyReader","","A Reader used for messages that should never have a body.",96,null],[4,"HttpWriter","","Writers to handle different Transfer-Encodings.",null,null],[13,"ThroughWriter","","A no-op Writer, used initially before Transfer-Encoding is determined.",97,null],[13,"ChunkedWriter","","A Writer for when Transfer-Encoding includes `chunked`.",97,null],[13,"SizedWriter","","A Writer for when Content-Length is set.",97,null],[13,"EmptyWriter","","A writer that should not write any body.",97,null],[5,"parse_request","","Parses a request into an Incoming message head.",null,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[5,"parse_response","","Parses a response into an Incoming message head.",null,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[17,"CR","","The `\\r` byte.",null,null],[17,"LF","","The `\\n` byte.",null,null],[17,"LINE_ENDING","","The bytes `\\r\\n`.",null,null],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",98,null],[11,"flush","","",98,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",98,null],[11,"set_outgoing","","",98,{"inputs":[{"name":"self"},{"name":"requesthead"}],"output":{"name":"result"}}],[11,"get_incoming","","",98,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"has_body","","",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_read_timeout","","",98,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",98,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"close_connection","","",98,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_proxied","","",98,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"into_inner","","Consumes the `Http11Message` and returns the underlying `NetworkStream`.",98,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"get_ref","","Gets a mutable reference to the underlying `NetworkStream`, regardless of the state of the `Http11Message`.",98,{"inputs":[{"name":"self"}],"output":{"name":"networkstream"}}],[11,"get_mut","","Gets a mutable reference to the underlying `NetworkStream`, regardless of the state of the `Http11Message`.",98,{"inputs":[{"name":"self"}],"output":{"name":"networkstream"}}],[11,"with_stream","","Creates a new `Http11Message` that will use the given `NetworkStream` for communicating to the peer.",98,{"inputs":[{"name":"box"}],"output":{"name":"http11message"}}],[11,"flush_outgoing","","Flushes the current outgoing content and moves the stream into the `stream` property.",98,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new_message","","",99,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"with_connector","","Creates a new `Http11Protocol` instance that will use the given `NetworkConnector` for establishing HTTP connections.",99,{"inputs":[{"name":"c"}],"output":{"name":"http11protocol"}}],[11,"into_inner","","Unwraps this HttpReader and returns the underlying Reader.",96,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_ref","","Gets a borrowed reference to the underlying Reader.",96,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying Reader.",96,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",96,null],[11,"into_inner","","Unwraps the HttpWriter and returns the underlying Writer.",97,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_ref","","Access the inner Writer.",97,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Access the inner Writer mutably.",97,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"end","","Ends the HttpWriter, and returns the underlying Writer.",97,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",97,null],[11,"flush","","",97,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"message","hyper::http","Defines the `HttpMessage` trait that serves to encapsulate the operations of a single request-response cycle on any HTTP connection.",null,null],[3,"RequestHead","hyper::http::message","Describes a request.",null,null],[12,"headers","","The headers of the request",101,null],[12,"method","","The method of the request",101,null],[12,"url","","The URL of the request",101,null],[3,"ResponseHead","","Describes a response.",null,null],[12,"headers","","The headers of the reponse",102,null],[12,"raw_status","","The raw status line of the response",102,null],[12,"version","","The HTTP/2 version which generated the response",102,null],[8,"Protocol","","The trait provides an API for creating new `HttpMessage`s depending on the underlying HTTP protocol.",null,null],[10,"new_message","","Creates a fresh `HttpMessage` bound to the given host, based on the given protocol scheme.",103,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[8,"HttpMessage","","The trait provides an API for sending an receiving HTTP messages.",null,null],[10,"set_outgoing","","Initiates a new outgoing request.",104,{"inputs":[{"name":"self"},{"name":"requesthead"}],"output":{"name":"result"}}],[10,"get_incoming","","Obtains the incoming response and returns its head (i.e. the `ResponseHead` struct)",104,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Set the read timeout duration for this message.",104,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Set the write timeout duration for this message.",104,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"close_connection","","Closes the underlying HTTP connection.",104,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"has_body","","Returns whether the incoming message has a body.",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_proxied","","Called when the Client wishes to use a Proxy.",104,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"requesthead"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"responsehead"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Is the underlying type in this trait object a T?",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","If the underlying type is T, get a reference to the contained data.",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","If the underlying type is T, get a mutable reference to the contained data.",104,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast","","If the underlying type is T, extract it.",104,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"clone","hyper::http","",94,{"inputs":[{"name":"self"}],"output":{"name":"rawstatus"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"rawstatus"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"rawstatus"}],"output":{"name":"bool"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"net","hyper","A collection of traits abstracting over Listeners and Streams.",null,null],[3,"NetworkConnections","hyper::net","An iterator wrapper over a `NetworkAcceptor`.",null,null],[3,"HttpListener","","A `NetworkListener` for `HttpStream`s.",null,null],[3,"HttpStream","","A wrapper around a `TcpStream`.",null,null],[12,"0","","",105,null],[3,"HttpConnector","","A connector that will produce HttpStreams.",null,null],[3,"HttpsListener","","A Http Listener over SSL.",null,null],[3,"HttpsConnector","","A connector that can protect HTTP streams using SSL.",null,null],[4,"Fresh","","The write-status indicating headers have not been written.",null,null],[4,"Streaming","","The write-status indicating headers have been written.",null,null],[4,"HttpsStream","","A stream over the HTTP protocol, possibly protected by SSL.",null,null],[13,"Http","","A plain text stream.",106,null],[13,"Https","","A stream protected by SSL.",106,null],[8,"NetworkListener","","An abstraction to listen for connections on a certain port.",null,null],[16,"Stream","","The stream produced for each connection.",107,null],[10,"accept","","Returns an iterator of streams.",107,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"local_addr","","Get the address this Listener ended up listening on.",107,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over incoming connections.",107,{"inputs":[{"name":"self"}],"output":{"name":"networkconnections"}}],[11,"set_read_timeout","","Sets the read timeout for all streams that are accepted",107,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_write_timeout","","Sets the write timeout for all streams that are accepted",107,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[8,"NetworkStream","","An abstraction over streams that a `Server` can utilize.",null,null],[10,"peer_addr","","Get the remote address of the underlying connection.",108,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Set the maximum time to wait for a read to complete.",108,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Set the maximum time to wait for a write to complete.",108,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","This will be called when Stream should no longer be kept alive.",108,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[8,"NetworkConnector","","A connector creates a NetworkStream.",null,null],[16,"Stream","","Type of `Stream` to create",109,null],[10,"connect","","Connect to a remote address.",109,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[8,"SslClient","","An abstraction to allow any SSL implementation to be used with client-side HttpsStreams.",null,null],[16,"Stream","","The protected stream.",110,null],[10,"wrap_client","","Wrap a client stream with SSL.",110,{"inputs":[{"name":"self"},{"name":"t"},{"name":"str"}],"output":{"name":"result"}}],[8,"SslServer","","An abstraction to allow any SSL implementation to be used with server-side HttpsStreams.",null,null],[16,"Stream","","The protected stream.",111,null],[10,"wrap_server","","Wrap a server stream with SSL.",111,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next","","",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is","","Is the underlying type in this trait object a `T`?",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","If the underlying type is `T`, get a reference to the contained data.",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","If the underlying type is `T`, get a mutable reference to the contained data.",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast","","If the underlying type is `T`, extract it.",108,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"is","","Is the underlying type in this trait object a `T`?",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","If the underlying type is `T`, get a reference to the contained data.",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","If the underlying type is `T`, get a mutable reference to the contained data.",108,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast","","If the underlying type is `T`, extract it.",108,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"httplistener"}}],[11,"from","","",113,{"inputs":[{"name":"tcplistener"}],"output":{"name":"httplistener"}}],[11,"new","","Start listening to an address over HTTP.",113,{"inputs":[{"name":"to"}],"output":{"name":"result"}}],[11,"accept","","",113,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","",113,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",113,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_write_timeout","","",113,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"as_raw_fd","","",113,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",113,{"inputs":[{"name":"rawfd"}],"output":{"name":"httplistener"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"httpstream"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",105,null],[11,"write","","",105,null],[11,"flush","","",105,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",105,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",105,{"inputs":[{"name":"rawfd"}],"output":{"name":"httpstream"}}],[11,"peer_addr","","",105,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",105,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",105,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","",105,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"httpconnector"}}],[11,"default","","",114,{"inputs":[],"output":{"name":"httpconnector"}}],[11,"connect","","",114,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"httpsstream"}}],[11,"read","","",106,null],[11,"write","","",106,null],[11,"flush","","",106,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peer_addr","","",106,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",106,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",106,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","",106,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"httpslistener"}}],[11,"new","","Start listening to an address over HTTPS.",115,{"inputs":[{"name":"to"},{"name":"s"}],"output":{"name":"result"}}],[11,"with_listener","","Construct an HttpsListener from a bound `TcpListener`.",115,{"inputs":[{"name":"httplistener"},{"name":"s"}],"output":{"name":"httpslistener"}}],[11,"accept","","",115,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","",115,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",115,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_write_timeout","","",115,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",116,{"inputs":[],"output":{"name":"httpsconnector"}}],[11,"new","","Create a new connector using the provided SSL implementation.",116,{"inputs":[{"name":"s"}],"output":{"name":"httpsconnector"}}],[11,"with_connector","","Create a new connector using the provided SSL implementation.",116,{"inputs":[{"name":"s"},{"name":"c"}],"output":{"name":"httpsconnector"}}],[11,"connect","","",116,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[0,"server","hyper","HTTP Server",null,null],[3,"Server","hyper::server","A server can listen on a TCP socket.",null,null],[3,"Listening","","A listening server, which can later be closed.",null,null],[12,"socket","","The socket addresses that the server is bound to.",117,null],[0,"request","","Server Requests",null,null],[3,"Request","hyper::server::request","A request bundles several parts of an incoming `NetworkStream`, given to a `Handler`.",null,null],[12,"remote_addr","","The IP address of the remote connection.",118,null],[12,"method","","The `Method`, such as `Get`, `Post`, etc.",118,null],[12,"headers","","The headers of the incoming request.",118,null],[12,"uri","","The target request-uri for this request.",118,null],[12,"version","","The version of HTTP for this request.",118,null],[11,"new","","Create a new Request, reading the StartLine and Headers so they are immediately useful.",118,{"inputs":[{"name":"bufreader"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Set the read timeout of the underlying NetworkStream.",118,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"downcast_ref","","Get a reference to the underlying `NetworkStream`.",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ssl","","Get a reference to the underlying Ssl stream, if connected over HTTPS.",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deconstruct","","Deconstruct a Request into its constituent parts.",118,null],[11,"read","","",118,null],[0,"response","hyper::server","Server Responses",null,null],[3,"Response","hyper::server::response","The outgoing half for a Tcp connection, created by a `Server` and given to a `Handler`.",null,null],[12,"version","","The HTTP version of this response.",119,null],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"status","","The status of this response.",119,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"headers","","The headers of this response.",119,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"construct","","Construct a Response from its constituent parts.",119,{"inputs":[{"name":"httpversion"},{"name":"httpwriter"},{"name":"statuscode"},{"name":"headers"}],"output":{"name":"response"}}],[11,"deconstruct","","Deconstruct this Response into its constituent parts.",119,null],[11,"new","","Creates a new Response that can be used to write to a network stream.",119,{"inputs":[{"name":"write"},{"name":"headers"}],"output":{"name":"response"}}],[11,"send","","Writes the body and ends the response.",119,null],[11,"start","","Consume this Response, writing the Headers and Status and creating a Response",119,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"status_mut","","Get a mutable reference to the status.",119,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"headers_mut","","Get a mutable reference to the Headers.",119,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"end","","Flushes all writing of a response to the client.",119,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",119,null],[11,"flush","","",119,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",119,{"inputs":[{"name":"self"}],"output":null}],[8,"Handler","hyper::server","A handler that can handle incoming requests for a server.",null,null],[10,"handle","","Receives a `Request`/`Response` pair, and should perform some action on them.",120,{"inputs":[{"name":"self"},{"name":"request"},{"name":"response"}],"output":null}],[11,"check_continue","","Called when a Request includes a `Expect: 100-continue` header.",120,null],[11,"on_connection_start","","This is run after a connection is received, on a per-connection basis (not a per-request basis, as a connection with keep-alive may handle multiple requests)",120,{"inputs":[{"name":"self"}],"output":null}],[11,"on_connection_end","","This is run before a connection is closed, on a per-connection basis (not a per-request basis, as a connection with keep-alive may handle multiple requests)",120,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new server with the provided handler.",121,{"inputs":[{"name":"l"}],"output":{"name":"server"}}],[11,"keep_alive","","Controls keep-alive for this server.",121,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_read_timeout","","Sets the read timeout for all Request reads.",121,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_write_timeout","","Sets the write timeout for all Response writes.",121,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"http","","Creates a new server that will handle `HttpStream`s.",121,{"inputs":[{"name":"to"}],"output":{"name":"result"}}],[11,"https","","Creates a new server that will handle `HttpStream`s over SSL.",121,{"inputs":[{"name":"a"},{"name":"s"}],"output":{"name":"result"}}],[11,"handle","","Binds to a socket and starts handling connections.",121,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"result"}}],[11,"handle_threads","","Binds to a socket and starts handling connections with the provided number of threads.",121,{"inputs":[{"name":"self"},{"name":"h"},{"name":"usize"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",117,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Warning: This function doesn't work. The server remains listening after you called it. See https://github.com/hyperium/hyper/issues/338 for more details.",117,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"status","hyper","HTTP status codes",null,null],[4,"StatusCode","hyper::status","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[13,"Continue","","100 Continue [RFC7231, Section 6.2.1]",122,null],[13,"SwitchingProtocols","","101 Switching Protocols [RFC7231, Section 6.2.2]",122,null],[13,"Processing","","102 Processing [RFC2518]",122,null],[13,"Ok","","200 OK [RFC7231, Section 6.3.1]",122,null],[13,"Created","","201 Created [RFC7231, Section 6.3.2]",122,null],[13,"Accepted","","202 Accepted [RFC7231, Section 6.3.3]",122,null],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",122,null],[13,"NoContent","","204 No Content [RFC7231, Section 6.3.5]",122,null],[13,"ResetContent","","205 Reset Content [RFC7231, Section 6.3.6]",122,null],[13,"PartialContent","","206 Partial Content [RFC7233, Section 4.1]",122,null],[13,"MultiStatus","","207 Multi-Status [RFC4918]",122,null],[13,"AlreadyReported","","208 Already Reported [RFC5842]",122,null],[13,"ImUsed","","226 IM Used [RFC3229]",122,null],[13,"MultipleChoices","","300 Multiple Choices [RFC7231, Section 6.4.1]",122,null],[13,"MovedPermanently","","301 Moved Permanently [RFC7231, Section 6.4.2]",122,null],[13,"Found","","302 Found [RFC7231, Section 6.4.3]",122,null],[13,"SeeOther","","303 See Other [RFC7231, Section 6.4.4]",122,null],[13,"NotModified","","304 Not Modified [RFC7232, Section 4.1]",122,null],[13,"UseProxy","","305 Use Proxy [RFC7231, Section 6.4.5]",122,null],[13,"TemporaryRedirect","","307 Temporary Redirect [RFC7231, Section 6.4.7]",122,null],[13,"PermanentRedirect","","308 Permanent Redirect [RFC7238]",122,null],[13,"BadRequest","","400 Bad Request [RFC7231, Section 6.5.1]",122,null],[13,"Unauthorized","","401 Unauthorized [RFC7235, Section 3.1]",122,null],[13,"PaymentRequired","","402 Payment Required [RFC7231, Section 6.5.2]",122,null],[13,"Forbidden","","403 Forbidden [RFC7231, Section 6.5.3]",122,null],[13,"NotFound","","404 Not Found [RFC7231, Section 6.5.4]",122,null],[13,"MethodNotAllowed","","405 Method Not Allowed [RFC7231, Section 6.5.5]",122,null],[13,"NotAcceptable","","406 Not Acceptable [RFC7231, Section 6.5.6]",122,null],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required [RFC7235, Section 3.2]",122,null],[13,"RequestTimeout","","408 Request Timeout [RFC7231, Section 6.5.7]",122,null],[13,"Conflict","","409 Conflict [RFC7231, Section 6.5.8]",122,null],[13,"Gone","","410 Gone [RFC7231, Section 6.5.9]",122,null],[13,"LengthRequired","","411 Length Required [RFC7231, Section 6.5.10]",122,null],[13,"PreconditionFailed","","412 Precondition Failed [RFC7232, Section 4.2]",122,null],[13,"PayloadTooLarge","","413 Payload Too Large [RFC7231, Section 6.5.11]",122,null],[13,"UriTooLong","","414 URI Too Long [RFC7231, Section 6.5.12]",122,null],[13,"UnsupportedMediaType","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",122,null],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable [RFC7233, Section 4.4]",122,null],[13,"ExpectationFailed","","417 Expectation Failed [RFC7231, Section 6.5.14]",122,null],[13,"ImATeapot","","418 I'm a teapot [curiously, not registered by IANA, but RFC2324]",122,null],[13,"MisdirectedRequest","","421 Misdirected Request RFC7540, Section 9.1.2",122,null],[13,"UnprocessableEntity","","422 Unprocessable Entity [RFC4918]",122,null],[13,"Locked","","423 Locked [RFC4918]",122,null],[13,"FailedDependency","","424 Failed Dependency [RFC4918]",122,null],[13,"UpgradeRequired","","426 Upgrade Required [RFC7231, Section 6.5.15]",122,null],[13,"PreconditionRequired","","428 Precondition Required [RFC6585]",122,null],[13,"TooManyRequests","","429 Too Many Requests [RFC6585]",122,null],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large [RFC6585]",122,null],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons [RFC7725]",122,null],[13,"InternalServerError","","500 Internal Server Error [RFC7231, Section 6.6.1]",122,null],[13,"NotImplemented","","501 Not Implemented [RFC7231, Section 6.6.2]",122,null],[13,"BadGateway","","502 Bad Gateway [RFC7231, Section 6.6.3]",122,null],[13,"ServiceUnavailable","","503 Service Unavailable [RFC7231, Section 6.6.4]",122,null],[13,"GatewayTimeout","","504 Gateway Timeout [RFC7231, Section 6.6.5]",122,null],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",122,null],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates [RFC2295]",122,null],[13,"InsufficientStorage","","507 Insufficient Storage [RFC4918]",122,null],[13,"LoopDetected","","508 Loop Detected [RFC5842]",122,null],[13,"NotExtended","","510 Not Extended [RFC2774]",122,null],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required [RFC6585]",122,null],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",122,null],[4,"StatusClass","","The class of an HTTP `status-code`.",null,null],[13,"Informational","","1xx (Informational): The request was received, continuing process",123,null],[13,"Success","","2xx (Success): The request was successfully received, understood, and accepted",123,null],[13,"Redirection","","3xx (Redirection): Further action needs to be taken in order to complete the request",123,null],[13,"ClientError","","4xx (Client Error): The request contains bad syntax or cannot be fulfilled",123,null],[13,"ServerError","","5xx (Server Error): The server failed to fulfill an apparently valid request",123,null],[13,"NoClass","","A status code lower than 100 or higher than 599. These codes do no belong to any class.",123,null],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",122,null],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",122,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"class","","Determine the class of a status code, based on its first digit.",122,{"inputs":[{"name":"self"}],"output":{"name":"statusclass"}}],[11,"is_informational","","Check if class is Informational.",122,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_success","","Check if class is Success.",122,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_redirection","","Check if class is Redirection.",122,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_client_error","","Check if class is ClientError.",122,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_server_error","","Check if class is ServerError.",122,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_strange_status","","Check if class is NoClass",122,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"partial_cmp","","",122,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"option"}}],[11,"cmp","","",122,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"ordering"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"statusclass"}}],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",123,{"inputs":[{"name":"self"},{"name":"statusclass"}],"output":{"name":"option"}}],[11,"cmp","","",123,{"inputs":[{"name":"self"},{"name":"statusclass"}],"output":{"name":"ordering"}}],[11,"default_code","","Get the default status code for the class.",123,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[0,"uri","hyper","HTTP RequestUris",null,null],[4,"RequestUri","hyper::uri","The Request-URI of a Request's StartLine.",null,null],[13,"AbsolutePath","","The most common request target, an absolute path and optional query.",124,null],[13,"AbsoluteUri","","An absolute URI. Used in conjunction with proxies.",124,null],[13,"Authority","","The authority form is only for use with `CONNECT` requests.",124,null],[13,"Star","","The star is used to target the entire server, instead of a specific resource.",124,null],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"requesturi"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"self"},{"name":"requesturi"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"requesturi"}}],[11,"from_str","","",124,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"version","hyper","HTTP Versions enum",null,null],[4,"HttpVersion","hyper::version","Represents a version of the HTTP spec.",null,null],[13,"Http09","","`HTTP/0.9`",125,null],[13,"Http10","","`HTTP/1.0`",125,null],[13,"Http11","","`HTTP/1.1`",125,null],[13,"Http20","","`HTTP/2.0`",125,null],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",125,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":{"name":"option"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"httpversion"}}],[11,"cmp","","",125,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":{"name":"ordering"}}],[11,"hash","","",125,null],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"mime","hyper","Re-exporting the mime crate, for convenience.",null,null],[14,"mime","hyper::mime","Easily create a Mime without having to import so many enums.",null,null],[14,"header","hyper","",null,null],[11,"parse","","Parse an absolute URL from a string.",11,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",11,{"inputs":[{"name":"str"},{"name":"i"}],"output":{"name":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",11,{"inputs":[],"output":{"name":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","Return the serialization of this URL.",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",11,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_host","","Equivalent to `url.host().is_some()`.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port","","Return the port number for this URL, if any.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",11,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"fragment","","Return this URL’s fragment identifier, if any.",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_fragment","","Change this URL’s fragment identifier.",11,null],[11,"set_query","","Change this URL’s query string.",11,null],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",11,{"inputs":[{"name":"self"}],"output":{"name":"serializer"}}],[11,"set_path","","Change this URL’s path.",11,null],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_port","","Change this URL’s port number.",11,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_host","","Change this URL’s host.",11,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_ip_host","","Change this URL’s host to the given IP address.",11,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_password","","Change this URL’s password.",11,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_username","","Change this URL’s username.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_scheme","","Change this URL’s scheme.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",11,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",11,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"languagetag"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"ordering"}}],[11,"to_socket_addrs","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"bool"}}],[11,"eq","hyper::error","",13,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","hyper","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","hyper::error","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","hyper","",11,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"option"}}],[11,"from","hyper::error","",13,{"inputs":[{"name":"errors"}],"output":{"name":"parseerror"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","hyper","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"hash","","",11,null],[11,"clone","hyper::error","",13,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"clone","hyper","",11,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"index","","",11,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",11,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",11,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",11,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"description","hyper::error","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"matches","hyper","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",0,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"canonicalize","","Returns the canonical version of the language tag.",0,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}]],"paths":[[3,"LanguageTag"],[4,"Body"],[4,"RedirectPolicy"],[3,"Config"],[3,"Pool"],[3,"PooledStream"],[3,"Request"],[3,"Response"],[8,"IntoUrl"],[3,"Client"],[3,"RequestBuilder"],[3,"Url"],[3,"ProxyConfig"],[4,"ParseError"],[4,"Error"],[4,"Method"],[3,"EntityTag"],[3,"HttpDate"],[3,"Quality"],[3,"QualityItem"],[3,"Accept"],[3,"AccessControlAllowHeaders"],[3,"AccessControlAllowMethods"],[3,"AccessControlExposeHeaders"],[3,"AccessControlMaxAge"],[3,"AccessControlRequestHeaders"],[3,"AccessControlRequestMethod"],[3,"AcceptCharset"],[3,"AcceptEncoding"],[3,"AcceptLanguage"],[3,"AcceptRanges"],[3,"Allow"],[3,"Authorization"],[3,"Basic"],[3,"Bearer"],[3,"CacheControl"],[3,"Connection"],[3,"ContentDisposition"],[3,"ContentLength"],[3,"ContentEncoding"],[3,"ContentLanguage"],[3,"ContentRange"],[3,"ContentType"],[3,"Cookie"],[3,"Date"],[3,"ETag"],[3,"Expires"],[3,"From"],[3,"Host"],[3,"IfModifiedSince"],[3,"IfUnmodifiedSince"],[3,"LastModified"],[3,"Location"],[3,"Origin"],[3,"Prefer"],[3,"PreferenceApplied"],[3,"Referer"],[3,"Server"],[3,"SetCookie"],[3,"StrictTransportSecurity"],[3,"TransferEncoding"],[3,"Upgrade"],[3,"Protocol"],[3,"UserAgent"],[3,"HeaderFormatter"],[4,"Charset"],[4,"Encoding"],[4,"AccessControlAllowOrigin"],[4,"RangeUnit"],[4,"CacheDirective"],[4,"ConnectionOption"],[4,"DispositionType"],[4,"DispositionParam"],[4,"ContentRangeSpec"],[4,"Expect"],[4,"IfMatch"],[4,"IfNoneMatch"],[4,"IfRange"],[4,"Pragma"],[4,"Preference"],[4,"Range"],[4,"ByteRangeSpec"],[4,"ReferrerPolicy"],[4,"ProtocolName"],[4,"Vary"],[3,"AccessControlAllowCredentials"],[3,"ExtendedValue"],[3,"HTTP_VALUE"],[8,"Scheme"],[8,"Header"],[8,"HeaderFormat"],[3,"Headers"],[3,"HeadersItems"],[3,"HeaderView"],[3,"RawStatus"],[3,"Incoming"],[4,"HttpReader"],[4,"HttpWriter"],[3,"Http11Message"],[3,"Http11Protocol"],[3,"EndError"],[3,"RequestHead"],[3,"ResponseHead"],[8,"Protocol"],[8,"HttpMessage"],[3,"HttpStream"],[4,"HttpsStream"],[8,"NetworkListener"],[8,"NetworkStream"],[8,"NetworkConnector"],[8,"SslClient"],[8,"SslServer"],[3,"NetworkConnections"],[3,"HttpListener"],[3,"HttpConnector"],[3,"HttpsListener"],[3,"HttpsConnector"],[3,"Listening"],[3,"Request"],[3,"Response"],[8,"Handler"],[3,"Server"],[4,"StatusCode"],[4,"StatusClass"],[4,"RequestUri"],[4,"HttpVersion"]]};
searchIndex["hyper_native_tls"] = {"doc":"SSL support for Hyper via the native-tls crate.","items":[[3,"TlsStream","hyper_native_tls","A Hyper stream using native_tls.",null,null],[3,"NativeTlsClient","","An `SslClient` implementation using native-tls.",null,null],[3,"NativeTlsServer","","An `SslServer` implementation using native-tls.",null,null],[4,"ServerError","","An error creating a `NativeTlsServer`.",null,null],[13,"Io","","An error reading the identity file.",0,null],[13,"Tls","","An error initializing the acceptor.",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tlsstream"}}],[11,"read","","",1,null],[11,"write","","",1,null],[11,"flush","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peer_addr","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",1,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",1,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"new","","Returns a `NativeTlsClient` with a default configuration.",2,{"inputs":[],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"tlsconnector"}],"output":{"name":"nativetlsclient"}}],[11,"wrap_client","","",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"nativetlsserver"}}],[11,"new","","Returns a `NativeTlsServer` with a default configuration.",3,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"tlsacceptor"}],"output":{"name":"nativetlsserver"}}],[11,"wrap_server","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[4,"ServerError"],[3,"TlsStream"],[3,"NativeTlsClient"],[3,"NativeTlsServer"]]};
searchIndex["idna"] = {"doc":"This Rust crate implements IDNA per the WHATWG URL Standard.","items":[[5,"domain_to_ascii","idna","The domain to ASCII algorithm.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"domain_to_unicode","","The domain to Unicode algorithm.",null,null],[0,"punycode","","Punycode (RFC 3492) implementation.",null,null],[5,"decode_to_string","idna::punycode","Convert Punycode to an Unicode `String`.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"decode","","Convert Punycode to Unicode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode_str","","Convert an Unicode `str` to Punycode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode","","Convert Unicode to Punycode.",null,null],[0,"uts46","idna","Unicode IDNA Compatibility Processing (Unicode Technical Standard #46)",null,null],[3,"Flags","idna::uts46","",null,null],[12,"use_std3_ascii_rules","","",0,null],[12,"transitional_processing","","",0,null],[12,"verify_dns_length","","",0,null],[3,"Errors","","Errors recorded during UTS #46 processing.",null,null],[5,"to_ascii","","http://www.unicode.org/reports/tr46/#ToASCII",null,{"inputs":[{"name":"str"},{"name":"flags"}],"output":{"name":"result"}}],[5,"to_unicode","","http://www.unicode.org/reports/tr46/#ToUnicode",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Flags"],[3,"Errors"]]};
searchIndex["isatty"] = {"doc":"","items":[[5,"stdout_isatty","isatty","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"stderr_isatty","","",null,{"inputs":[],"output":{"name":"bool"}}]],"paths":[]};
searchIndex["itoa"] = {"doc":"","items":[[5,"write","itoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Integer","","",null,null],[10,"write","","",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}]],"paths":[[8,"Integer"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["language_tags"] = {"doc":"Language tags can be used identify human languages, scripts e.g. Latin script, countries and other regions.","items":[[3,"LanguageTag","language_tags","A language tag as described in BCP47.",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all other aspects such as script, region or spefic invariants.",0,null],[12,"extlangs","","Extended language subtags are used to identify certain specially selected languages that, for various historical and compatibility reasons, are closely identified with or tagged using an existing primary language subtag.",0,null],[12,"script","","Script subtags are used to indicate the script or writing system variations that distinguish the written forms of a language or its dialects.",0,null],[12,"region","","Region subtags are used to indicate linguistic variations associated with or appropriate to a specific country, territory, or region. Typically, a region subtag is used to indicate variations such as regional dialects or usage, or region-specific spelling conventions. It can also be used to indicate that content is expressed in a way that is appropriate for use throughout a region, for instance, Spanish content tailored to be useful throughout Latin America.",0,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized variations that define a language or its dialects that are not covered by other available subtags.",0,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in various applications.  They are intended to identify information that is commonly used in association with languages or language tags but that is not part of language identification.",0,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language that are important in a given context by private agreement.",0,null],[4,"Error","","Defines an Error type for langtags.",null,null],[13,"DuplicateExtension","","The same extension subtag is only allowed once in a tag before the private use part.",1,null],[13,"EmptyExtension","","If an extension subtag is present, it must not be empty.",1,null],[13,"EmptyPrivateUse","","If the `x` subtag is present, it must not be empty.",1,null],[13,"ForbiddenChar","","The langtag contains a char that is not A-Z, a-z, 0-9 or the dash.",1,null],[13,"InvalidSubtag","","A subtag fails to parse, it does not match any other subtags.",1,null],[13,"InvalidLanguage","","The given language subtag is invalid.",1,null],[13,"SubtagTooLong","","A subtag may be eight characters in length at maximum.",1,null],[13,"TooManyExtlangs","","At maximum three extlangs are allowed, but zero to one extlangs are preferred.",1,null],[6,"Result","","Result type used for this library.",null,null],[17,"GRANDFATHERED","","Contains all grandfathered tags.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"languagetag"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used as a normal language tag. None fields in the language range are ignored. If the language tag has more extlangs than the range these extlangs are ignored. Matches are case-insensitive. `*` in language ranges are represented using `None` values. The language range `*` that matches language tags is created by the default language tag: `let wildcard: LanguageTag = Default::default();.`",0,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"canonicalize","","Returns the canonical version of the language tag.",0,{"inputs":[{"name":"self"}],"output":{"name":"languagetag"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"langtag","","Utility for creating simple language tags.",null,null]],"paths":[[3,"LanguageTag"],[4,"Error"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",16,null],[12,"sa_data","","",16,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",17,null],[12,"sin_port","","",17,null],[12,"sin_addr","","",17,null],[12,"sin_zero","","",17,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",18,null],[12,"sin6_port","","",18,null],[12,"sin6_flowinfo","","",18,null],[12,"sin6_addr","","",18,null],[12,"sin6_scope_id","","",18,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",19,null],[12,"sun_path","","",19,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",20,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",21,null],[12,"ai_family","","",21,null],[12,"ai_socktype","","",21,null],[12,"ai_protocol","","",21,null],[12,"ai_addrlen","","",21,null],[12,"ai_addr","","",21,null],[12,"ai_canonname","","",21,null],[12,"ai_next","","",21,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",22,null],[12,"nl_pid","","",22,null],[12,"nl_groups","","",22,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",23,null],[12,"sll_protocol","","",23,null],[12,"sll_ifindex","","",23,null],[12,"sll_hatype","","",23,null],[12,"sll_pkttype","","",23,null],[12,"sll_halen","","",23,null],[12,"sll_addr","","",23,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",24,null],[12,"tm_min","","",24,null],[12,"tm_hour","","",24,null],[12,"tm_mday","","",24,null],[12,"tm_mon","","",24,null],[12,"tm_year","","",24,null],[12,"tm_wday","","",24,null],[12,"tm_yday","","",24,null],[12,"tm_isdst","","",24,null],[12,"tm_gmtoff","","",24,null],[12,"tm_zone","","",24,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",25,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",26,null],[12,"dli_fbase","","",26,null],[12,"dli_sname","","",26,null],[12,"dli_saddr","","",26,null],[3,"epoll_event","","",null,null],[12,"events","","",27,null],[12,"u64","","",27,null],[3,"utsname","","",null,null],[12,"sysname","","",28,null],[12,"nodename","","",28,null],[12,"release","","",28,null],[12,"version","","",28,null],[12,"machine","","",28,null],[12,"domainname","","",28,null],[3,"lconv","","",null,null],[12,"decimal_point","","",29,null],[12,"thousands_sep","","",29,null],[12,"grouping","","",29,null],[12,"int_curr_symbol","","",29,null],[12,"currency_symbol","","",29,null],[12,"mon_decimal_point","","",29,null],[12,"mon_thousands_sep","","",29,null],[12,"mon_grouping","","",29,null],[12,"positive_sign","","",29,null],[12,"negative_sign","","",29,null],[12,"int_frac_digits","","",29,null],[12,"frac_digits","","",29,null],[12,"p_cs_precedes","","",29,null],[12,"p_sep_by_space","","",29,null],[12,"n_cs_precedes","","",29,null],[12,"n_sep_by_space","","",29,null],[12,"p_sign_posn","","",29,null],[12,"n_sign_posn","","",29,null],[12,"int_p_cs_precedes","","",29,null],[12,"int_p_sep_by_space","","",29,null],[12,"int_n_cs_precedes","","",29,null],[12,"int_n_sep_by_space","","",29,null],[12,"int_p_sign_posn","","",29,null],[12,"int_n_sign_posn","","",29,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",30,null],[12,"sigev_signo","","",30,null],[12,"sigev_notify","","",30,null],[12,"sigev_notify_thread_id","","",30,null],[3,"dirent","","",null,null],[12,"d_ino","","",31,null],[12,"d_off","","",31,null],[12,"d_reclen","","",31,null],[12,"d_type","","",31,null],[12,"d_name","","",31,null],[3,"dirent64","","",null,null],[12,"d_ino","","",32,null],[12,"d_off","","",32,null],[12,"d_reclen","","",32,null],[12,"d_type","","",32,null],[12,"d_name","","",32,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",33,null],[12,"rlim_max","","",33,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",34,null],[12,"gl_pathv","","",34,null],[12,"gl_offs","","",34,null],[12,"gl_flags","","",34,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",35,null],[12,"ifa_name","","",35,null],[12,"ifa_flags","","",35,null],[12,"ifa_addr","","",35,null],[12,"ifa_netmask","","",35,null],[12,"ifa_ifu","","",35,null],[12,"ifa_data","","",35,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",36,null],[12,"pw_passwd","","",36,null],[12,"pw_uid","","",36,null],[12,"pw_gid","","",36,null],[12,"pw_gecos","","",36,null],[12,"pw_dir","","",36,null],[12,"pw_shell","","",36,null],[3,"spwd","","",null,null],[12,"sp_namp","","",37,null],[12,"sp_pwdp","","",37,null],[12,"sp_lstchg","","",37,null],[12,"sp_min","","",37,null],[12,"sp_max","","",37,null],[12,"sp_warn","","",37,null],[12,"sp_inact","","",37,null],[12,"sp_expire","","",37,null],[12,"sp_flag","","",37,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",38,null],[12,"f_frsize","","",38,null],[12,"f_blocks","","",38,null],[12,"f_bfree","","",38,null],[12,"f_bavail","","",38,null],[12,"f_files","","",38,null],[12,"f_ffree","","",38,null],[12,"f_favail","","",38,null],[12,"f_fsid","","",38,null],[12,"f_flag","","",38,null],[12,"f_namemax","","",38,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",39,null],[12,"dqb_bsoftlimit","","",39,null],[12,"dqb_curspace","","",39,null],[12,"dqb_ihardlimit","","",39,null],[12,"dqb_isoftlimit","","",39,null],[12,"dqb_curinodes","","",39,null],[12,"dqb_btime","","",39,null],[12,"dqb_itime","","",39,null],[12,"dqb_valid","","",39,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",40,null],[12,"ssi_errno","","",40,null],[12,"ssi_code","","",40,null],[12,"ssi_pid","","",40,null],[12,"ssi_uid","","",40,null],[12,"ssi_fd","","",40,null],[12,"ssi_tid","","",40,null],[12,"ssi_band","","",40,null],[12,"ssi_overrun","","",40,null],[12,"ssi_trapno","","",40,null],[12,"ssi_status","","",40,null],[12,"ssi_int","","",40,null],[12,"ssi_ptr","","",40,null],[12,"ssi_utime","","",40,null],[12,"ssi_stime","","",40,null],[12,"ssi_addr","","",40,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",41,null],[12,"mq_maxmsg","","",41,null],[12,"mq_msgsize","","",41,null],[12,"mq_curmsgs","","",41,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",42,null],[12,"if_name","","",42,null],[3,"msginfo","","",null,null],[12,"msgpool","","",43,null],[12,"msgmap","","",43,null],[12,"msgmax","","",43,null],[12,"msgmnb","","",43,null],[12,"msgmni","","",43,null],[12,"msgssz","","",43,null],[12,"msgtql","","",43,null],[12,"msgseg","","",43,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",44,null],[12,"aio_lio_opcode","","",44,null],[12,"aio_reqprio","","",44,null],[12,"aio_buf","","",44,null],[12,"aio_nbytes","","",44,null],[12,"aio_sigevent","","",44,null],[12,"aio_offset","","",44,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",45,null],[12,"e_exit","","",45,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",46,null],[12,"tv_usec","","",46,null],[3,"utmpx","","",null,null],[12,"ut_type","","",47,null],[12,"ut_pid","","",47,null],[12,"ut_line","","",47,null],[12,"ut_id","","",47,null],[12,"ut_user","","",47,null],[12,"ut_host","","",47,null],[12,"ut_exit","","",47,null],[12,"ut_session","","",47,null],[12,"ut_tv","","",47,null],[12,"ut_addr_v6","","",47,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",48,null],[12,"sa_mask","","",48,null],[12,"sa_flags","","",48,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",49,null],[12,"ss_flags","","",49,null],[12,"ss_size","","",49,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",50,null],[12,"si_errno","","",50,null],[12,"si_code","","",50,null],[12,"_pad","","",50,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",51,null],[12,"gl_pathv","","",51,null],[12,"gl_offs","","",51,null],[12,"gl_flags","","",51,null],[3,"ucred","","",null,null],[12,"pid","","",52,null],[12,"uid","","",52,null],[12,"gid","","",52,null],[3,"statfs","","",null,null],[12,"f_type","","",53,null],[12,"f_bsize","","",53,null],[12,"f_blocks","","",53,null],[12,"f_bfree","","",53,null],[12,"f_bavail","","",53,null],[12,"f_files","","",53,null],[12,"f_ffree","","",53,null],[12,"f_fsid","","",53,null],[12,"f_namelen","","",53,null],[12,"f_frsize","","",53,null],[3,"msghdr","","",null,null],[12,"msg_name","","",54,null],[12,"msg_namelen","","",54,null],[12,"msg_iov","","",54,null],[12,"msg_iovlen","","",54,null],[12,"msg_control","","",54,null],[12,"msg_controllen","","",54,null],[12,"msg_flags","","",54,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",55,null],[12,"cmsg_level","","",55,null],[12,"cmsg_type","","",55,null],[3,"termios","","",null,null],[12,"c_iflag","","",56,null],[12,"c_oflag","","",56,null],[12,"c_cflag","","",56,null],[12,"c_lflag","","",56,null],[12,"c_line","","",56,null],[12,"c_cc","","",56,null],[12,"c_ispeed","","",56,null],[12,"c_ospeed","","",56,null],[3,"flock","","",null,null],[12,"l_type","","",57,null],[12,"l_whence","","",57,null],[12,"l_start","","",57,null],[12,"l_len","","",57,null],[12,"l_pid","","",57,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",58,null],[12,"loads","","",58,null],[12,"totalram","","",58,null],[12,"freeram","","",58,null],[12,"sharedram","","",58,null],[12,"bufferram","","",58,null],[12,"totalswap","","",58,null],[12,"freeswap","","",58,null],[12,"procs","","",58,null],[12,"pad","","",58,null],[12,"totalhigh","","",58,null],[12,"freehigh","","",58,null],[12,"mem_unit","","",58,null],[12,"_f","","",58,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",59,null],[12,"msg_stime","","",59,null],[12,"msg_rtime","","",59,null],[12,"msg_ctime","","",59,null],[12,"msg_qnum","","",59,null],[12,"msg_qbytes","","",59,null],[12,"msg_lspid","","",59,null],[12,"msg_lrpid","","",59,null],[3,"stat","","",null,null],[12,"st_dev","","",60,null],[12,"st_ino","","",60,null],[12,"st_nlink","","",60,null],[12,"st_mode","","",60,null],[12,"st_uid","","",60,null],[12,"st_gid","","",60,null],[12,"st_rdev","","",60,null],[12,"st_size","","",60,null],[12,"st_blksize","","",60,null],[12,"st_blocks","","",60,null],[12,"st_atime","","",60,null],[12,"st_atime_nsec","","",60,null],[12,"st_mtime","","",60,null],[12,"st_mtime_nsec","","",60,null],[12,"st_ctime","","",60,null],[12,"st_ctime_nsec","","",60,null],[3,"stat64","","",null,null],[12,"st_dev","","",61,null],[12,"st_ino","","",61,null],[12,"st_nlink","","",61,null],[12,"st_mode","","",61,null],[12,"st_uid","","",61,null],[12,"st_gid","","",61,null],[12,"st_rdev","","",61,null],[12,"st_size","","",61,null],[12,"st_blksize","","",61,null],[12,"st_blocks","","",61,null],[12,"st_atime","","",61,null],[12,"st_atime_nsec","","",61,null],[12,"st_mtime","","",61,null],[12,"st_mtime_nsec","","",61,null],[12,"st_ctime","","",61,null],[12,"st_ctime_nsec","","",61,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",62,null],[12,"exponent","","",62,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",63,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",64,null],[12,"swd","","",64,null],[12,"ftw","","",64,null],[12,"fop","","",64,null],[12,"rip","","",64,null],[12,"rdp","","",64,null],[12,"mxcsr","","",64,null],[12,"mxcr_mask","","",64,null],[12,"_st","","",64,null],[12,"_xmm","","",64,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",65,null],[12,"fpregs","","",65,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",66,null],[12,"uc_link","","",66,null],[12,"uc_stack","","",66,null],[12,"uc_mcontext","","",66,null],[12,"uc_sigmask","","",66,null],[3,"ipc_perm","","",null,null],[12,"__key","","",67,null],[12,"uid","","",67,null],[12,"gid","","",67,null],[12,"cuid","","",67,null],[12,"cgid","","",67,null],[12,"mode","","",67,null],[12,"__seq","","",67,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",68,null],[12,"shm_segsz","","",68,null],[12,"shm_atime","","",68,null],[12,"shm_dtime","","",68,null],[12,"shm_ctime","","",68,null],[12,"shm_cpid","","",68,null],[12,"shm_lpid","","",68,null],[12,"shm_nattch","","",68,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"clock_settime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"initgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"mknodat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"unshare","","",null,null],[5,"setns","","",null,null],[5,"sem_timedwait","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"sethostname","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["matches"] = {"doc":"","items":[[14,"matches","matches","",null,null],[14,"_matches_tt_as_expr_hack","","Work around \"error: unexpected token: `an interpolated tt`\", whatever that means.",null,null],[14,"assert_matches","","",null,null],[14,"debug_assert_matches","","",null,null]],"paths":[]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[5,"memchr","memchr","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null]],"paths":[]};
searchIndex["mime"] = {"doc":"Mime","items":[[3,"Mime","mime","Mime, or Media Type. Encapsulates common registers types.",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[12,"2","","",0,null],[4,"TopLevel","","",null,null],[13,"Star","","",1,null],[13,"Text","","",1,null],[13,"Image","","",1,null],[13,"Audio","","",1,null],[13,"Video","","",1,null],[13,"Application","","",1,null],[13,"Multipart","","",1,null],[13,"Message","","",1,null],[13,"Model","","",1,null],[13,"Ext","","",1,null],[4,"SubLevel","","",null,null],[13,"Star","","",2,null],[13,"Plain","","",2,null],[13,"Html","","",2,null],[13,"Xml","","",2,null],[13,"Javascript","","",2,null],[13,"Css","","",2,null],[13,"EventStream","","",2,null],[13,"Json","","",2,null],[13,"WwwFormUrlEncoded","","",2,null],[13,"Msgpack","","",2,null],[13,"OctetStream","","",2,null],[13,"FormData","","",2,null],[13,"Png","","",2,null],[13,"Gif","","",2,null],[13,"Bmp","","",2,null],[13,"Jpeg","","",2,null],[13,"Mpeg","","",2,null],[13,"Mp4","","",2,null],[13,"Ogg","","",2,null],[13,"Ext","","",2,null],[4,"Attr","","",null,null],[13,"Charset","","",3,null],[13,"Boundary","","",3,null],[13,"Q","","",3,null],[13,"Ext","","",3,null],[4,"Value","","",null,null],[13,"Utf8","","",4,null],[13,"Ext","","",4,null],[6,"Param","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"toplevel"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"as_str","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"sublevel"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"attr"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"as_str","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"as_str","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_param","","",0,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"option"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[14,"mime","","Easily create a Mime without having to import so many enums.",null,null]],"paths":[[3,"Mime"],[4,"TopLevel"],[4,"SubLevel"],[4,"Attr"],[4,"Value"]]};
searchIndex["native_tls"] = {"doc":"An abstraction over platform-specific TLS implementations.","items":[[3,"Error","native_tls","An error returned from the TLS implementation.",null,null],[3,"Pkcs12","","A PKCS #12 archive.",null,null],[3,"Certificate","","An X509 certificate.",null,null],[3,"MidHandshakeTlsStream","","A TLS stream which has been interrupted midway through the handshake process.",null,null],[3,"TlsConnectorBuilder","","A builder for `TlsConnector`s.",null,null],[3,"TlsConnector","","A builder for client-side TLS connections.",null,null],[3,"TlsAcceptorBuilder","","A builder for `TlsAcceptor`s.",null,null],[3,"TlsAcceptor","","A builder for server-side TLS connections.",null,null],[3,"TlsStream","","A stream managing a TLS session.",null,null],[4,"HandshakeError","","An error returned from `ClientBuilder::handshake`.",null,null],[13,"Failure","","A fatal error.",0,null],[13,"Interrupted","","A stream interrupted midway through the handshake process due to a `WouldBlock` error.",0,null],[4,"Protocol","","SSL/TLS protocol versions.",null,null],[13,"Sslv3","","The SSL 3.0 protocol.",1,null],[13,"Tlsv10","","The TLS 1.0 protocol.",1,null],[13,"Tlsv11","","The TLS 1.1 protocol.",1,null],[13,"Tlsv12","","The TLS 1.2 protocol.",1,null],[0,"backend","","TLS backend-specific functionality.",null,null],[0,"openssl","native_tls::backend","OpenSSL-specific functionality.",null,null],[8,"TlsConnectorBuilderExt","native_tls::backend::openssl","OpenSSL-specific extensions to `TlsConnectorBuilder`.",null,null],[10,"builder","","Returns a shared reference to the inner `SslConnectorBuilder`.",2,{"inputs":[{"name":"self"}],"output":{"name":"sslconnectorbuilder"}}],[10,"builder_mut","","Returns a mutable reference to the inner `SslConnectorBuilder`.",2,{"inputs":[{"name":"self"}],"output":{"name":"sslconnectorbuilder"}}],[8,"TlsAcceptorBuilderExt","","OpenSSL-specific extensions to `TlsAcceptorBuilder`.",null,null],[10,"builder","","Returns a shared reference to the inner `SslAcceptorBuilder`.",3,{"inputs":[{"name":"self"}],"output":{"name":"sslacceptorbuilder"}}],[10,"builder_mut","","Returns a mutable reference to the inner `SslAcceptorBuilder`.",3,{"inputs":[{"name":"self"}],"output":{"name":"sslacceptorbuilder"}}],[8,"TlsStreamExt","","OpenSSL-specific extensions to `TlsStream`.",null,null],[10,"raw_stream","","Returns a shared reference to the OpenSSL `SslStream`.",4,{"inputs":[{"name":"self"}],"output":{"name":"sslstream"}}],[10,"raw_stream_mut","","Returns a mutable reference to the OpenSSL `SslStream`.",4,{"inputs":[{"name":"self"}],"output":{"name":"sslstream"}}],[8,"ErrorExt","","OpenSSL-specific extensions to `Error`",null,null],[10,"openssl_error","","Extract the underlying OpenSSL error for inspection.",5,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"builder","native_tls","",6,{"inputs":[{"name":"self"}],"output":{"name":"sslconnectorbuilder"}}],[11,"builder_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"sslconnectorbuilder"}}],[11,"builder","","",7,{"inputs":[{"name":"self"}],"output":{"name":"sslacceptorbuilder"}}],[11,"builder_mut","","",7,{"inputs":[{"name":"self"}],"output":{"name":"sslacceptorbuilder"}}],[11,"raw_stream","","",8,{"inputs":[{"name":"self"}],"output":{"name":"sslstream"}}],[11,"raw_stream_mut","","",8,{"inputs":[{"name":"self"}],"output":{"name":"sslstream"}}],[11,"openssl_error","","",9,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[6,"Result","","A typedef of the result type returned by many methods.",null,null],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",9,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from_der","","Parses a DER-formatted PKCS #12 archive, using the specified password to decrypt the key.",10,null],[11,"from_der","","Parses a DER-formatted X509 certificate.",11,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a shared reference to the inner stream.",12,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the inner stream.",12,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"handshake","","Restarts the handshake process.",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"handshakeerror"}],"output":{"name":"handshakeerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"protocol"}}],[11,"identity","","Sets the identity to be used for client certificate authentication.",6,{"inputs":[{"name":"self"},{"name":"pkcs12"}],"output":{"name":"result"}}],[11,"supported_protocols","","Sets the protocols which the connector will support.",6,null],[11,"add_root_certificate","","Adds a certificate to the set of roots that the connector will trust.",6,{"inputs":[{"name":"self"},{"name":"certificate"}],"output":{"name":"result"}}],[11,"build","","Consumes the builder, returning a `TlsConnector`.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"builder","","Returns a new builder for a `TlsConnector`.",13,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Initiates a TLS handshake.",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"s"}],"output":{"name":"result"}}],[11,"danger_connect_without_providing_domain_for_certificate_verification_and_server_name_indication","","Like `connect`, but does not validate the server's domain name against its certificate.",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"supported_protocols","","Sets the protocols which the acceptor will support.",7,null],[11,"build","","Consumes the builder, returning a `TlsAcceptor`.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"builder","","Returns a new builder for a `TlsAcceptor`.",14,{"inputs":[{"name":"pkcs12"}],"output":{"name":"result"}}],[11,"accept","","Initiates a TLS handshake.",14,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a shared reference to the inner stream.",8,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the inner stream.",8,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"buffered_read_size","","Returns the number of bytes that can be read without resulting in any network calls.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the TLS session.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",8,null],[11,"write","","",8,null],[11,"flush","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[4,"HandshakeError"],[4,"Protocol"],[8,"TlsConnectorBuilderExt"],[8,"TlsAcceptorBuilderExt"],[8,"TlsStreamExt"],[8,"ErrorExt"],[3,"TlsConnectorBuilder"],[3,"TlsAcceptorBuilder"],[3,"TlsStream"],[3,"Error"],[3,"Pkcs12"],[3,"Certificate"],[3,"MidHandshakeTlsStream"],[3,"TlsConnector"],[3,"TlsAcceptor"]]};
searchIndex["nom"] = {"doc":"nom, eating data byte by byte","items":[[3,"ProducerRepeat","nom","ProducerRepeat takes a single value, and generates it at each step",null,null],[3,"MemProducer","","A MemProducer generates values from an in memory byte buffer",null,null],[3,"FileProducer","","",null,null],[3,"MapConsumer","","MapConsumer takes a function S -> T and applies it on a consumer producing values of type S",null,null],[3,"ChainConsumer","","ChainConsumer takes a consumer C1 R -> S, and a consumer C2 S -> T, and makes a consumer R -> T by applying C2 on C1's result",null,null],[4,"ErrorKind","","indicates which parser returned an error",null,null],[13,"Custom","","",0,null],[13,"Tag","","",0,null],[13,"MapRes","","",0,null],[13,"MapOpt","","",0,null],[13,"Alt","","",0,null],[13,"IsNot","","",0,null],[13,"IsA","","",0,null],[13,"SeparatedList","","",0,null],[13,"SeparatedNonEmptyList","","",0,null],[13,"Many0","","",0,null],[13,"Many1","","",0,null],[13,"ManyTill","","",0,null],[13,"Count","","",0,null],[13,"TakeUntilAndConsume","","",0,null],[13,"TakeUntil","","",0,null],[13,"TakeUntilEitherAndConsume","","",0,null],[13,"TakeUntilEither","","",0,null],[13,"LengthValue","","",0,null],[13,"TagClosure","","",0,null],[13,"Alpha","","",0,null],[13,"Digit","","",0,null],[13,"HexDigit","","",0,null],[13,"OctDigit","","",0,null],[13,"AlphaNumeric","","",0,null],[13,"Space","","",0,null],[13,"MultiSpace","","",0,null],[13,"LengthValueFn","","",0,null],[13,"Eof","","",0,null],[13,"ExprOpt","","",0,null],[13,"ExprRes","","",0,null],[13,"CondReduce","","",0,null],[13,"Switch","","",0,null],[13,"TagBits","","",0,null],[13,"OneOf","","",0,null],[13,"NoneOf","","",0,null],[13,"Char","","",0,null],[13,"CrLf","","",0,null],[13,"RegexpMatch","","",0,null],[13,"RegexpMatches","","",0,null],[13,"RegexpFind","","",0,null],[13,"RegexpCapture","","",0,null],[13,"RegexpCaptures","","",0,null],[13,"TakeWhile1","","",0,null],[13,"Complete","","",0,null],[13,"Fix","","",0,null],[13,"Escaped","","",0,null],[13,"EscapedTransform","","",0,null],[13,"TagStr","","",0,null],[13,"IsNotStr","","",0,null],[13,"IsAStr","","",0,null],[13,"TakeWhile1Str","","",0,null],[13,"NonEmpty","","",0,null],[13,"ManyMN","","",0,null],[13,"TakeUntilAndConsumeStr","","",0,null],[13,"TakeUntilStr","","",0,null],[13,"Not","","",0,null],[13,"Permutation","","",0,null],[13,"Verify","","",0,null],[13,"TakeTill1","","",0,null],[4,"CompareResult","","indicates wether a comparison was successful, an error, or if more data was needed",null,null],[13,"Ok","","",1,null],[13,"Incomplete","","",1,null],[13,"Error","","",1,null],[4,"Needed","","Contains information on needed data if a parser returned `Incomplete`",null,null],[13,"Unknown","","needs more data, but we do not know how much",2,null],[13,"Size","","contains the required data size",2,null],[4,"IResult","","Holds the result of parsing functions",null,null],[13,"Done","","indicates a correct parsing, the first field containing the rest of the unparsed data, the second field contains the parsed data",3,null],[13,"Error","","contains a Err, an enum that can indicate an error code, a position in the input, and a pointer to another error, making a list of errors in the parsing tree",3,null],[13,"Incomplete","","Incomplete contains a Needed, an enum than can represent a known quantity of input data, or unknown",3,null],[4,"IError","","This is the same as IResult, but without Done",null,null],[13,"Error","","",4,null],[13,"Incomplete","","",4,null],[4,"Endianness","","Configurable endianness",null,null],[13,"Big","","",5,null],[13,"Little","","",5,null],[4,"Input","","",null,null],[13,"Element","","",6,null],[13,"Empty","","",6,null],[13,"Eof","","",6,null],[4,"ConsumerState","","Stores a consumer's current computation state",null,null],[13,"Done","","A value of type O has been produced",7,null],[13,"Error","","An error of type E has been encountered",7,null],[13,"Continue","","Continue applying, and pass a message of type M to the data source",7,null],[4,"Move","","",null,null],[13,"Consume","","indcates how much data was consumed",8,null],[13,"Seek","","indicates where in the input the consumer must seek",8,null],[13,"Await","","indicates more data is needed",8,null],[4,"FileProducerState","","",null,null],[13,"Normal","","",9,null],[13,"Error","","",9,null],[13,"Eof","","",9,null],[5,"slice_to_offsets","","",null,null],[5,"code_from_offset","","",null,null],[5,"reset_color","","",null,{"inputs":[{"name":"vec"}],"output":null}],[5,"write_color","","",null,{"inputs":[{"name":"vec"},{"name":"u8"}],"output":null}],[5,"print_codes","","",null,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"string"}}],[5,"error_to_u32","","",null,{"inputs":[{"name":"errorkind"}],"output":{"name":"u32"}}],[5,"tag_cl","","",null,null],[5,"print","","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"begin","","",null,null],[5,"crlf","","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"not_line_ending","","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"line_ending","","Recognizes an end of line (both '\\n' and '\\r\\n')",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"eol","","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"is_alphabetic","","Tests if byte is ASCII alphabetic: A-Z, a-z",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_digit","","Tests if byte is ASCII digit: 0-9",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_hex_digit","","Tests if byte is ASCII hex digit: 0-9, A-F, a-f",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_oct_digit","","Tests if byte is ASCII octal digit: 0-7",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_alphanumeric","","Tests if byte is ASCII alphanumeric: A-Z, a-z, 0-9",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_space","","Tests if byte is ASCII space or tab",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"alpha","","Recognizes one or more lowercase and uppercase alphabetic characters: a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"digit","","Recognizes one or more numerical characters: 0-9",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"hex_digit","","Recognizes one or more hexadecimal numerical characters: 0-9, A-F, a-f",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"oct_digit","","Recognizes one or more octal characters: 0-7",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"alphanumeric","","Recognizes one or more numerical and alphabetic characters: 0-9a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"space","","Recognizes one or more spaces and tabs",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"multispace","","Recognizes one or more spaces, tabs, carriage returns and line feeds",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"sized_buffer","","",null,null],[5,"be_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",null,null],[5,"be_u16","","Recognizes big endian unsigned 2 bytes integer",null,null],[5,"be_u32","","Recognizes big endian unsigned 4 bytes integer",null,null],[5,"be_u64","","Recognizes big endian unsigned 8 bytes integer",null,null],[5,"be_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",null,null],[5,"be_i16","","Recognizes big endian signed 2 bytes integer",null,null],[5,"be_i32","","Recognizes big endian signed 4 bytes integer",null,null],[5,"be_i64","","Recognizes big endian signed 8 bytes integer",null,null],[5,"le_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",null,null],[5,"le_u16","","Recognizes little endian unsigned 2 bytes integer",null,null],[5,"le_u32","","Recognizes little endian unsigned 4 bytes integer",null,null],[5,"le_u64","","Recognizes little endian unsigned 8 bytes integer",null,null],[5,"le_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",null,null],[5,"le_i16","","Recognizes little endian signed 2 bytes integer",null,null],[5,"le_i32","","Recognizes little endian signed 4 bytes integer",null,null],[5,"le_i64","","Recognizes little endian signed 8 bytes integer",null,null],[5,"be_f32","","Recognizes big endian 4 bytes floating point number",null,null],[5,"be_f64","","Recognizes big endian 8 bytes floating point number",null,null],[5,"le_f32","","Recognizes little endian 4 bytes floating point number",null,null],[5,"le_f64","","Recognizes little endian 8 bytes floating point number",null,null],[5,"hex_u32","","Recognizes a hex-encoded integer",null,null],[5,"non_empty","","Recognizes non empty buffers",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"rest","","Return the remaining input.",null,null],[5,"rest_s","","Return the remaining input, for strings.",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"float","","Recognizes floating point number in a byte string and returs a f32",null,null],[5,"float_s","","Recognizes floating point number in a string and returs a f32",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"double","","Recognizes floating point number in a byte string and returs a f64",null,null],[5,"double_s","","Recognizes floating point number in a string and returs a f64",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"newline","","Matches a newline character '\\n'",null,null],[5,"tab","","Matches a tab character '\\t'",null,null],[5,"anychar","","",null,null],[5,"shift","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"compareresult"}],"output":{"name":"bool"}}],[0,"simple_errors","","Error management",null,null],[6,"Err","nom::simple_errors","",null,null],[11,"map_err","nom","Maps a `IResult<I, O, E>` to `IResult<I, O, N>` by appling a function to a contained `Error` value, leaving `Done` and `Incomplete` value untouched.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"unwrap_err","","Unwrap the contained `Error(E)` value, or panic if the `IResult` is not `Error`.",3,{"inputs":[{"name":"self"}],"output":{"name":"err"}}],[11,"to_full_result","","Convert the IResult to a std::result::Result",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_result","","Convert the IResult to a std::result::Result, or panic if the `IResult` is `Incomplete`",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"description","nom::simple_errors","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","nom","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"needed"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"needed"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"needed"}}],[11,"is_known","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"map","","Maps a `Needed` to `Needed` by appling a function to a contained `Size` value.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"needed"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"ierror"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"ierror"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"ierror"}}],[11,"is_done","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_err","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_incomplete","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"or","","",3,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"iresult"}}],[11,"map","","Maps a `IResult<I, O, E>` to `IResult<I, N, E>` by appling a function to a contained `Done` value, leaving `Error` and `Incomplete` value untouched.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_inc","","Maps a `IResult<I, O, E>` to `IResult<I, O, E>` by appling a function to a contained `Incomplete` value, leaving `Done` and `Error` value untouched.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"unwrap","","Unwrap the contained `Done(I, O)` value, or panic if the `IResult` is not `Done`.",3,null],[11,"unwrap_inc","","Unwrap the contained `Incomplete(n)` value, or panic if the `IResult` is not `Incomplete`.",3,{"inputs":[{"name":"self"}],"output":{"name":"needed"}}],[11,"remaining_input","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remaining_input","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remaining_input","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"output","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"output","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"output","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"methods","","Method macro combinators",null,null],[0,"bits","","Bit level parsers and combinators",null,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"endianness"}],"output":{"name":"bool"}}],[0,"whitespace","","Support for whitespace delimited formats",null,null],[5,"sp","nom::whitespace","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[11,"fmt","nom","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"input"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"consumerstate"}}],[11,"map","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"consumerstate"}}],[11,"flat_map","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"consumerstate"}}],[11,"apply","","",11,{"inputs":[{"name":"self"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"new","","",12,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"move"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"move"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"move"}],"output":{"name":"bool"}}],[11,"apply","","",12,{"inputs":[{"name":"self"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"fileproducerstate"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"fileproducerstate"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",13,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"state","","",13,{"inputs":[{"name":"self"}],"output":{"name":"fileproducerstate"}}],[11,"refill","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"resize","","Resize the internal buffer, copy the data to the new one and returned how much data was copied",13,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"apply","","",13,{"inputs":[{"name":"self"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"new","","",14,{"inputs":[{"name":"c"},{"name":"f"}],"output":{"name":"mapconsumer"}}],[11,"handle","","",14,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"consumerstate"}}],[11,"state","","",14,{"inputs":[{"name":"self"}],"output":{"name":"consumerstate"}}],[11,"new","","",15,{"inputs":[{"name":"c1"},{"name":"c2"}],"output":{"name":"chainconsumer"}}],[11,"handle","","",15,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"consumerstate"}}],[11,"state","","",15,{"inputs":[{"name":"self"}],"output":{"name":"consumerstate"}}],[8,"Offset","","useful functions to calculate the offset between slices and show a hexdump of a slice",null,null],[10,"offset","","offset between the first byte of self and the first byte of the argument",16,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"usize"}}],[8,"HexDisplay","","",null,null],[10,"to_hex","","Converts the value of `self` to a hex dump, returning the owned string.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[10,"to_hex_from","","Converts the value of `self` to a hex dump beginning at `from` address, returning the owned string.",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"string"}}],[8,"AsBytes","","",null,null],[10,"as_bytes","","",18,null],[8,"InputLength","","abstract method to calculate the input length",null,null],[10,"input_len","","calculates the input length, as indicated by its name, and the name of the trait itself",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"AsChar","","transforms common types to a char for basic token parsing",null,null],[10,"as_char","","makes a char from self",20,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[10,"is_alpha","","tests that self is an alphabetic character",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_alphanum","","tests that self is an alphabetic character or a decimal digit",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_dec_digit","","tests that self is a decimal digit",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_hex_digit","","tests that self is an hex digit",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_oct_digit","","tests that self is an octal digit",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"InputIter","","abstracts common iteration operations on the input type",null,null],[16,"Item","","",21,null],[16,"RawItem","","",21,null],[16,"Iter","","",21,null],[16,"IterElem","","",21,null],[10,"iter_indices","","returns an iterator over the elements and their byte offsets",21,null],[10,"iter_elements","","returns an iterator over the elements",21,null],[10,"position","","finds the byte position of the element",21,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[10,"slice_index","","get the byte offset from the element's position in the stream",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[8,"InputTake","","abstracts slicing operations",null,null],[10,"take","","returns a slice of `count` bytes",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[10,"take_split","","split the stream at the `count` byte offset",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Compare","","abstracts comparison operations",null,null],[10,"compare","","compares self to another value for equality",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"compareresult"}}],[10,"compare_no_case","","compares self to another value for equality independently of the case.",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"compareresult"}}],[8,"FindToken","","look for self in the given input stream",null,null],[10,"find_token","","",24,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[8,"FindSubstring","","look for a substring in self",null,null],[10,"find_substring","","",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[8,"ParseTo","","abstract method to calculate the input length",null,null],[10,"parse_to","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Slice","","slicing operations using ranges",null,null],[10,"slice","","",27,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"self"}}],[8,"GetInput","","",null,null],[10,"remaining_input","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"GetOutput","","",null,null],[10,"output","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Consumer","","The Consumer trait wraps a computation and its state",null,null],[10,"handle","","implement handle for the current computation, returning the new state of the consumer",30,{"inputs":[{"name":"self"},{"name":"input"}],"output":{"name":"consumerstate"}}],[10,"state","","returns the current state",30,{"inputs":[{"name":"self"}],"output":{"name":"consumerstate"}}],[8,"Producer","","The producer wraps a data source, like file or network, and applies a consumer on it",null,null],[10,"apply","","Applies a consumer once on the produced data, and return the consumer's state",31,{"inputs":[{"name":"self"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"run","","Applies a consumer once on the produced data, and returns the generated value if there is one",31,{"inputs":[{"name":"self"},{"name":"consumer"}],"output":{"name":"option"}}],[14,"dbg","","Prints a message if the parser fails",null,null],[14,"dbg_dmp","","Prints a message and the input if the parser fails",null,null],[14,"fix_error","","translate parser result from IResult<I,O,u32> to IResult<I,O,E> with a custom type",null,null],[14,"flat_map","","`flat_map!(R -> IResult<R,S>, S -> IResult<S,T>) => R -> IResult<R, T>`",null,null],[14,"error_code","","creates a parse error from a `nom::ErrorKind`",null,null],[14,"error_node","","creates a parse error from a `nom::ErrorKind` and the next error in the parsing tree. if \"verbose-errors\" is not activated, it default to only the error code",null,null],[14,"error_position","","creates a parse error from a `nom::ErrorKind` and the position in the input if \"verbose-errors\" is not activated, it default to only the error code",null,null],[14,"error_node_position","","creates a parse error from a `nom::ErrorKind`, the position in the input and the next error in the parsing tree. if \"verbose-errors\" is not activated, it default to only the error code",null,null],[14,"closure","","Wraps a parser in a closure",null,null],[14,"named","","Makes a function from a parser combination",null,null],[14,"named_args","","Makes a function from a parser combination with arguments.",null,null],[14,"named_attr","","Makes a function from a parser combination, with attributes",null,null],[14,"call","","Used to wrap common expressions and function as macros",null,null],[14,"apply","","emulate function currying: `apply!(my_function, arg1, arg2, ...)` becomes `my_function(input, arg1, arg2, ...)`",null,null],[14,"return_error","","Prevents backtracking if the child parser fails",null,null],[14,"add_return_error","","Add an error if the child parser fails",null,null],[14,"complete","","replaces a `Incomplete` returned by the child parser with an `Error`",null,null],[14,"try_parse","","A bit like `std::try!`, this macro will return the remaining input and parsed value if the child parser returned `Done`, and will do an early return for `Error` and `Incomplete` this can provide more flexibility than `do_parse!` if needed",null,null],[14,"map","","`map!(I -> IResult<I,O>, O -> P) => I -> IResult<I, P>` maps a function on the result of a parser",null,null],[14,"map_res","","`map_res!(I -> IResult<I,O>, O -> Result<P>) => I -> IResult<I, P>` maps a function returning a Result on the output of a parser",null,null],[14,"map_opt","","`map_opt!(I -> IResult<I,O>, O -> Option<P>) => I -> IResult<I, P>` maps a function returning an Option on the output of a parser",null,null],[14,"parse_to","","`parse_to!(O) => I -> IResult<I, O>` uses the `parse` method from `std::str::FromStr` to convert the current input to the specified type",null,null],[14,"verify","","`verify!(I -> IResult<I,O>, O -> bool) => I -> IResult<I, O>` returns the result of the child parser if it satisfies a verifcation function",null,null],[14,"value","","`value!(T, R -> IResult<R, S> ) => R -> IResult<R, T>`",null,null],[14,"expr_res","","`expr_res!(Result<E,O>) => I -> IResult<I, O>` evaluate an expression that returns a Result<T,E> and returns a IResult::Done(I,T) if Ok",null,null],[14,"expr_opt","","`expr_opt!(Option<O>) => I -> IResult<I, O>` evaluate an expression that returns a Option and returns a IResult::Done(I,T) if Some",null,null],[14,"opt","","`opt!(I -> IResult<I,O>) => I -> IResult<I, Option<O>>` make the underlying parser optional",null,null],[14,"opt_res","","`opt_res!(I -> IResult<I,O>) => I -> IResult<I, Result<nom::Err,O>>` make the underlying parser optional",null,null],[14,"cond_with_error","","`cond_with_error!(bool, I -> IResult<I,O>) => I -> IResult<I, Option<O>>` Conditional combinator",null,null],[14,"cond","","`cond!(bool, I -> IResult<I,O>) => I -> IResult<I, Option<O>>` Conditional combinator",null,null],[14,"cond_reduce","","`cond_reduce!(bool, I -> IResult<I,O>) => I -> IResult<I, O>` Conditional combinator with error",null,null],[14,"peek","","`peek!(I -> IResult<I,O>) => I -> IResult<I, O>` returns a result without consuming the input",null,null],[14,"not","","`not!(I -> IResult<I,O>) => I -> IResult<I, O>` returns a result only if the embedded parser returns Error or Incomplete does not consume the input",null,null],[14,"tap","","`tap!(name: I -> IResult<I,O> => { block }) => I -> IResult<I, O>` allows access to the parser's result without affecting it",null,null],[14,"eof","","`eof!(i)` returns `i` if it is at the end of input data",null,null],[14,"recognize","","`recognize!(&[T] -> IResult<&[T], O> ) => &[T] -> IResult<&[T], &[T]>` if the child parser was successful, return the consumed input as produced value",null,null],[14,"alt","","`alt!(I -> IResult<I,O> | I -> IResult<I,O> | ... | I -> IResult<I,O> ) => I -> IResult<I, O>` try a list of parsers, return the result of the first successful one",null,null],[14,"alt_complete","","This is a combination of the `alt!` and `complete!` combinators. Rather than returning `Incomplete` on partial input, `alt_complete!` will try the next alternative in the chain. You should use this only if you know you will not receive partial input for the rules you're trying to match (this is almost always the case for parsing programming languages).",null,null],[14,"switch","","`switch!(I -> IResult<I,P>, P => I -> IResult<I,O> | ... | P => I -> IResult<I,O> ) => I -> IResult<I, O>` choose the next parser depending on the result of the first one, if successful, and returns the result of the second parser",null,null],[14,"permutation","","",null,null],[14,"chain","","`chain!(I->IResult<I,A> ~ I->IResult<I,B> ~ ... I->IResult<I,X> , || { return O } ) => I -> IResult<I, O>` chains parsers and assemble the results through a closure",null,null],[14,"tuple","","`tuple!(I->IResult<I,A>, I->IResult<I,B>, ... I->IResult<I,X>) => I -> IResult<I, (A, B, ..., X)>` chains parsers and assemble the sub results in a tuple.",null,null],[14,"pair","","`pair!(I -> IResult<I,O>, I -> IResult<I,P>) => I -> IResult<I, (O,P)>` pair(X,Y), returns (x,y)",null,null],[14,"separated_pair","","`separated_pair!(I -> IResult<I,O>, I -> IResult<I, T>, I -> IResult<I,P>) => I -> IResult<I, (O,P)>` separated_pair(X,sep,Y) returns (x,y)",null,null],[14,"preceded","","`preceded!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, O>` preceded(opening, X) returns X",null,null],[14,"terminated","","`terminated!(I -> IResult<I,O>, I -> IResult<I,T>) => I -> IResult<I, O>` terminated(X, closing) returns X",null,null],[14,"delimited","","`delimited!(I -> IResult<I,T>, I -> IResult<I,O>, I -> IResult<I,U>) => I -> IResult<I, O>` delimited(opening, X, closing) returns X",null,null],[14,"do_parse","","`do_parse!(I->IResult<I,A> >> I->IResult<I,B> >> ... I->IResult<I,X> , ( O ) ) => I -> IResult<I, O>` do_parse applies sub parsers in a sequence. it can store intermediary results and make them available for later parsers",null,null],[14,"separated_list","","`separated_list!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` separated_list(sep, X) returns Vec",null,null],[14,"separated_nonempty_list","","`separated_nonempty_list!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` separated_nonempty_list(sep, X) returns Vec",null,null],[14,"many0","","`many0!(I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser 0 or more times and returns the list of results in a Vec",null,null],[14,"many1","","`many1!(I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser 1 or more times and returns the list of results in a Vec",null,null],[14,"many_till","","`many_till!(I -> IResult<I,O>, I -> IResult<I,P>) => I -> IResult<I, (Vec<O>, P)>` Applies the first parser until the second applies. Returns a tuple containing the list of results from the first in a Vec and the result of the second.",null,null],[14,"many_m_n","","`many_m_n!(usize, usize, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser between m and n times (n included) and returns the list of results in a Vec",null,null],[14,"count","","`count!(I -> IResult<I,O>, nb) => I -> IResult<I, Vec<O>>` Applies the child parser a specified number of times",null,null],[14,"count_fixed","","`count_fixed!(O, I -> IResult<I,O>, nb) => I -> IResult<I, [O; nb]>` Applies the child parser a fixed number of times and returns a fixed size array The type must be specified and it must be `Copy`",null,null],[14,"length_count","","`length_count!(I -> IResult<I, nb>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` gets a number from the first parser, then applies the second parser that many times",null,null],[14,"length_data","","`length_data!(I -> IResult<I, nb>) => O`",null,null],[14,"length_value","","`length_value!(I -> IResult<I, nb>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` gets a number from the first parser, takes a subslice of the input of that size, then applies the second parser on that subslice. If the second parser returns `Incomplete`, `length_value` will return an error",null,null],[14,"fold_many0","","`fold_many0!(I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser 0 or more times and folds the list of return values",null,null],[14,"fold_many1","","`fold_many1!(I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser 1 or more times and folds the list of return values",null,null],[14,"fold_many_m_n","","`fold_many_m_n!(usize, usize, I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser between m and n times (n included) and folds the list of return value",null,null],[14,"method","","Makes a method from a parser combination",null,null],[14,"call_m","","Used to called methods then move self back into self",null,null],[14,"apply_m","","emulate function currying for method calls on structs `apply_m!(self.my_function, arg1, arg2, ...)` becomes `self.my_function(input, arg1, arg2, ...)`",null,null],[14,"tag","","`tag!(&[T]: nom::AsBytes) => &[T] -> IResult<&[T], &[T]>` declares a byte array as a suite to recognize",null,null],[14,"tag_no_case","","`tag_no_case!(&[T]) => &[T] -> IResult<&[T], &[T]>` declares a case insensitive ascii string as a suite to recognize",null,null],[14,"is_not","","`is_not!(&[T:AsBytes]) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes that do not appear in the provided array",null,null],[14,"is_a","","`is_a!(&[T]) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes that appear in the provided array",null,null],[14,"escaped","","`escaped!(&[T] -> IResult<&[T], &[T]>, T, &[T] -> IResult<&[T], &[T]>) => &[T] -> IResult<&[T], &[T]>` matches a byte string with escaped characters.",null,null],[14,"escaped_transform","","`escaped_transform!(&[T] -> IResult<&[T], &[T]>, T, &[T] -> IResult<&[T], &[T]>) => &[T] -> IResult<&[T], Vec<T>>` matches a byte string with escaped characters.",null,null],[14,"take_while","","`take_while!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes until the provided function fails.",null,null],[14,"take_while1","","`take_while1!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest (non empty) list of bytes until the provided function fails.",null,null],[14,"take_till","","`take_till!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes until the provided function succeeds",null,null],[14,"take_till1","","`take_till1!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest non empty list of bytes until the provided function succeeds",null,null],[14,"take","","`take!(nb) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming the specified number of bytes",null,null],[14,"take_str","","`take!(nb) => &[T] -> IResult<&[T], &str>` same as take! but returning a &str",null,null],[14,"take_until_and_consume","","`take_until_and_consume!(tag) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming bytes until the specified byte sequence is found, and consumes it",null,null],[14,"take_until_and_consume1","","`take_until_and_consume1!(tag) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming bytes (at least 1) until the specified byte sequence is found, and consumes it",null,null],[14,"take_until","","`take_until!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds the specified tag",null,null],[14,"take_until1","","`take_until1!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds the specified tag",null,null],[14,"take_until_either_and_consume","","`take_until_either_and_consume!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds any of the specified characters, and consume it",null,null],[14,"take_until_either","","`take_until_either!(tag) => &[T] -> IResult<&[T], &[T]>`",null,null],[14,"length_bytes","","`length_bytes!(&[T] -> IResult<&[T], nb>) => &[T] -> IResult<&[T], &[T]>` Gets a number from the first parser, then extracts that many bytes from the remaining stream",null,null],[14,"bits","","`bits!( parser ) => ( &[u8], (&[u8], usize) -> IResult<(&[u8], usize), T> ) -> IResult<&[u8], T>` transforms its byte slice input into a bit stream for the underlying parsers",null,null],[14,"take_bits","","`take_bits!(type, nb) => ( (&[T], usize), U, usize) -> IResult<(&[T], usize), U>` generates a parser consuming the specified number of bits.",null,null],[14,"tag_bits","","matches an integer pattern to a bitstream. The number of bits of the input to compare must be specified",null,null],[14,"u16","","if the parameter is nom::Endianness::Big, parse a big endian u16 integer, otherwise a little endian u16 integer",null,null],[14,"u32","","if the parameter is nom::Endianness::Big, parse a big endian u32 integer, otherwise a little endian u32 integer",null,null],[14,"u64","","if the parameter is nom::Endianness::Big, parse a big endian u64 integer, otherwise a little endian u64 integer",null,null],[14,"i16","","if the parameter is nom::Endianness::Big, parse a big endian i16 integer, otherwise a little endian i16 integer",null,null],[14,"i32","","if the parameter is nom::Endianness::Big, parse a big endian i32 integer, otherwise a little endian i32 integer",null,null],[14,"i64","","if the parameter is nom::Endianness::Big, parse a big endian i64 integer, otherwise a little endian i64 integer",null,null],[14,"one_of","","matches one of the provided characters",null,null],[14,"none_of","","matches anything but the provided characters",null,null],[14,"char","","matches one character: `char!(char) => &[u8] -> IResult<&[u8], char>",null,null],[14,"wrap_sep","","",null,null],[14,"eat_separator","","helper macros to build a separator parser",null,null],[14,"sep","","sep is the parser rewriting macro for whitespace separated formats",null,null],[14,"ws","","`ws!(I -> IResult<I,O>) => I -> IResult<I, O>`",null,null],[14,"consumer_from_parser","","",null,null],[14,"tag_s","","`tag_s!(&str) => &str -> IResult<&str, &str>` declares a string as a suite to recognize",null,null],[14,"tag_no_case_s","","`tag_no_case_s!(&str) => &str -> IResult<&str, &str>` declares a case-insensitive string as a suite to recognize",null,null],[14,"take_s","","`take_s!(nb) => &str -> IResult<&str, &str>` generates a parser consuming the specified number of characters",null,null],[14,"is_not_s","","`is_not_s!(&str) => &str -> IResult<&str, &str>` returns the longest list of characters that do not appear in the provided array",null,null],[14,"is_a_s","","`is_a_s!(&str) => &str -> IResult<&str, &str>` returns the longest list of characters that appear in the provided array",null,null],[14,"take_while_s","","`take_while_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest list of characters until the provided function fails.",null,null],[14,"take_while1_s","","`take_while1_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest (non empty) list of characters until the provided function fails.",null,null],[14,"take_till_s","","`take_till_s!(&str -> bool) => &str -> IResult<&str, &str>` returns the longest list of characters until the provided function succeeds",null,null],[14,"take_till1_s","","`take_till1_s!(&str -> bool) => &str -> IResult<&str, &str>` returns the longest non empty list of characters until the provided function succeeds",null,null],[14,"take_until_and_consume_s","","`take_until_and_consume_s!(&str) => &str -> IResult<&str, &str>` generates a parser consuming all chars until the specified string is found and consumes it",null,null],[14,"take_until_s","","`take_until_s!(&str) => &str -> IResult<&str, &str>` generates a parser consuming all chars until the specified string is found and leaves it in the remaining input",null,null],[11,"run","","Applies a consumer once on the produced data, and returns the generated value if there is one",31,{"inputs":[{"name":"self"},{"name":"consumer"}],"output":{"name":"option"}}]],"paths":[[4,"ErrorKind"],[4,"CompareResult"],[4,"Needed"],[4,"IResult"],[4,"IError"],[4,"Endianness"],[4,"Input"],[4,"ConsumerState"],[4,"Move"],[4,"FileProducerState"],[6,"Err"],[3,"ProducerRepeat"],[3,"MemProducer"],[3,"FileProducer"],[3,"MapConsumer"],[3,"ChainConsumer"],[8,"Offset"],[8,"HexDisplay"],[8,"AsBytes"],[8,"InputLength"],[8,"AsChar"],[8,"InputIter"],[8,"InputTake"],[8,"Compare"],[8,"FindToken"],[8,"FindSubstring"],[8,"ParseTo"],[8,"Slice"],[8,"GetInput"],[8,"GetOutput"],[8,"Consumer"],[8,"Producer"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[3,"Complex","","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",13,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `Float::infinity()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `Float::neg_infinity()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",13,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",13,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",13,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"pow","num","",null,null],[5,"pow","num::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"bigint","","",null,null],[0,"complex","","",null,null],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null],[0,"rational","","",null,null],[11,"new","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",17,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",17,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",17,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",17,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",17,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",17,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",17,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",17,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_i64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i64","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"bitor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"bitand","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"abs","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"shl","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shl","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"checked_mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",18,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"to_bigint","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_bigint","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_biguint","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_biguint","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"zero","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"zero","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"bitxor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_rem","","",18,null],[11,"div_floor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",18,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"div_rem","","",17,null],[11,"div_floor","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",17,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"one","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"from","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"u8"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u16"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u32"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"hash","","",17,null],[11,"from_i64","","",18,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",18,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"neg","","",18,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"neg","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates and initializes a `BigUint`.",18,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",18,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",18,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",18,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",18,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[3,"BigInt"],[3,"BigUint"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",0,null],[13,"Other","","",0,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",1,null],[13,"NoSign","","",1,null],[13,"Plus","","",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"checked_add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",2,null],[11,"div_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",2,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_i64","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",2,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",2,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"neg","","Negate Sign value.",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",3,null],[11,"div_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",3,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_i64","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",3,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_bigint","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_biguint","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",3,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",3,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",3,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",3,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",3,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",3,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[6,"BigDigit","","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails when the bound is zero.",6,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",0,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}]],"paths":[[4,"ParseBigIntError"],[4,"Sign"],[3,"BigUint"],[3,"BigInt"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Complex"]]};
searchIndex["num_cpus"] = {"doc":"Replaces the deprecated functionality of std::os::num_cpus.","items":[[5,"get","num_cpus","Returns the number of CPUs of the current machine.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_physical","","Returns the number of physical cores of the current machine. If not possible on the particular architecture returns same as get() which is the logical CPUs.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"binomial","","Calculate the binomial coefficient.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",1,{"inputs":[{"name":"t"}],"output":{"name":"iterbinomial"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a reduced copy of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"from","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"is_positive","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"into","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",14,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `Float::infinity()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `Float::neg_infinity()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",14,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",15,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",20,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",20,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["openssl"] = {"doc":"","items":[[5,"init","openssl","",null,null],[0,"aes","","Low level AES functionality",null,null],[3,"KeyError","openssl::aes","",null,null],[3,"AesKey","","",null,null],[5,"aes_ige","","Performs AES IGE encryption or decryption",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_encrypt","","Prepares a key for encryption.",1,null],[11,"new_decrypt","","Prepares a key for decryption.",1,null],[0,"asn1","openssl","",null,null],[3,"Asn1GeneralizedTime","openssl::asn1","",null,null],[3,"Asn1GeneralizedTimeRef","","",null,null],[3,"Asn1Time","","",null,null],[3,"Asn1TimeRef","","",null,null],[3,"Asn1String","","",null,null],[3,"Asn1StringRef","","",null,null],[3,"Asn1Integer","","",null,null],[3,"Asn1IntegerRef","","",null,null],[3,"Asn1BitString","","",null,null],[3,"Asn1BitStringRef","","",null,null],[3,"Asn1Object","","",null,null],[3,"Asn1ObjectRef","","",null,null],[11,"from_ptr","","",2,null],[11,"as_ptr","","",2,null],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"asn1generalizedtimeref"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"asn1generalizedtimeref"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ptr","","",4,null],[11,"as_ptr","","",4,null],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"asn1timeref"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"asn1timeref"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"days_from_now","","Creates a new time on specified interval in days from now",4,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"from_ptr","","",6,null],[11,"as_ptr","","",6,null],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"asn1stringref"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"asn1stringref"}}],[11,"as_utf8","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_slice","","",7,null],[11,"len","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_ptr","","",8,null],[11,"as_ptr","","",8,null],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"asn1integerref"}}],[11,"deref_mut","","",8,{"inputs":[{"name":"self"}],"output":{"name":"asn1integerref"}}],[11,"get","","",9,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"set","","",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"from_ptr","","",10,null],[11,"as_ptr","","",10,null],[11,"drop","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"asn1bitstringref"}}],[11,"deref_mut","","",10,{"inputs":[{"name":"self"}],"output":{"name":"asn1bitstringref"}}],[11,"as_slice","","",11,null],[11,"len","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_ptr","","",12,null],[11,"as_ptr","","",12,null],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"asn1objectref"}}],[11,"deref_mut","","",12,{"inputs":[{"name":"self"}],"output":{"name":"asn1objectref"}}],[11,"nid","","Returns the NID associated with this OID.",13,{"inputs":[{"name":"self"}],"output":{"name":"nid"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"bn","openssl","",null,null],[3,"MsbOption","openssl::bn","Options for the most significant bits of a randomly generated `BigNum`.",null,null],[3,"BigNumContext","","",null,null],[3,"BigNumContextRef","","",null,null],[3,"BigNum","","",null,null],[3,"BigNumRef","","",null,null],[17,"MSB_MAYBE_ZERO","","The most significant bit of the number may be 0.",null,null],[17,"MSB_ONE","","The most significant bit of the number must be 1.",null,null],[17,"TWO_MSB_ONE","","The most significant two bits of the number must be 1.",null,null],[11,"from_ptr","","",14,null],[11,"as_ptr","","",14,null],[11,"drop","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bignumcontextref"}}],[11,"deref_mut","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bignumcontextref"}}],[11,"new","","Returns a new `BigNumContext`.",14,{"inputs":[],"output":{"name":"result"}}],[11,"clear","","Erases the memory used by this `BigNum`, resetting its value to 0.",15,{"inputs":[{"name":"self"}],"output":null}],[11,"add_word","","Adds a `u32` to `self`.",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"sub_word","","Subtracts a `u32` from `self`.",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"mul_word","","Multiplies a `u32` by `self`.",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"div_word","","Divides `self` by a `u32`, returning the remainder.",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"mod_word","","Returns the result of `self` modulo `w`.",15,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"rand_range","","Places a cryptographically-secure pseudo-random number nonnegative number less than `self` in `rnd`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"result"}}],[11,"pseudo_rand_range","","The cryptographically weak counterpart to `rand_in_range`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"result"}}],[11,"set_bit","","Sets bit `n`. Equivalent to `self |= (1 << n)`.",15,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"clear_bit","","Clears bit `n`, setting it to 0. Equivalent to `self &= ~(1 << n)`.",15,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"is_bit_set","","Returns `true` if the `n`th bit of `self` is set to 1, `false` otherwise.",15,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"mask_bits","","Truncates `self` to the lowest `n` bits.",15,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"lshift1","","Places `a << 1` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"result"}}],[11,"rshift1","","Places `a >> 1` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"result"}}],[11,"checked_add","","Places `a + b` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"}],"output":{"name":"result"}}],[11,"checked_sub","","Places `a - b` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"}],"output":{"name":"result"}}],[11,"lshift","","Places `a << n` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"i32"}],"output":{"name":"result"}}],[11,"rshift","","Places `a >> n` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"i32"}],"output":{"name":"result"}}],[11,"to_owned","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_negative","","Sets the sign of `self`.",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"ucmp","","Compare the absolute values of `self` and `oth`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"ordering"}}],[11,"is_negative","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"num_bits","","Returns the number of significant bits in `self`.",15,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"num_bytes","","Returns the size of `self` in bytes.",15,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"rand","","Generates a cryptographically strong pseudo-random `BigNum`, placing it in `self`.",15,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"msboption"},{"name":"bool"}],"output":{"name":"result"}}],[11,"pseudo_rand","","The cryptographically weak counterpart to `rand`.",15,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"msboption"},{"name":"bool"}],"output":{"name":"result"}}],[11,"generate_prime","","Generates a prime number, placing it in `self`.",15,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"bool"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"checked_mul","","Places the result of `a * b` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"checked_div","","Places the result of `a / b` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"checked_rem","","Places the result of `a % b` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"div_rem","","Places the result of `a / b` in `self` and `a % b` in `rem`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"sqr","","Places the result of `a²` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"nnmod","","Places the result of `a mod m` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"mod_add","","Places the result of `(a + b) mod m` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"mod_sub","","Places the result of `(a - b) mod m` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"mod_mul","","Places the result of `(a * b) mod m` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"mod_sqr","","Places the result of `a² mod m` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"exp","","Places the result of `a^p` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"mod_exp","","Places the result of `a^p mod m` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"mod_inverse","","Places the inverse of `a` modulo `n` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"gcd","","Places the greatest common denominator of `a` and `b` in `self`.",15,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"is_prime","","Checks whether `self` is prime.",15,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"is_prime_fasttest","","Checks whether `self` is prime with optional trial division.",15,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"bignumcontextref"},{"name":"bool"}],"output":{"name":"result"}}],[11,"to_vec","","Returns a big-endian byte vector representation of the absolute value of `self`.",15,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_dec_str","","Returns a decimal string representation of `self`.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_hex_str","","Returns a hexadecimal string representation of `self`.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_asn1_integer","","Returns an `Asn1Integer` containing the value of `self`.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_ptr","","",16,null],[11,"as_ptr","","",16,null],[11,"drop","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bignumref"}}],[11,"deref_mut","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bignumref"}}],[11,"new","","Creates a new `BigNum` with the value 0.",16,{"inputs":[],"output":{"name":"result"}}],[11,"from_u32","","Creates a new `BigNum` with the given value.",16,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"from_dec_str","","Creates a `BigNum` from a decimal string.",16,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_hex_str","","Creates a `BigNum` from a hexadecimal string.",16,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"get_rfc2409_prime_768","","",16,{"inputs":[],"output":{"name":"result"}}],[11,"get_rfc2409_prime_1024","","",16,{"inputs":[],"output":{"name":"result"}}],[11,"get_rfc3526_prime_1536","","",16,{"inputs":[],"output":{"name":"result"}}],[11,"get_rfc3526_prime_2048","","",16,{"inputs":[],"output":{"name":"result"}}],[11,"get_rfc3526_prime_3072","","",16,{"inputs":[],"output":{"name":"result"}}],[11,"get_rfc3526_prime_4096","","",16,{"inputs":[],"output":{"name":"result"}}],[11,"get_rfc3526_prime_6144","","",16,{"inputs":[],"output":{"name":"result"}}],[11,"get_rfc3526_prime_8192","","",16,{"inputs":[],"output":{"name":"result"}}],[11,"from_slice","","Creates a new `BigNum` from an unsigned, big-endian encoded number of arbitrary length.",16,null],[11,"as_ref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bignumref"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"bignum"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"bignum"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"option"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"bignum"}],"output":{"name":"option"}}],[11,"cmp","","",15,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"bignum"}],"output":{"name":"option"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"bignumref"}],"output":{"name":"option"}}],[11,"cmp","","",16,{"inputs":[{"name":"self"},{"name":"bignum"}],"output":{"name":"ordering"}}],[11,"neg","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bignum"}}],[0,"conf","openssl","",null,null],[3,"ConfMethod","openssl::conf","",null,null],[3,"Conf","","",null,null],[3,"ConfRef","","",null,null],[11,"default","","",17,{"inputs":[],"output":{"name":"confmethod"}}],[11,"from_ptr","","",17,null],[11,"as_ptr","","",17,null],[11,"from_ptr","","",18,null],[11,"as_ptr","","",18,null],[11,"drop","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"confref"}}],[11,"deref_mut","","",18,{"inputs":[{"name":"self"}],"output":{"name":"confref"}}],[11,"new","","",18,{"inputs":[{"name":"confmethod"}],"output":{"name":"result"}}],[0,"crypto","openssl","",null,null],[6,"CryptoString","openssl::crypto","",null,null],[0,"dh","openssl","",null,null],[3,"Dh","openssl::dh","",null,null],[3,"DhRef","","",null,null],[11,"from_ptr","","",19,null],[11,"as_ptr","","",19,null],[11,"drop","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"dhref"}}],[11,"deref_mut","","",19,{"inputs":[{"name":"self"}],"output":{"name":"dhref"}}],[11,"to_pem","","Serializes this value to PEM.",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_der","","Serializes this value to DER.",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_params","","",19,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"from_pem","","Deserializes a value from PEM-formatted data.",19,null],[11,"from_der","","Deserializes a value from DER-formatted data.",19,null],[0,"dsa","openssl","",null,null],[3,"Dsa","openssl::dsa","",null,null],[3,"DsaRef","","",null,null],[11,"from_ptr","","",21,null],[11,"as_ptr","","",21,null],[11,"drop","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"dsaref"}}],[11,"deref_mut","","",21,{"inputs":[{"name":"self"}],"output":{"name":"dsaref"}}],[11,"private_key_to_pem","","Serializes the private key to PEM.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"private_key_to_pem_passphrase","","Serializes the private key to PEM, encrypting it with the specified symmetric cipher and passphrase.",22,null],[11,"public_key_to_pem","","Serializes a public key to PEM.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"private_key_to_der","","Serializes the private key to DER.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"public_key_to_der","","Serializes the public key to DER.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"p","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"q","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"g","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_public_key","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_private_key","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"generate","","Generate a DSA key pair.",21,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"private_key_from_pem","","Deserializes a PEM-formatted private key.",21,null],[11,"private_key_from_pem_passphrase","","Deserializes a PEM-formatted private key, using the supplied password if the key is encrypted.",21,null],[11,"private_key_from_pem_callback","","Deserializes a PEM-formatted private key, using a callback to retrieve a password if the key is encrypted.",21,null],[11,"private_key_from_der","","Deserializes a private key from DER-formatted data.",21,null],[11,"public_key_from_pem","","Deserializes a public key from PEM-formatted data.",21,null],[11,"public_key_from_der","","Deserializes a public key from DER-formatted data.",21,null],[11,"private_key_from_pem_cb","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ec","openssl","",null,null],[3,"PointConversionForm","openssl::ec","",null,null],[3,"Asn1Flag","","",null,null],[3,"EcGroup","","",null,null],[3,"EcGroupRef","","",null,null],[3,"EcPoint","","",null,null],[3,"EcPointRef","","",null,null],[3,"EcKey","","",null,null],[3,"EcKeyRef","","",null,null],[3,"EcKeyBuilder","","",null,null],[3,"EcKeyBuilderRef","","",null,null],[17,"POINT_CONVERSION_COMPRESSED","","",null,null],[17,"POINT_CONVERSION_UNCOMPRESSED","","",null,null],[17,"POINT_CONVERSION_HYBRID","","",null,null],[17,"EXPLICIT_CURVE","","",null,null],[17,"NAMED_CURVE","","",null,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"pointconversionform"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"asn1flag"}}],[11,"from_ptr","","",25,null],[11,"as_ptr","","",25,null],[11,"drop","","",25,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"ecgroupref"}}],[11,"deref_mut","","",25,{"inputs":[{"name":"self"}],"output":{"name":"ecgroupref"}}],[11,"from_curve_name","","Returns the group of a standard named curve.",25,{"inputs":[{"name":"nid"}],"output":{"name":"result"}}],[11,"components_gfp","","Places the components of a curve over a prime field in the provided `BigNum`s.",26,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"components_gf2m","","Places the components of a curve over a binary field in the provided `BigNum`s.",26,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"degree","","Returns the degree of the curve.",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"order","","Places the order of the curve in the provided `BigNum`.",26,{"inputs":[{"name":"self"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"set_asn1_flag","","Sets the flag determining if the group corresponds to a named curve or must be explicitly parameterized.",26,{"inputs":[{"name":"self"},{"name":"asn1flag"}],"output":null}],[11,"from_ptr","","",27,null],[11,"as_ptr","","",27,null],[11,"drop","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"ecpointref"}}],[11,"deref_mut","","",27,{"inputs":[{"name":"self"}],"output":{"name":"ecpointref"}}],[11,"add","","Computes `a + b`, storing the result in `self`.",28,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"ecpointref"},{"name":"ecpointref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"mul","","Computes `q * m`, storing the result in `self`.",28,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"ecpointref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"mul_generator","","Computes `generator * n`, storing the result ing `self`.",28,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"mul_full","","Computes `generator * n + q * m`, storing the result in `self`.",28,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"bignumref"},{"name":"ecpointref"},{"name":"bignumref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"invert","","Inverts `self`.",28,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"to_bytes","","Serializes the point to a binary representation.",28,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"pointconversionform"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"eq","","Determines if this point is equal to another.",28,{"inputs":[{"name":"self"},{"name":"ecgroupref"},{"name":"ecpointref"},{"name":"bignumcontextref"}],"output":{"name":"result"}}],[11,"new","","Creates a new point on the specified curve.",27,{"inputs":[{"name":"ecgroupref"}],"output":{"name":"result"}}],[11,"from_bytes","","",27,null],[11,"from_ptr","","",29,null],[11,"as_ptr","","",29,null],[11,"drop","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"eckeyref"}}],[11,"deref_mut","","",29,{"inputs":[{"name":"self"}],"output":{"name":"eckeyref"}}],[11,"private_key_to_pem","","Serializes the private key to PEM.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"private_key_to_pem_passphrase","","Serializes the private key to PEM, encrypting it with the specified symmetric cipher and passphrase.",30,null],[11,"private_key_to_der","","Serializes the private key to DER.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"group","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"public_key","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"private_key","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"check_key","","Checks the key for validity.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_curve_name","","Constructs an `EcKey` corresponding to a known curve.",29,{"inputs":[{"name":"nid"}],"output":{"name":"result"}}],[11,"from_public_key","","Constructs an `EcKey` from the specified group with the associated `EcPoint`, public_key.",29,{"inputs":[{"name":"ecgroupref"},{"name":"ecpointref"}],"output":{"name":"result"}}],[11,"generate","","Generates a new public/private key pair on the specified curve.",29,{"inputs":[{"name":"ecgroupref"}],"output":{"name":"result"}}],[11,"new_by_curve_name","","",29,{"inputs":[{"name":"nid"}],"output":{"name":"result"}}],[11,"private_key_from_pem","","Deserializes a PEM-formatted private key.",29,null],[11,"private_key_from_pem_passphrase","","Deserializes a PEM-formatted private key, using the supplied password if the key is encrypted.",29,null],[11,"private_key_from_pem_callback","","Deserializes a PEM-formatted private key, using a callback to retrieve a password if the key is encrypted.",29,null],[11,"private_key_from_der","","Deserializes a private key from DER-formatted data.",29,null],[11,"from_ptr","","",31,null],[11,"as_ptr","","",31,null],[11,"drop","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"eckeybuilderref"}}],[11,"deref_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"eckeybuilderref"}}],[11,"new","","",31,{"inputs":[],"output":{"name":"result"}}],[11,"build","","",31,{"inputs":[{"name":"self"}],"output":{"name":"eckey"}}],[11,"set_group","","",32,{"inputs":[{"name":"self"},{"name":"ecgroupref"}],"output":{"name":"result"}}],[11,"set_public_key","","",32,{"inputs":[{"name":"self"},{"name":"ecpointref"}],"output":{"name":"result"}}],[11,"generate_key","","",32,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"ec_key","openssl","",null,null],[0,"error","","",null,null],[3,"ErrorStack","openssl::error","",null,null],[3,"Error","","An error reported from OpenSSL.",null,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"errorstack"}}],[11,"get","","Returns the contents of the OpenSSL error stack.",33,{"inputs":[],"output":{"name":"errorstack"}}],[11,"errors","","Returns the errors in the stack.",33,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",33,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"get","","Returns the first error on the OpenSSL error stack.",34,{"inputs":[],"output":{"name":"option"}}],[11,"code","","Returns the raw OpenSSL error code for this error.",34,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"library","","Returns the name of the library reporting the error, if available.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"function","","Returns the name of the function reporting the error.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"reason","","Returns the reason for the error.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"file","","Returns the name of the source file which encountered the error.",34,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","Returns the line in the source file which encountered the error.",34,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"data","","Returns additional data describing the error.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",34,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"hash","openssl","",null,null],[3,"MessageDigest","openssl::hash","",null,null],[3,"Hasher","","Provides message digest (hash) computation.",null,null],[5,"hash","","Computes the hash of the `data` with the hash `t`.",null,null],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"messagedigest"}}],[11,"md5","","",35,{"inputs":[],"output":{"name":"messagedigest"}}],[11,"sha1","","",35,{"inputs":[],"output":{"name":"messagedigest"}}],[11,"sha224","","",35,{"inputs":[],"output":{"name":"messagedigest"}}],[11,"sha256","","",35,{"inputs":[],"output":{"name":"messagedigest"}}],[11,"sha384","","",35,{"inputs":[],"output":{"name":"messagedigest"}}],[11,"sha512","","",35,{"inputs":[],"output":{"name":"messagedigest"}}],[11,"ripemd160","","",35,{"inputs":[],"output":{"name":"messagedigest"}}],[11,"as_ptr","","",35,null],[11,"new","","Creates a new `Hasher` with the specified hash type.",36,{"inputs":[{"name":"messagedigest"}],"output":{"name":"result"}}],[11,"update","","Feeds data into the hasher.",36,null],[11,"finish","","Returns the hash of the data written since creation or the last `finish` and resets the hasher.",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",36,null],[11,"flush","","",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"hasher"}}],[11,"drop","","",36,{"inputs":[{"name":"self"}],"output":null}],[0,"memcmp","openssl","",null,null],[5,"eq","openssl::memcmp","Returns `true` iff `a` and `b` contain the same bytes.",null,null],[0,"nid","openssl","",null,null],[3,"Nid","openssl::nid","",null,null],[17,"UNDEF","","",null,null],[17,"ITU_T","","",null,null],[17,"CCITT","","",null,null],[17,"ISO","","",null,null],[17,"JOINT_ISO_ITU_T","","",null,null],[17,"JOINT_ISO_CCITT","","",null,null],[17,"MEMBER_BODY","","",null,null],[17,"IDENTIFIED_ORGANIZATION","","",null,null],[17,"HMAC_MD5","","",null,null],[17,"HMAC_SHA1","","",null,null],[17,"CERTICOM_ARC","","",null,null],[17,"INTERNATIONAL_ORGANIZATIONS","","",null,null],[17,"WAP","","",null,null],[17,"WAP_WSG","","",null,null],[17,"SELECTED_ATTRIBUTE_TYPES","","",null,null],[17,"CLEARANCE","","",null,null],[17,"ISO_US","","",null,null],[17,"X9_57","","",null,null],[17,"X9CM","","",null,null],[17,"DSA","","",null,null],[17,"DSAWITHSHA1","","",null,null],[17,"ANSI_X9_62","","",null,null],[17,"X9_62_PRIME_FIELD","","",null,null],[17,"X9_62_CHARACTERISTIC_TWO_FIELD","","",null,null],[17,"X9_62_ID_CHARACTERISTIC_TWO_BASIS","","",null,null],[17,"X9_62_ONBASIS","","",null,null],[17,"X9_62_TPBASIS","","",null,null],[17,"X9_62_PPBASIS","","",null,null],[17,"X9_62_ID_ECPUBLICKEY","","",null,null],[17,"X9_62_C2PNB163V1","","",null,null],[17,"X9_62_C2PNB163V2","","",null,null],[17,"X9_62_C2PNB163V3","","",null,null],[17,"X9_62_C2PNB176V1","","",null,null],[17,"X9_62_C2TNB191V1","","",null,null],[17,"X9_62_C2TNB191V2","","",null,null],[17,"X9_62_C2TNB191V3","","",null,null],[17,"X9_62_C2ONB191V4","","",null,null],[17,"X9_62_C2ONB191V5","","",null,null],[17,"X9_62_C2PNB208W1","","",null,null],[17,"X9_62_C2TNB239V1","","",null,null],[17,"X9_62_C2TNB239V2","","",null,null],[17,"X9_62_C2TNB239V3","","",null,null],[17,"X9_62_C2ONB239V4","","",null,null],[17,"X9_62_C2ONB239V5","","",null,null],[17,"X9_62_C2PNB272W1","","",null,null],[17,"X9_62_C2PNB304W1","","",null,null],[17,"X9_62_C2TNB359V1","","",null,null],[17,"X9_62_C2PNB368W1","","",null,null],[17,"X9_62_C2TNB431R1","","",null,null],[17,"X9_62_PRIME192V1","","",null,null],[17,"X9_62_PRIME192V2","","",null,null],[17,"X9_62_PRIME192V3","","",null,null],[17,"X9_62_PRIME239V1","","",null,null],[17,"X9_62_PRIME239V2","","",null,null],[17,"X9_62_PRIME239V3","","",null,null],[17,"X9_62_PRIME256V1","","",null,null],[17,"ECDSA_WITH_SHA1","","",null,null],[17,"ECDSA_WITH_RECOMMENDED","","",null,null],[17,"ECDSA_WITH_SPECIFIED","","",null,null],[17,"ECDSA_WITH_SHA224","","",null,null],[17,"ECDSA_WITH_SHA256","","",null,null],[17,"ECDSA_WITH_SHA384","","",null,null],[17,"ECDSA_WITH_SHA512","","",null,null],[17,"SECP112R1","","",null,null],[17,"SECP112R2","","",null,null],[17,"SECP128R1","","",null,null],[17,"SECP128R2","","",null,null],[17,"SECP160K1","","",null,null],[17,"SECP160R1","","",null,null],[17,"SECP160R2","","",null,null],[17,"SECP192K1","","",null,null],[17,"SECP224K1","","",null,null],[17,"SECP224R1","","",null,null],[17,"SECP256K1","","",null,null],[17,"SECP384R1","","",null,null],[17,"SECP521R1","","",null,null],[17,"SECT113R1","","",null,null],[17,"SECT113R2","","",null,null],[17,"SECT131R1","","",null,null],[17,"SECT131R2","","",null,null],[17,"SECT163K1","","",null,null],[17,"SECT163R1","","",null,null],[17,"SECT163R2","","",null,null],[17,"SECT193R1","","",null,null],[17,"SECT193R2","","",null,null],[17,"SECT233K1","","",null,null],[17,"SECT233R1","","",null,null],[17,"SECT239K1","","",null,null],[17,"SECT283K1","","",null,null],[17,"SECT283R1","","",null,null],[17,"SECT409K1","","",null,null],[17,"SECT409R1","","",null,null],[17,"SECT571K1","","",null,null],[17,"SECT571R1","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS1","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS3","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS4","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS5","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS6","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS7","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS8","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS9","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS10","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS11","","",null,null],[17,"WAP_WSG_IDM_ECID_WTLS12","","",null,null],[17,"CAST5_CBC","","",null,null],[17,"CAST5_ECB","","",null,null],[17,"CAST5_CFB64","","",null,null],[17,"CAST5_OFB64","","",null,null],[17,"PBEWITHMD5ANDCAST5_CBC","","",null,null],[17,"ID_PASSWORDBASEDMAC","","",null,null],[17,"ID_DHBASEDMAC","","",null,null],[17,"RSADSI","","",null,null],[17,"PKCS","","",null,null],[17,"PKCS1","","",null,null],[17,"RSAENCRYPTION","","",null,null],[17,"MD2WITHRSAENCRYPTION","","",null,null],[17,"MD4WITHRSAENCRYPTION","","",null,null],[17,"MD5WITHRSAENCRYPTION","","",null,null],[17,"SHA1WITHRSAENCRYPTION","","",null,null],[17,"RSAESOAEP","","",null,null],[17,"MGF1","","",null,null],[17,"RSASSAPSS","","",null,null],[17,"SHA256WITHRSAENCRYPTION","","",null,null],[17,"SHA384WITHRSAENCRYPTION","","",null,null],[17,"SHA512WITHRSAENCRYPTION","","",null,null],[17,"SHA224WITHRSAENCRYPTION","","",null,null],[17,"PKCS3","","",null,null],[17,"DHKEYAGREEMENT","","",null,null],[17,"PKCS5","","",null,null],[17,"PBEWITHMD2ANDDES_CBC","","",null,null],[17,"PBEWITHMD5ANDDES_CBC","","",null,null],[17,"PBEWITHMD2ANDRC2_CBC","","",null,null],[17,"PBEWITHMD5ANDRC2_CBC","","",null,null],[17,"PBEWITHSHA1ANDDES_CBC","","",null,null],[17,"PBEWITHSHA1ANDRC2_CBC","","",null,null],[17,"ID_PBKDF2","","",null,null],[17,"PBES2","","",null,null],[17,"PBMAC1","","",null,null],[17,"PKCS7","","",null,null],[17,"PKCS7_DATA","","",null,null],[17,"PKCS7_SIGNED","","",null,null],[17,"PKCS7_ENVELOPED","","",null,null],[17,"PKCS7_SIGNEDANDENVELOPED","","",null,null],[17,"PKCS7_DIGEST","","",null,null],[17,"PKCS7_ENCRYPTED","","",null,null],[17,"PKCS9","","",null,null],[17,"PKCS9_EMAILADDRESS","","",null,null],[17,"PKCS9_UNSTRUCTUREDNAME","","",null,null],[17,"PKCS9_CONTENTTYPE","","",null,null],[17,"PKCS9_MESSAGEDIGEST","","",null,null],[17,"PKCS9_SIGNINGTIME","","",null,null],[17,"PKCS9_COUNTERSIGNATURE","","",null,null],[17,"PKCS9_CHALLENGEPASSWORD","","",null,null],[17,"PKCS9_UNSTRUCTUREDADDRESS","","",null,null],[17,"PKCS9_EXTCERTATTRIBUTES","","",null,null],[17,"EXT_REQ","","",null,null],[17,"SMIMECAPABILITIES","","",null,null],[17,"SMIME","","",null,null],[17,"ID_SMIME_MOD","","",null,null],[17,"ID_SMIME_CT","","",null,null],[17,"ID_SMIME_AA","","",null,null],[17,"ID_SMIME_ALG","","",null,null],[17,"ID_SMIME_CD","","",null,null],[17,"ID_SMIME_SPQ","","",null,null],[17,"ID_SMIME_CTI","","",null,null],[17,"ID_SMIME_MOD_CMS","","",null,null],[17,"ID_SMIME_MOD_ESS","","",null,null],[17,"ID_SMIME_MOD_OID","","",null,null],[17,"ID_SMIME_MOD_MSG_V3","","",null,null],[17,"ID_SMIME_MOD_ETS_ESIGNATURE_88","","",null,null],[17,"ID_SMIME_MOD_ETS_ESIGNATURE_97","","",null,null],[17,"ID_SMIME_MOD_ETS_ESIGPOLICY_88","","",null,null],[17,"ID_SMIME_MOD_ETS_ESIGPOLICY_97","","",null,null],[17,"ID_SMIME_CT_RECEIPT","","",null,null],[17,"ID_SMIME_CT_AUTHDATA","","",null,null],[17,"ID_SMIME_CT_PUBLISHCERT","","",null,null],[17,"ID_SMIME_CT_TSTINFO","","",null,null],[17,"ID_SMIME_CT_TDTINFO","","",null,null],[17,"ID_SMIME_CT_CONTENTINFO","","",null,null],[17,"ID_SMIME_CT_DVCSREQUESTDATA","","",null,null],[17,"ID_SMIME_CT_DVCSRESPONSEDATA","","",null,null],[17,"ID_SMIME_CT_COMPRESSEDDATA","","",null,null],[17,"ID_CT_ASCIITEXTWITHCRLF","","",null,null],[17,"ID_SMIME_AA_RECEIPTREQUEST","","",null,null],[17,"ID_SMIME_AA_SECURITYLABEL","","",null,null],[17,"ID_SMIME_AA_MLEXPANDHISTORY","","",null,null],[17,"ID_SMIME_AA_CONTENTHINT","","",null,null],[17,"ID_SMIME_AA_MSGSIGDIGEST","","",null,null],[17,"ID_SMIME_AA_ENCAPCONTENTTYPE","","",null,null],[17,"ID_SMIME_AA_CONTENTIDENTIFIER","","",null,null],[17,"ID_SMIME_AA_MACVALUE","","",null,null],[17,"ID_SMIME_AA_EQUIVALENTLABELS","","",null,null],[17,"ID_SMIME_AA_CONTENTREFERENCE","","",null,null],[17,"ID_SMIME_AA_ENCRYPKEYPREF","","",null,null],[17,"ID_SMIME_AA_SIGNINGCERTIFICATE","","",null,null],[17,"ID_SMIME_AA_SMIMEENCRYPTCERTS","","",null,null],[17,"ID_SMIME_AA_TIMESTAMPTOKEN","","",null,null],[17,"ID_SMIME_AA_ETS_SIGPOLICYID","","",null,null],[17,"ID_SMIME_AA_ETS_COMMITMENTTYPE","","",null,null],[17,"ID_SMIME_AA_ETS_SIGNERLOCATION","","",null,null],[17,"ID_SMIME_AA_ETS_SIGNERATTR","","",null,null],[17,"ID_SMIME_AA_ETS_OTHERSIGCERT","","",null,null],[17,"ID_SMIME_AA_ETS_CONTENTTIMESTAMP","","",null,null],[17,"ID_SMIME_AA_ETS_CERTIFICATEREFS","","",null,null],[17,"ID_SMIME_AA_ETS_REVOCATIONREFS","","",null,null],[17,"ID_SMIME_AA_ETS_CERTVALUES","","",null,null],[17,"ID_SMIME_AA_ETS_REVOCATIONVALUES","","",null,null],[17,"ID_SMIME_AA_ETS_ESCTIMESTAMP","","",null,null],[17,"ID_SMIME_AA_ETS_CERTCRLTIMESTAMP","","",null,null],[17,"ID_SMIME_AA_ETS_ARCHIVETIMESTAMP","","",null,null],[17,"ID_SMIME_AA_SIGNATURETYPE","","",null,null],[17,"ID_SMIME_AA_DVCS_DVC","","",null,null],[17,"ID_SMIME_ALG_ESDHWITH3DES","","",null,null],[17,"ID_SMIME_ALG_ESDHWITHRC2","","",null,null],[17,"ID_SMIME_ALG_3DESWRAP","","",null,null],[17,"ID_SMIME_ALG_RC2WRAP","","",null,null],[17,"ID_SMIME_ALG_ESDH","","",null,null],[17,"ID_SMIME_ALG_CMS3DESWRAP","","",null,null],[17,"ID_SMIME_ALG_CMSRC2WRAP","","",null,null],[17,"ID_ALG_PWRI_KEK","","",null,null],[17,"ID_SMIME_CD_LDAP","","",null,null],[17,"ID_SMIME_SPQ_ETS_SQT_URI","","",null,null],[17,"ID_SMIME_SPQ_ETS_SQT_UNOTICE","","",null,null],[17,"ID_SMIME_CTI_ETS_PROOFOFORIGIN","","",null,null],[17,"ID_SMIME_CTI_ETS_PROOFOFRECEIPT","","",null,null],[17,"ID_SMIME_CTI_ETS_PROOFOFDELIVERY","","",null,null],[17,"ID_SMIME_CTI_ETS_PROOFOFSENDER","","",null,null],[17,"ID_SMIME_CTI_ETS_PROOFOFAPPROVAL","","",null,null],[17,"ID_SMIME_CTI_ETS_PROOFOFCREATION","","",null,null],[17,"FRIENDLYNAME","","",null,null],[17,"LOCALKEYID","","",null,null],[17,"MS_CSP_NAME","","",null,null],[17,"LOCALKEYSET","","",null,null],[17,"X509CERTIFICATE","","",null,null],[17,"SDSICERTIFICATE","","",null,null],[17,"X509CRL","","",null,null],[17,"PBE_WITHSHA1AND128BITRC4","","",null,null],[17,"PBE_WITHSHA1AND40BITRC4","","",null,null],[17,"PBE_WITHSHA1AND3_KEY_TRIPLEDES_CBC","","",null,null],[17,"PBE_WITHSHA1AND2_KEY_TRIPLEDES_CBC","","",null,null],[17,"PBE_WITHSHA1AND128BITRC2_CBC","","",null,null],[17,"PBE_WITHSHA1AND40BITRC2_CBC","","",null,null],[17,"KEYBAG","","",null,null],[17,"PKCS8SHROUDEDKEYBAG","","",null,null],[17,"CERTBAG","","",null,null],[17,"CRLBAG","","",null,null],[17,"SECRETBAG","","",null,null],[17,"SAFECONTENTSBAG","","",null,null],[17,"MD2","","",null,null],[17,"MD4","","",null,null],[17,"MD5","","",null,null],[17,"MD5_SHA1","","",null,null],[17,"HMACWITHMD5","","",null,null],[17,"HMACWITHSHA1","","",null,null],[17,"HMACWITHSHA224","","",null,null],[17,"HMACWITHSHA256","","",null,null],[17,"HMACWITHSHA384","","",null,null],[17,"HMACWITHSHA512","","",null,null],[17,"RC2_CBC","","",null,null],[17,"RC2_ECB","","",null,null],[17,"RC2_CFB64","","",null,null],[17,"RC2_OFB64","","",null,null],[17,"RC2_40_CBC","","",null,null],[17,"RC2_64_CBC","","",null,null],[17,"RC4","","",null,null],[17,"RC4_40","","",null,null],[17,"DES_EDE3_CBC","","",null,null],[17,"RC5_CBC","","",null,null],[17,"RC5_ECB","","",null,null],[17,"RC5_CFB64","","",null,null],[17,"RC5_OFB64","","",null,null],[17,"MS_EXT_REQ","","",null,null],[17,"MS_CODE_IND","","",null,null],[17,"MS_CODE_COM","","",null,null],[17,"MS_CTL_SIGN","","",null,null],[17,"MS_SGC","","",null,null],[17,"MS_EFS","","",null,null],[17,"MS_SMARTCARD_LOGIN","","",null,null],[17,"MS_UPN","","",null,null],[17,"IDEA_CBC","","",null,null],[17,"IDEA_ECB","","",null,null],[17,"IDEA_CFB64","","",null,null],[17,"IDEA_OFB64","","",null,null],[17,"BF_CBC","","",null,null],[17,"BF_ECB","","",null,null],[17,"BF_CFB64","","",null,null],[17,"BF_OFB64","","",null,null],[17,"ID_PKIX","","",null,null],[17,"ID_PKIX_MOD","","",null,null],[17,"ID_PE","","",null,null],[17,"ID_QT","","",null,null],[17,"ID_KP","","",null,null],[17,"ID_IT","","",null,null],[17,"ID_PKIP","","",null,null],[17,"ID_ALG","","",null,null],[17,"ID_CMC","","",null,null],[17,"ID_ON","","",null,null],[17,"ID_PDA","","",null,null],[17,"ID_ACA","","",null,null],[17,"ID_QCS","","",null,null],[17,"ID_CCT","","",null,null],[17,"ID_PPL","","",null,null],[17,"ID_AD","","",null,null],[17,"ID_PKIX1_EXPLICIT_88","","",null,null],[17,"ID_PKIX1_IMPLICIT_88","","",null,null],[17,"ID_PKIX1_EXPLICIT_93","","",null,null],[17,"ID_PKIX1_IMPLICIT_93","","",null,null],[17,"ID_MOD_CRMF","","",null,null],[17,"ID_MOD_CMC","","",null,null],[17,"ID_MOD_KEA_PROFILE_88","","",null,null],[17,"ID_MOD_KEA_PROFILE_93","","",null,null],[17,"ID_MOD_CMP","","",null,null],[17,"ID_MOD_QUALIFIED_CERT_88","","",null,null],[17,"ID_MOD_QUALIFIED_CERT_93","","",null,null],[17,"ID_MOD_ATTRIBUTE_CERT","","",null,null],[17,"ID_MOD_TIMESTAMP_PROTOCOL","","",null,null],[17,"ID_MOD_OCSP","","",null,null],[17,"ID_MOD_DVCS","","",null,null],[17,"ID_MOD_CMP2000","","",null,null],[17,"INFO_ACCESS","","",null,null],[17,"BIOMETRICINFO","","",null,null],[17,"QCSTATEMENTS","","",null,null],[17,"AC_AUDITENTITY","","",null,null],[17,"AC_TARGETING","","",null,null],[17,"AACONTROLS","","",null,null],[17,"SBGP_IPADDRBLOCK","","",null,null],[17,"SBGP_AUTONOMOUSSYSNUM","","",null,null],[17,"SBGP_ROUTERIDENTIFIER","","",null,null],[17,"AC_PROXYING","","",null,null],[17,"SINFO_ACCESS","","",null,null],[17,"PROXYCERTINFO","","",null,null],[17,"ID_QT_CPS","","",null,null],[17,"ID_QT_UNOTICE","","",null,null],[17,"TEXTNOTICE","","",null,null],[17,"SERVER_AUTH","","",null,null],[17,"CLIENT_AUTH","","",null,null],[17,"CODE_SIGN","","",null,null],[17,"EMAIL_PROTECT","","",null,null],[17,"IPSECENDSYSTEM","","",null,null],[17,"IPSECTUNNEL","","",null,null],[17,"IPSECUSER","","",null,null],[17,"TIME_STAMP","","",null,null],[17,"OCSP_SIGN","","",null,null],[17,"DVCS","","",null,null],[17,"ID_IT_CAPROTENCCERT","","",null,null],[17,"ID_IT_SIGNKEYPAIRTYPES","","",null,null],[17,"ID_IT_ENCKEYPAIRTYPES","","",null,null],[17,"ID_IT_PREFERREDSYMMALG","","",null,null],[17,"ID_IT_CAKEYUPDATEINFO","","",null,null],[17,"ID_IT_CURRENTCRL","","",null,null],[17,"ID_IT_UNSUPPORTEDOIDS","","",null,null],[17,"ID_IT_SUBSCRIPTIONREQUEST","","",null,null],[17,"ID_IT_SUBSCRIPTIONRESPONSE","","",null,null],[17,"ID_IT_KEYPAIRPARAMREQ","","",null,null],[17,"ID_IT_KEYPAIRPARAMREP","","",null,null],[17,"ID_IT_REVPASSPHRASE","","",null,null],[17,"ID_IT_IMPLICITCONFIRM","","",null,null],[17,"ID_IT_CONFIRMWAITTIME","","",null,null],[17,"ID_IT_ORIGPKIMESSAGE","","",null,null],[17,"ID_IT_SUPPLANGTAGS","","",null,null],[17,"ID_REGCTRL","","",null,null],[17,"ID_REGINFO","","",null,null],[17,"ID_REGCTRL_REGTOKEN","","",null,null],[17,"ID_REGCTRL_AUTHENTICATOR","","",null,null],[17,"ID_REGCTRL_PKIPUBLICATIONINFO","","",null,null],[17,"ID_REGCTRL_PKIARCHIVEOPTIONS","","",null,null],[17,"ID_REGCTRL_OLDCERTID","","",null,null],[17,"ID_REGCTRL_PROTOCOLENCRKEY","","",null,null],[17,"ID_REGINFO_UTF8PAIRS","","",null,null],[17,"ID_REGINFO_CERTREQ","","",null,null],[17,"ID_ALG_DES40","","",null,null],[17,"ID_ALG_NOSIGNATURE","","",null,null],[17,"ID_ALG_DH_SIG_HMAC_SHA1","","",null,null],[17,"ID_ALG_DH_POP","","",null,null],[17,"ID_CMC_STATUSINFO","","",null,null],[17,"ID_CMC_IDENTIFICATION","","",null,null],[17,"ID_CMC_IDENTITYPROOF","","",null,null],[17,"ID_CMC_DATARETURN","","",null,null],[17,"ID_CMC_TRANSACTIONID","","",null,null],[17,"ID_CMC_SENDERNONCE","","",null,null],[17,"ID_CMC_RECIPIENTNONCE","","",null,null],[17,"ID_CMC_ADDEXTENSIONS","","",null,null],[17,"ID_CMC_ENCRYPTEDPOP","","",null,null],[17,"ID_CMC_DECRYPTEDPOP","","",null,null],[17,"ID_CMC_LRAPOPWITNESS","","",null,null],[17,"ID_CMC_GETCERT","","",null,null],[17,"ID_CMC_GETCRL","","",null,null],[17,"ID_CMC_REVOKEREQUEST","","",null,null],[17,"ID_CMC_REGINFO","","",null,null],[17,"ID_CMC_RESPONSEINFO","","",null,null],[17,"ID_CMC_QUERYPENDING","","",null,null],[17,"ID_CMC_POPLINKRANDOM","","",null,null],[17,"ID_CMC_POPLINKWITNESS","","",null,null],[17,"ID_CMC_CONFIRMCERTACCEPTANCE","","",null,null],[17,"ID_ON_PERSONALDATA","","",null,null],[17,"ID_ON_PERMANENTIDENTIFIER","","",null,null],[17,"ID_PDA_DATEOFBIRTH","","",null,null],[17,"ID_PDA_PLACEOFBIRTH","","",null,null],[17,"ID_PDA_GENDER","","",null,null],[17,"ID_PDA_COUNTRYOFCITIZENSHIP","","",null,null],[17,"ID_PDA_COUNTRYOFRESIDENCE","","",null,null],[17,"ID_ACA_AUTHENTICATIONINFO","","",null,null],[17,"ID_ACA_ACCESSIDENTITY","","",null,null],[17,"ID_ACA_CHARGINGIDENTITY","","",null,null],[17,"ID_ACA_GROUP","","",null,null],[17,"ID_ACA_ROLE","","",null,null],[17,"ID_ACA_ENCATTRS","","",null,null],[17,"ID_QCS_PKIXQCSYNTAX_V1","","",null,null],[17,"ID_CCT_CRS","","",null,null],[17,"ID_CCT_PKIDATA","","",null,null],[17,"ID_CCT_PKIRESPONSE","","",null,null],[17,"ID_PPL_ANYLANGUAGE","","",null,null],[17,"ID_PPL_INHERITALL","","",null,null],[17,"INDEPENDENT","","",null,null],[17,"AD_OCSP","","",null,null],[17,"AD_CA_ISSUERS","","",null,null],[17,"AD_TIMESTAMPING","","",null,null],[17,"AD_DVCS","","",null,null],[17,"CAREPOSITORY","","",null,null],[17,"ID_PKIX_OCSP_BASIC","","",null,null],[17,"ID_PKIX_OCSP_NONCE","","",null,null],[17,"ID_PKIX_OCSP_CRLID","","",null,null],[17,"ID_PKIX_OCSP_ACCEPTABLERESPONSES","","",null,null],[17,"ID_PKIX_OCSP_NOCHECK","","",null,null],[17,"ID_PKIX_OCSP_ARCHIVECUTOFF","","",null,null],[17,"ID_PKIX_OCSP_SERVICELOCATOR","","",null,null],[17,"ID_PKIX_OCSP_EXTENDEDSTATUS","","",null,null],[17,"ID_PKIX_OCSP_VALID","","",null,null],[17,"ID_PKIX_OCSP_PATH","","",null,null],[17,"ID_PKIX_OCSP_TRUSTROOT","","",null,null],[17,"ALGORITHM","","",null,null],[17,"MD5WITHRSA","","",null,null],[17,"DES_ECB","","",null,null],[17,"DES_CBC","","",null,null],[17,"DES_OFB64","","",null,null],[17,"DES_CFB64","","",null,null],[17,"RSASIGNATURE","","",null,null],[17,"DSA_2","","",null,null],[17,"DSAWITHSHA","","",null,null],[17,"SHAWITHRSAENCRYPTION","","",null,null],[17,"DES_EDE_ECB","","",null,null],[17,"DES_EDE3_ECB","","",null,null],[17,"DES_EDE_CBC","","",null,null],[17,"DES_EDE_CFB64","","",null,null],[17,"DES_EDE3_CFB64","","",null,null],[17,"DES_EDE_OFB64","","",null,null],[17,"DES_EDE3_OFB64","","",null,null],[17,"DESX_CBC","","",null,null],[17,"SHA","","",null,null],[17,"SHA1","","",null,null],[17,"DSAWITHSHA1_2","","",null,null],[17,"SHA1WITHRSA","","",null,null],[17,"RIPEMD160","","",null,null],[17,"RIPEMD160WITHRSA","","",null,null],[17,"SXNET","","",null,null],[17,"X500","","",null,null],[17,"X509","","",null,null],[17,"COMMONNAME","","",null,null],[17,"SURNAME","","",null,null],[17,"SERIALNUMBER","","",null,null],[17,"COUNTRYNAME","","",null,null],[17,"LOCALITYNAME","","",null,null],[17,"STATEORPROVINCENAME","","",null,null],[17,"STREETADDRESS","","",null,null],[17,"ORGANIZATIONNAME","","",null,null],[17,"ORGANIZATIONALUNITNAME","","",null,null],[17,"TITLE","","",null,null],[17,"DESCRIPTION","","",null,null],[17,"SEARCHGUIDE","","",null,null],[17,"BUSINESSCATEGORY","","",null,null],[17,"POSTALADDRESS","","",null,null],[17,"POSTALCODE","","",null,null],[17,"POSTOFFICEBOX","","",null,null],[17,"PHYSICALDELIVERYOFFICENAME","","",null,null],[17,"TELEPHONENUMBER","","",null,null],[17,"TELEXNUMBER","","",null,null],[17,"TELETEXTERMINALIDENTIFIER","","",null,null],[17,"FACSIMILETELEPHONENUMBER","","",null,null],[17,"X121ADDRESS","","",null,null],[17,"INTERNATIONALISDNNUMBER","","",null,null],[17,"REGISTEREDADDRESS","","",null,null],[17,"DESTINATIONINDICATOR","","",null,null],[17,"PREFERREDDELIVERYMETHOD","","",null,null],[17,"PRESENTATIONADDRESS","","",null,null],[17,"SUPPORTEDAPPLICATIONCONTEXT","","",null,null],[17,"MEMBER","","",null,null],[17,"OWNER","","",null,null],[17,"ROLEOCCUPANT","","",null,null],[17,"SEEALSO","","",null,null],[17,"USERPASSWORD","","",null,null],[17,"USERCERTIFICATE","","",null,null],[17,"CACERTIFICATE","","",null,null],[17,"AUTHORITYREVOCATIONLIST","","",null,null],[17,"CERTIFICATEREVOCATIONLIST","","",null,null],[17,"CROSSCERTIFICATEPAIR","","",null,null],[17,"NAME","","",null,null],[17,"GIVENNAME","","",null,null],[17,"INITIALS","","",null,null],[17,"GENERATIONQUALIFIER","","",null,null],[17,"X500UNIQUEIDENTIFIER","","",null,null],[17,"DNQUALIFIER","","",null,null],[17,"ENHANCEDSEARCHGUIDE","","",null,null],[17,"PROTOCOLINFORMATION","","",null,null],[17,"DISTINGUISHEDNAME","","",null,null],[17,"UNIQUEMEMBER","","",null,null],[17,"HOUSEIDENTIFIER","","",null,null],[17,"SUPPORTEDALGORITHMS","","",null,null],[17,"DELTAREVOCATIONLIST","","",null,null],[17,"DMDNAME","","",null,null],[17,"PSEUDONYM","","",null,null],[17,"ROLE","","",null,null],[17,"X500ALGORITHMS","","",null,null],[17,"RSA","","",null,null],[17,"MDC2WITHRSA","","",null,null],[17,"MDC2","","",null,null],[17,"ID_CE","","",null,null],[17,"SUBJECT_DIRECTORY_ATTRIBUTES","","",null,null],[17,"SUBJECT_KEY_IDENTIFIER","","",null,null],[17,"KEY_USAGE","","",null,null],[17,"PRIVATE_KEY_USAGE_PERIOD","","",null,null],[17,"SUBJECT_ALT_NAME","","",null,null],[17,"ISSUER_ALT_NAME","","",null,null],[17,"BASIC_CONSTRAINTS","","",null,null],[17,"CRL_NUMBER","","",null,null],[17,"CRL_REASON","","",null,null],[17,"INVALIDITY_DATE","","",null,null],[17,"DELTA_CRL","","",null,null],[17,"ISSUING_DISTRIBUTION_POINT","","",null,null],[17,"CERTIFICATE_ISSUER","","",null,null],[17,"NAME_CONSTRAINTS","","",null,null],[17,"CRL_DISTRIBUTION_POINTS","","",null,null],[17,"CERTIFICATE_POLICIES","","",null,null],[17,"ANY_POLICY","","",null,null],[17,"POLICY_MAPPINGS","","",null,null],[17,"AUTHORITY_KEY_IDENTIFIER","","",null,null],[17,"POLICY_CONSTRAINTS","","",null,null],[17,"EXT_KEY_USAGE","","",null,null],[17,"FRESHEST_CRL","","",null,null],[17,"INHIBIT_ANY_POLICY","","",null,null],[17,"TARGET_INFORMATION","","",null,null],[17,"NO_REV_AVAIL","","",null,null],[17,"ANYEXTENDEDKEYUSAGE","","",null,null],[17,"NETSCAPE","","",null,null],[17,"NETSCAPE_CERT_EXTENSION","","",null,null],[17,"NETSCAPE_DATA_TYPE","","",null,null],[17,"NETSCAPE_CERT_TYPE","","",null,null],[17,"NETSCAPE_BASE_URL","","",null,null],[17,"NETSCAPE_REVOCATION_URL","","",null,null],[17,"NETSCAPE_CA_REVOCATION_URL","","",null,null],[17,"NETSCAPE_RENEWAL_URL","","",null,null],[17,"NETSCAPE_CA_POLICY_URL","","",null,null],[17,"NETSCAPE_SSL_SERVER_NAME","","",null,null],[17,"NETSCAPE_COMMENT","","",null,null],[17,"NETSCAPE_CERT_SEQUENCE","","",null,null],[17,"NS_SGC","","",null,null],[17,"ORG","","",null,null],[17,"DOD","","",null,null],[17,"IANA","","",null,null],[17,"DIRECTORY","","",null,null],[17,"MANAGEMENT","","",null,null],[17,"EXPERIMENTAL","","",null,null],[17,"PRIVATE","","",null,null],[17,"SECURITY","","",null,null],[17,"SNMPV2","","",null,null],[17,"MAIL","","",null,null],[17,"ENTERPRISES","","",null,null],[17,"DCOBJECT","","",null,null],[17,"MIME_MHS","","",null,null],[17,"MIME_MHS_HEADINGS","","",null,null],[17,"MIME_MHS_BODIES","","",null,null],[17,"ID_HEX_PARTIAL_MESSAGE","","",null,null],[17,"ID_HEX_MULTIPART_MESSAGE","","",null,null],[17,"ZLIB_COMPRESSION","","",null,null],[17,"AES_128_ECB","","",null,null],[17,"AES_128_CBC","","",null,null],[17,"AES_128_OFB128","","",null,null],[17,"AES_128_CFB128","","",null,null],[17,"ID_AES128_WRAP","","",null,null],[17,"AES_128_GCM","","",null,null],[17,"AES_128_CCM","","",null,null],[17,"ID_AES128_WRAP_PAD","","",null,null],[17,"AES_192_ECB","","",null,null],[17,"AES_192_CBC","","",null,null],[17,"AES_192_OFB128","","",null,null],[17,"AES_192_CFB128","","",null,null],[17,"ID_AES192_WRAP","","",null,null],[17,"AES_192_GCM","","",null,null],[17,"AES_192_CCM","","",null,null],[17,"ID_AES192_WRAP_PAD","","",null,null],[17,"AES_256_ECB","","",null,null],[17,"AES_256_CBC","","",null,null],[17,"AES_256_OFB128","","",null,null],[17,"AES_256_CFB128","","",null,null],[17,"ID_AES256_WRAP","","",null,null],[17,"AES_256_GCM","","",null,null],[17,"AES_256_CCM","","",null,null],[17,"ID_AES256_WRAP_PAD","","",null,null],[17,"AES_128_CFB1","","",null,null],[17,"AES_192_CFB1","","",null,null],[17,"AES_256_CFB1","","",null,null],[17,"AES_128_CFB8","","",null,null],[17,"AES_192_CFB8","","",null,null],[17,"AES_256_CFB8","","",null,null],[17,"AES_128_CTR","","",null,null],[17,"AES_192_CTR","","",null,null],[17,"AES_256_CTR","","",null,null],[17,"AES_128_XTS","","",null,null],[17,"AES_256_XTS","","",null,null],[17,"DES_CFB1","","",null,null],[17,"DES_CFB8","","",null,null],[17,"DES_EDE3_CFB1","","",null,null],[17,"DES_EDE3_CFB8","","",null,null],[17,"SHA256","","",null,null],[17,"SHA384","","",null,null],[17,"SHA512","","",null,null],[17,"SHA224","","",null,null],[17,"DSA_WITH_SHA224","","",null,null],[17,"DSA_WITH_SHA256","","",null,null],[17,"HOLD_INSTRUCTION_CODE","","",null,null],[17,"HOLD_INSTRUCTION_NONE","","",null,null],[17,"HOLD_INSTRUCTION_CALL_ISSUER","","",null,null],[17,"HOLD_INSTRUCTION_REJECT","","",null,null],[17,"DATA","","",null,null],[17,"PSS","","",null,null],[17,"UCL","","",null,null],[17,"PILOT","","",null,null],[17,"PILOTATTRIBUTETYPE","","",null,null],[17,"PILOTATTRIBUTESYNTAX","","",null,null],[17,"PILOTOBJECTCLASS","","",null,null],[17,"PILOTGROUPS","","",null,null],[17,"IA5STRINGSYNTAX","","",null,null],[17,"CASEIGNOREIA5STRINGSYNTAX","","",null,null],[17,"PILOTOBJECT","","",null,null],[17,"PILOTPERSON","","",null,null],[17,"ACCOUNT","","",null,null],[17,"DOCUMENT","","",null,null],[17,"ROOM","","",null,null],[17,"DOCUMENTSERIES","","",null,null],[17,"DOMAIN","","",null,null],[17,"RFC822LOCALPART","","",null,null],[17,"DNSDOMAIN","","",null,null],[17,"DOMAINRELATEDOBJECT","","",null,null],[17,"FRIENDLYCOUNTRY","","",null,null],[17,"SIMPLESECURITYOBJECT","","",null,null],[17,"PILOTORGANIZATION","","",null,null],[17,"PILOTDSA","","",null,null],[17,"QUALITYLABELLEDDATA","","",null,null],[17,"USERID","","",null,null],[17,"TEXTENCODEDORADDRESS","","",null,null],[17,"RFC822MAILBOX","","",null,null],[17,"INFO","","",null,null],[17,"FAVOURITEDRINK","","",null,null],[17,"ROOMNUMBER","","",null,null],[17,"PHOTO","","",null,null],[17,"USERCLASS","","",null,null],[17,"HOST","","",null,null],[17,"MANAGER","","",null,null],[17,"DOCUMENTIDENTIFIER","","",null,null],[17,"DOCUMENTTITLE","","",null,null],[17,"DOCUMENTVERSION","","",null,null],[17,"DOCUMENTAUTHOR","","",null,null],[17,"DOCUMENTLOCATION","","",null,null],[17,"HOMETELEPHONENUMBER","","",null,null],[17,"SECRETARY","","",null,null],[17,"OTHERMAILBOX","","",null,null],[17,"LASTMODIFIEDTIME","","",null,null],[17,"LASTMODIFIEDBY","","",null,null],[17,"DOMAINCOMPONENT","","",null,null],[17,"ARECORD","","",null,null],[17,"PILOTATTRIBUTETYPE27","","",null,null],[17,"MXRECORD","","",null,null],[17,"NSRECORD","","",null,null],[17,"SOARECORD","","",null,null],[17,"CNAMERECORD","","",null,null],[17,"ASSOCIATEDDOMAIN","","",null,null],[17,"ASSOCIATEDNAME","","",null,null],[17,"HOMEPOSTALADDRESS","","",null,null],[17,"PERSONALTITLE","","",null,null],[17,"MOBILETELEPHONENUMBER","","",null,null],[17,"PAGERTELEPHONENUMBER","","",null,null],[17,"FRIENDLYCOUNTRYNAME","","",null,null],[17,"ORGANIZATIONALSTATUS","","",null,null],[17,"JANETMAILBOX","","",null,null],[17,"MAILPREFERENCEOPTION","","",null,null],[17,"BUILDINGNAME","","",null,null],[17,"DSAQUALITY","","",null,null],[17,"SINGLELEVELQUALITY","","",null,null],[17,"SUBTREEMINIMUMQUALITY","","",null,null],[17,"SUBTREEMAXIMUMQUALITY","","",null,null],[17,"PERSONALSIGNATURE","","",null,null],[17,"DITREDIRECT","","",null,null],[17,"AUDIO","","",null,null],[17,"DOCUMENTPUBLISHER","","",null,null],[17,"ID_SET","","",null,null],[17,"SET_CTYPE","","",null,null],[17,"SET_MSGEXT","","",null,null],[17,"SET_ATTR","","",null,null],[17,"SET_POLICY","","",null,null],[17,"SET_CERTEXT","","",null,null],[17,"SET_BRAND","","",null,null],[17,"SETCT_PANDATA","","",null,null],[17,"SETCT_PANTOKEN","","",null,null],[17,"SETCT_PANONLY","","",null,null],[17,"SETCT_OIDATA","","",null,null],[17,"SETCT_PI","","",null,null],[17,"SETCT_PIDATA","","",null,null],[17,"SETCT_PIDATAUNSIGNED","","",null,null],[17,"SETCT_HODINPUT","","",null,null],[17,"SETCT_AUTHRESBAGGAGE","","",null,null],[17,"SETCT_AUTHREVREQBAGGAGE","","",null,null],[17,"SETCT_AUTHREVRESBAGGAGE","","",null,null],[17,"SETCT_CAPTOKENSEQ","","",null,null],[17,"SETCT_PINITRESDATA","","",null,null],[17,"SETCT_PI_TBS","","",null,null],[17,"SETCT_PRESDATA","","",null,null],[17,"SETCT_AUTHREQTBS","","",null,null],[17,"SETCT_AUTHRESTBS","","",null,null],[17,"SETCT_AUTHRESTBSX","","",null,null],[17,"SETCT_AUTHTOKENTBS","","",null,null],[17,"SETCT_CAPTOKENDATA","","",null,null],[17,"SETCT_CAPTOKENTBS","","",null,null],[17,"SETCT_ACQCARDCODEMSG","","",null,null],[17,"SETCT_AUTHREVREQTBS","","",null,null],[17,"SETCT_AUTHREVRESDATA","","",null,null],[17,"SETCT_AUTHREVRESTBS","","",null,null],[17,"SETCT_CAPREQTBS","","",null,null],[17,"SETCT_CAPREQTBSX","","",null,null],[17,"SETCT_CAPRESDATA","","",null,null],[17,"SETCT_CAPREVREQTBS","","",null,null],[17,"SETCT_CAPREVREQTBSX","","",null,null],[17,"SETCT_CAPREVRESDATA","","",null,null],[17,"SETCT_CREDREQTBS","","",null,null],[17,"SETCT_CREDREQTBSX","","",null,null],[17,"SETCT_CREDRESDATA","","",null,null],[17,"SETCT_CREDREVREQTBS","","",null,null],[17,"SETCT_CREDREVREQTBSX","","",null,null],[17,"SETCT_CREDREVRESDATA","","",null,null],[17,"SETCT_PCERTREQDATA","","",null,null],[17,"SETCT_PCERTRESTBS","","",null,null],[17,"SETCT_BATCHADMINREQDATA","","",null,null],[17,"SETCT_BATCHADMINRESDATA","","",null,null],[17,"SETCT_CARDCINITRESTBS","","",null,null],[17,"SETCT_MEAQCINITRESTBS","","",null,null],[17,"SETCT_REGFORMRESTBS","","",null,null],[17,"SETCT_CERTREQDATA","","",null,null],[17,"SETCT_CERTREQTBS","","",null,null],[17,"SETCT_CERTRESDATA","","",null,null],[17,"SETCT_CERTINQREQTBS","","",null,null],[17,"SETCT_ERRORTBS","","",null,null],[17,"SETCT_PIDUALSIGNEDTBE","","",null,null],[17,"SETCT_PIUNSIGNEDTBE","","",null,null],[17,"SETCT_AUTHREQTBE","","",null,null],[17,"SETCT_AUTHRESTBE","","",null,null],[17,"SETCT_AUTHRESTBEX","","",null,null],[17,"SETCT_AUTHTOKENTBE","","",null,null],[17,"SETCT_CAPTOKENTBE","","",null,null],[17,"SETCT_CAPTOKENTBEX","","",null,null],[17,"SETCT_ACQCARDCODEMSGTBE","","",null,null],[17,"SETCT_AUTHREVREQTBE","","",null,null],[17,"SETCT_AUTHREVRESTBE","","",null,null],[17,"SETCT_AUTHREVRESTBEB","","",null,null],[17,"SETCT_CAPREQTBE","","",null,null],[17,"SETCT_CAPREQTBEX","","",null,null],[17,"SETCT_CAPRESTBE","","",null,null],[17,"SETCT_CAPREVREQTBE","","",null,null],[17,"SETCT_CAPREVREQTBEX","","",null,null],[17,"SETCT_CAPREVRESTBE","","",null,null],[17,"SETCT_CREDREQTBE","","",null,null],[17,"SETCT_CREDREQTBEX","","",null,null],[17,"SETCT_CREDRESTBE","","",null,null],[17,"SETCT_CREDREVREQTBE","","",null,null],[17,"SETCT_CREDREVREQTBEX","","",null,null],[17,"SETCT_CREDREVRESTBE","","",null,null],[17,"SETCT_BATCHADMINREQTBE","","",null,null],[17,"SETCT_BATCHADMINRESTBE","","",null,null],[17,"SETCT_REGFORMREQTBE","","",null,null],[17,"SETCT_CERTREQTBE","","",null,null],[17,"SETCT_CERTREQTBEX","","",null,null],[17,"SETCT_CERTRESTBE","","",null,null],[17,"SETCT_CRLNOTIFICATIONTBS","","",null,null],[17,"SETCT_CRLNOTIFICATIONRESTBS","","",null,null],[17,"SETCT_BCIDISTRIBUTIONTBS","","",null,null],[17,"SETEXT_GENCRYPT","","",null,null],[17,"SETEXT_MIAUTH","","",null,null],[17,"SETEXT_PINSECURE","","",null,null],[17,"SETEXT_PINANY","","",null,null],[17,"SETEXT_TRACK2","","",null,null],[17,"SETEXT_CV","","",null,null],[17,"SET_POLICY_ROOT","","",null,null],[17,"SETCEXT_HASHEDROOT","","",null,null],[17,"SETCEXT_CERTTYPE","","",null,null],[17,"SETCEXT_MERCHDATA","","",null,null],[17,"SETCEXT_CCERTREQUIRED","","",null,null],[17,"SETCEXT_TUNNELING","","",null,null],[17,"SETCEXT_SETEXT","","",null,null],[17,"SETCEXT_SETQUALF","","",null,null],[17,"SETCEXT_PGWYCAPABILITIES","","",null,null],[17,"SETCEXT_TOKENIDENTIFIER","","",null,null],[17,"SETCEXT_TRACK2DATA","","",null,null],[17,"SETCEXT_TOKENTYPE","","",null,null],[17,"SETCEXT_ISSUERCAPABILITIES","","",null,null],[17,"SETATTR_CERT","","",null,null],[17,"SETATTR_PGWYCAP","","",null,null],[17,"SETATTR_TOKENTYPE","","",null,null],[17,"SETATTR_ISSCAP","","",null,null],[17,"SET_ROOTKEYTHUMB","","",null,null],[17,"SET_ADDPOLICY","","",null,null],[17,"SETATTR_TOKEN_EMV","","",null,null],[17,"SETATTR_TOKEN_B0PRIME","","",null,null],[17,"SETATTR_ISSCAP_CVM","","",null,null],[17,"SETATTR_ISSCAP_T2","","",null,null],[17,"SETATTR_ISSCAP_SIG","","",null,null],[17,"SETATTR_GENCRYPTGRM","","",null,null],[17,"SETATTR_T2ENC","","",null,null],[17,"SETATTR_T2CLEARTXT","","",null,null],[17,"SETATTR_TOKICCSIG","","",null,null],[17,"SETATTR_SECDEVSIG","","",null,null],[17,"SET_BRAND_IATA_ATA","","",null,null],[17,"SET_BRAND_DINERS","","",null,null],[17,"SET_BRAND_AMERICANEXPRESS","","",null,null],[17,"SET_BRAND_JCB","","",null,null],[17,"SET_BRAND_VISA","","",null,null],[17,"SET_BRAND_MASTERCARD","","",null,null],[17,"SET_BRAND_NOVUS","","",null,null],[17,"DES_CDMF","","",null,null],[17,"RSAOAEPENCRYPTIONSET","","",null,null],[17,"IPSEC3","","",null,null],[17,"IPSEC4","","",null,null],[17,"WHIRLPOOL","","",null,null],[17,"CRYPTOPRO","","",null,null],[17,"CRYPTOCOM","","",null,null],[17,"ID_GOSTR3411_94_WITH_GOSTR3410_2001","","",null,null],[17,"ID_GOSTR3411_94_WITH_GOSTR3410_94","","",null,null],[17,"ID_GOSTR3411_94","","",null,null],[17,"ID_HMACGOSTR3411_94","","",null,null],[17,"ID_GOSTR3410_2001","","",null,null],[17,"ID_GOSTR3410_94","","",null,null],[17,"ID_GOST28147_89","","",null,null],[17,"GOST89_CNT","","",null,null],[17,"ID_GOST28147_89_MAC","","",null,null],[17,"ID_GOSTR3411_94_PRF","","",null,null],[17,"ID_GOSTR3410_2001DH","","",null,null],[17,"ID_GOSTR3410_94DH","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_KEYMESHING","","",null,null],[17,"ID_GOST28147_89_NONE_KEYMESHING","","",null,null],[17,"ID_GOSTR3411_94_TESTPARAMSET","","",null,null],[17,"ID_GOSTR3411_94_CRYPTOPROPARAMSET","","",null,null],[17,"ID_GOST28147_89_TESTPARAMSET","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_A_PARAMSET","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_B_PARAMSET","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_C_PARAMSET","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_D_PARAMSET","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_OSCAR_1_1_PARAMSET","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_OSCAR_1_0_PARAMSET","","",null,null],[17,"ID_GOST28147_89_CRYPTOPRO_RIC_1_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_TESTPARAMSET","","",null,null],[17,"ID_GOSTR3410_94_CRYPTOPRO_A_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_CRYPTOPRO_B_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_CRYPTOPRO_C_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_CRYPTOPRO_D_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_CRYPTOPRO_XCHA_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_CRYPTOPRO_XCHB_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_CRYPTOPRO_XCHC_PARAMSET","","",null,null],[17,"ID_GOSTR3410_2001_TESTPARAMSET","","",null,null],[17,"ID_GOSTR3410_2001_CRYPTOPRO_A_PARAMSET","","",null,null],[17,"ID_GOSTR3410_2001_CRYPTOPRO_B_PARAMSET","","",null,null],[17,"ID_GOSTR3410_2001_CRYPTOPRO_C_PARAMSET","","",null,null],[17,"ID_GOSTR3410_2001_CRYPTOPRO_XCHA_PARAMSET","","",null,null],[17,"ID_GOSTR3410_2001_CRYPTOPRO_XCHB_PARAMSET","","",null,null],[17,"ID_GOSTR3410_94_A","","",null,null],[17,"ID_GOSTR3410_94_ABIS","","",null,null],[17,"ID_GOSTR3410_94_B","","",null,null],[17,"ID_GOSTR3410_94_BBIS","","",null,null],[17,"ID_GOST28147_89_CC","","",null,null],[17,"ID_GOSTR3410_94_CC","","",null,null],[17,"ID_GOSTR3410_2001_CC","","",null,null],[17,"ID_GOSTR3411_94_WITH_GOSTR3410_94_CC","","",null,null],[17,"ID_GOSTR3411_94_WITH_GOSTR3410_2001_CC","","",null,null],[17,"ID_GOSTR3410_2001_PARAMSET_CC","","",null,null],[17,"CAMELLIA_128_CBC","","",null,null],[17,"CAMELLIA_192_CBC","","",null,null],[17,"CAMELLIA_256_CBC","","",null,null],[17,"ID_CAMELLIA128_WRAP","","",null,null],[17,"ID_CAMELLIA192_WRAP","","",null,null],[17,"ID_CAMELLIA256_WRAP","","",null,null],[17,"CAMELLIA_128_ECB","","",null,null],[17,"CAMELLIA_128_OFB128","","",null,null],[17,"CAMELLIA_128_CFB128","","",null,null],[17,"CAMELLIA_192_ECB","","",null,null],[17,"CAMELLIA_192_OFB128","","",null,null],[17,"CAMELLIA_192_CFB128","","",null,null],[17,"CAMELLIA_256_ECB","","",null,null],[17,"CAMELLIA_256_OFB128","","",null,null],[17,"CAMELLIA_256_CFB128","","",null,null],[17,"CAMELLIA_128_CFB1","","",null,null],[17,"CAMELLIA_192_CFB1","","",null,null],[17,"CAMELLIA_256_CFB1","","",null,null],[17,"CAMELLIA_128_CFB8","","",null,null],[17,"CAMELLIA_192_CFB8","","",null,null],[17,"CAMELLIA_256_CFB8","","",null,null],[17,"KISA","","",null,null],[17,"SEED_ECB","","",null,null],[17,"SEED_CBC","","",null,null],[17,"SEED_CFB128","","",null,null],[17,"SEED_OFB128","","",null,null],[17,"HMAC","","",null,null],[17,"CMAC","","",null,null],[17,"RC4_HMAC_MD5","","",null,null],[17,"AES_128_CBC_HMAC_SHA1","","",null,null],[17,"AES_192_CBC_HMAC_SHA1","","",null,null],[17,"AES_256_CBC_HMAC_SHA1","","",null,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"nid"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"nid"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"nid"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"from_raw","","",37,{"inputs":[{"name":"c_int"}],"output":{"name":"nid"}}],[11,"as_raw","","",37,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[0,"ocsp","openssl","",null,null],[3,"Flag","openssl::ocsp","",null,null],[3,"OcspResponseStatus","","",null,null],[3,"OcspCertStatus","","",null,null],[3,"OcspRevokedStatus","","",null,null],[3,"Status","","",null,null],[12,"status","","The overall status of the response.",38,null],[12,"reason","","If `status` is `CERT_STATUS_REVOKED`, the reason for the revocation.",38,null],[12,"revocation_time","","If `status` is `CERT_STATUS_REVOKED`, the time at which the certificate was revoked.",38,null],[12,"this_update","","The time that this revocation check was performed.",38,null],[12,"next_update","","The time at which this revocation check expires.",38,null],[3,"OcspBasicResponse","","",null,null],[3,"OcspBasicResponseRef","","",null,null],[3,"OcspCertId","","",null,null],[3,"OcspCertIdRef","","",null,null],[3,"OcspResponse","","",null,null],[3,"OcspResponseRef","","",null,null],[3,"OcspRequest","","",null,null],[3,"OcspRequestRef","","",null,null],[3,"OcspOneReq","","",null,null],[3,"OcspOneReqRef","","",null,null],[17,"FLAG_NO_CERTS","","",null,null],[17,"FLAG_NO_INTERN","","",null,null],[17,"FLAG_NO_CHAIN","","",null,null],[17,"FLAG_NO_VERIFY","","",null,null],[17,"FLAG_NO_EXPLICIT","","",null,null],[17,"FLAG_NO_CA_SIGN","","",null,null],[17,"FLAG_NO_DELEGATED","","",null,null],[17,"FLAG_NO_CHECKS","","",null,null],[17,"FLAG_TRUST_OTHER","","",null,null],[17,"FLAG_RESPID_KEY","","",null,null],[17,"FLAG_NO_TIME","","",null,null],[17,"RESPONSE_STATUS_SUCCESSFUL","","",null,null],[17,"RESPONSE_STATUS_MALFORMED_REQUEST","","",null,null],[17,"RESPONSE_STATUS_INTERNAL_ERROR","","",null,null],[17,"RESPONSE_STATUS_TRY_LATER","","",null,null],[17,"RESPONSE_STATUS_SIG_REQUIRED","","",null,null],[17,"RESPONSE_STATUS_UNAUTHORIZED","","",null,null],[17,"CERT_STATUS_GOOD","","",null,null],[17,"CERT_STATUS_REVOKED","","",null,null],[17,"CERT_STATUS_UNKNOWN","","",null,null],[17,"REVOKED_STATUS_NO_STATUS","","",null,null],[17,"REVOKED_STATUS_UNSPECIFIED","","",null,null],[17,"REVOKED_STATUS_KEY_COMPROMISE","","",null,null],[17,"REVOKED_STATUS_CA_COMPROMISE","","",null,null],[17,"REVOKED_STATUS_AFFILIATION_CHANGED","","",null,null],[17,"REVOKED_STATUS_SUPERSEDED","","",null,null],[17,"REVOKED_STATUS_CESSATION_OF_OPERATION","","",null,null],[17,"REVOKED_STATUS_CERTIFICATE_HOLD","","",null,null],[17,"REVOKED_STATUS_REMOVE_FROM_CRL","","",null,null],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"flag"}}],[11,"partial_cmp","","",39,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"option"}}],[11,"lt","","",39,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"le","","",39,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"gt","","",39,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"ge","","",39,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"cmp","","",39,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"ordering"}}],[11,"hash","","",39,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",39,{"inputs":[],"output":{"name":"flag"}}],[11,"all","","Returns the set containing all flags.",39,{"inputs":[],"output":{"name":"flag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",39,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",39,{"inputs":[{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",39,{"inputs":[{"name":"c_ulong"}],"output":{"name":"flag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",39,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",39,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",39,{"inputs":[{"name":"self"},{"name":"flag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",39,{"inputs":[{"name":"self"},{"name":"flag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",39,{"inputs":[{"name":"self"},{"name":"flag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",39,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"flag"}}],[11,"bitor_assign","","Adds the set of flags.",39,{"inputs":[{"name":"self"},{"name":"flag"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",39,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"flag"}}],[11,"bitxor_assign","","Toggles the set of flags.",39,{"inputs":[{"name":"self"},{"name":"flag"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",39,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"flag"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",39,{"inputs":[{"name":"self"},{"name":"flag"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",39,{"inputs":[{"name":"self"},{"name":"flag"}],"output":{"name":"flag"}}],[11,"sub_assign","","Disables all flags enabled in the set.",39,{"inputs":[{"name":"self"},{"name":"flag"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",39,{"inputs":[{"name":"self"}],"output":{"name":"flag"}}],[11,"extend","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",39,{"inputs":[{"name":"t"}],"output":{"name":"flag"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"ocspresponsestatus"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"ocspresponsestatus"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"ocspresponsestatus"}],"output":{"name":"bool"}}],[11,"from_raw","","",40,{"inputs":[{"name":"c_int"}],"output":{"name":"ocspresponsestatus"}}],[11,"as_raw","","",40,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"ocspcertstatus"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"ocspcertstatus"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"ocspcertstatus"}],"output":{"name":"bool"}}],[11,"from_raw","","",41,{"inputs":[{"name":"c_int"}],"output":{"name":"ocspcertstatus"}}],[11,"as_raw","","",41,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"ocsprevokedstatus"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"ocsprevokedstatus"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"ocsprevokedstatus"}],"output":{"name":"bool"}}],[11,"from_raw","","",42,{"inputs":[{"name":"c_int"}],"output":{"name":"ocsprevokedstatus"}}],[11,"as_raw","","",42,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"check_validity","","Checks validity of the `this_update` and `next_update` fields.",38,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"option"}],"output":{"name":"result"}}],[11,"from_ptr","","",43,null],[11,"as_ptr","","",43,null],[11,"drop","","",43,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",43,{"inputs":[{"name":"self"}],"output":{"name":"ocspbasicresponseref"}}],[11,"deref_mut","","",43,{"inputs":[{"name":"self"}],"output":{"name":"ocspbasicresponseref"}}],[11,"verify","","Verifies the validity of the response.",44,{"inputs":[{"name":"self"},{"name":"stackref"},{"name":"x509storeref"},{"name":"flag"}],"output":{"name":"result"}}],[11,"find_status","","Looks up the status for the specified certificate ID.",44,{"inputs":[{"name":"self"},{"name":"ocspcertidref"}],"output":{"name":"option"}}],[11,"from_ptr","","",45,null],[11,"as_ptr","","",45,null],[11,"drop","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",45,{"inputs":[{"name":"self"}],"output":{"name":"ocspcertidref"}}],[11,"deref_mut","","",45,{"inputs":[{"name":"self"}],"output":{"name":"ocspcertidref"}}],[11,"from_cert","","Constructs a certificate ID for certificate `subject`.",45,{"inputs":[{"name":"messagedigest"},{"name":"x509ref"},{"name":"x509ref"}],"output":{"name":"result"}}],[11,"from_ptr","","",46,null],[11,"as_ptr","","",46,null],[11,"drop","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",46,{"inputs":[{"name":"self"}],"output":{"name":"ocspresponseref"}}],[11,"deref_mut","","",46,{"inputs":[{"name":"self"}],"output":{"name":"ocspresponseref"}}],[11,"create","","Creates an OCSP response from the status and optional body.",46,{"inputs":[{"name":"ocspresponsestatus"},{"name":"option"}],"output":{"name":"result"}}],[11,"from_der","","Deserializes a value from DER-formatted data.",46,null],[11,"to_der","","Serializes this value to DER.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"status","","Returns the status of the response.",47,{"inputs":[{"name":"self"}],"output":{"name":"ocspresponsestatus"}}],[11,"basic","","Returns the basic response.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_ptr","","",48,null],[11,"as_ptr","","",48,null],[11,"drop","","",48,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",48,{"inputs":[{"name":"self"}],"output":{"name":"ocsprequestref"}}],[11,"deref_mut","","",48,{"inputs":[{"name":"self"}],"output":{"name":"ocsprequestref"}}],[11,"new","","",48,{"inputs":[],"output":{"name":"result"}}],[11,"from_der","","Deserializes a value from DER-formatted data.",48,null],[11,"to_der","","Serializes this value to DER.",49,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"add_id","","",49,{"inputs":[{"name":"self"},{"name":"ocspcertid"}],"output":{"name":"result"}}],[11,"from_ptr","","",50,null],[11,"as_ptr","","",50,null],[11,"drop","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",50,{"inputs":[{"name":"self"}],"output":{"name":"ocsponereqref"}}],[11,"deref_mut","","",50,{"inputs":[{"name":"self"}],"output":{"name":"ocsponereqref"}}],[0,"pkcs12","openssl","PKCS #12 archives.",null,null],[3,"Pkcs12","openssl::pkcs12","",null,null],[3,"Pkcs12Ref","","",null,null],[3,"ParsedPkcs12","","",null,null],[12,"pkey","","",51,null],[12,"cert","","",51,null],[12,"chain","","",51,null],[3,"Pkcs12Builder","","",null,null],[11,"from_ptr","","",52,null],[11,"as_ptr","","",52,null],[11,"drop","","",52,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"pkcs12ref"}}],[11,"deref_mut","","",52,{"inputs":[{"name":"self"}],"output":{"name":"pkcs12ref"}}],[11,"to_der","","Serializes this value to DER.",53,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"parse","","Extracts the contents of the `Pkcs12`.",53,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_der","","Deserializes a value from DER-formatted data.",52,null],[11,"builder","","Creates a new builder for a protected pkcs12 certificate.",52,{"inputs":[],"output":{"name":"pkcs12builder"}}],[11,"key_algorithm","","The encryption algorithm that should be used for the key",54,{"inputs":[{"name":"self"},{"name":"nid"}],"output":{"name":"self"}}],[11,"cert_algorithm","","The encryption algorithm that should be used for the cert",54,{"inputs":[{"name":"self"},{"name":"nid"}],"output":{"name":"self"}}],[11,"key_iter","","Key iteration count, default is 2048 as of this writing",54,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"mac_iter","","MAC iteration count, default is the same as key_iter.",54,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"ca","","An additional set of certificates to include in the archive beyond the one provided to `build`.",54,{"inputs":[{"name":"self"},{"name":"stack"}],"output":{"name":"self"}}],[11,"build","","Builds the PKCS #12 object",54,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"pkeyref"},{"name":"x509"}],"output":{"name":"result"}}],[0,"pkcs5","openssl","",null,null],[3,"KeyIvPair","openssl::pkcs5","",null,null],[12,"key","","",55,null],[12,"iv","","",55,null],[5,"bytes_to_key","","Derives a key and an IV from various parameters.",null,null],[5,"pbkdf2_hmac","","Derives a key from a password and salt using the PBKDF2-HMAC algorithm with a digest function.",null,null],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"keyivpair"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"keyivpair"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"keyivpair"}],"output":{"name":"bool"}}],[11,"hash","","",55,null],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"pkey","openssl","",null,null],[3,"PKey","openssl::pkey","",null,null],[3,"PKeyRef","","",null,null],[3,"PKeyCtxRef","","",null,null],[11,"from_ptr","","",56,null],[11,"as_ptr","","",56,null],[11,"drop","","",56,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",56,{"inputs":[{"name":"self"}],"output":{"name":"pkeyref"}}],[11,"deref_mut","","",56,{"inputs":[{"name":"self"}],"output":{"name":"pkeyref"}}],[11,"rsa","","Returns a copy of the internal RSA key.",57,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"dsa","","Returns a copy of the internal DSA key.",57,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"dh","","Returns a copy of the internal DH key.",57,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"ec_key","","Returns a copy of the internal elliptic curve key.",57,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"public_key_to_pem","","Serializes a public key to PEM.",57,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"private_key_to_pem","","Serializes the private key to PEM.",57,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"private_key_to_pem_passphrase","","Serializes the private key to PEM, encrypting it with the specified symmetric cipher and passphrase.",57,null],[11,"private_key_to_der","","Serializes the private key to DER.",57,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"public_key_to_der","","Serializes the public key to DER.",57,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bits","","Returns the size of the key.",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"public_eq","","Compares the public component of this key with another.",57,{"inputs":[{"name":"self"},{"name":"pkeyref"}],"output":{"name":"bool"}}],[11,"from_rsa","","Creates a new `PKey` containing an RSA key.",56,{"inputs":[{"name":"rsa"}],"output":{"name":"result"}}],[11,"from_dsa","","Creates a new `PKey` containing a DSA key.",56,{"inputs":[{"name":"dsa"}],"output":{"name":"result"}}],[11,"from_dh","","Creates a new `PKey` containing a Diffie-Hellman key.",56,{"inputs":[{"name":"dh"}],"output":{"name":"result"}}],[11,"from_ec_key","","Creates a new `PKey` containing an elliptic curve key.",56,{"inputs":[{"name":"eckey"}],"output":{"name":"result"}}],[11,"hmac","","Creates a new `PKey` containing an HMAC key.",56,null],[11,"private_key_from_pem","","Deserializes a PEM-formatted private key.",56,null],[11,"private_key_from_pem_passphrase","","Deserializes a PEM-formatted private key, using the supplied password if the key is encrypted.",56,null],[11,"private_key_from_pem_callback","","Deserializes a PEM-formatted private key, using a callback to retrieve a password if the key is encrypted.",56,null],[11,"public_key_from_pem","","Deserializes a public key from PEM-formatted data.",56,null],[11,"private_key_from_pkcs8_callback","","Deserializes a DER-formatted PKCS#8 private key, using a callback to retrieve the password if the key is encrpyted.",56,null],[11,"private_key_from_pkcs8_passphrase","","Deserializes a DER-formatted PKCS#8 private key, using the supplied password if the key is encrypted.",56,null],[11,"private_key_from_pem_cb","","",56,null],[11,"set_rsa_padding","","",58,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"result"}}],[11,"rsa_padding","","",58,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"rand","openssl","",null,null],[5,"rand_bytes","openssl::rand","",null,null],[0,"rsa","openssl","",null,null],[3,"Padding","openssl::rsa","Type of encryption padding to use.",null,null],[3,"Rsa","","",null,null],[3,"RsaRef","","",null,null],[17,"NO_PADDING","","",null,null],[17,"PKCS1_PADDING","","",null,null],[17,"PKCS1_OAEP_PADDING","","",null,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"padding"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"padding"}],"output":{"name":"bool"}}],[11,"from_raw","","",59,{"inputs":[{"name":"c_int"}],"output":{"name":"padding"}}],[11,"as_raw","","",59,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_ptr","","",60,null],[11,"as_ptr","","",60,null],[11,"drop","","",60,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",60,{"inputs":[{"name":"self"}],"output":{"name":"rsaref"}}],[11,"deref_mut","","",60,{"inputs":[{"name":"self"}],"output":{"name":"rsaref"}}],[11,"private_key_to_pem","","Serializes the private key to PEM.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"private_key_to_pem_passphrase","","Serializes the private key to PEM, encrypting it with the specified symmetric cipher and passphrase.",61,null],[11,"public_key_to_pem","","Serializes a public key to PEM.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"private_key_to_der","","Serializes the private key to DER.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"public_key_to_der","","Serializes the public key to DER.",61,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size","","",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"private_decrypt","","Decrypts data using the private key, returning the number of decrypted bytes.",61,null],[11,"private_encrypt","","Encrypts data using the private key, returning the number of encrypted bytes.",61,null],[11,"public_decrypt","","Decrypts data using the public key, returning the number of decrypted bytes.",61,null],[11,"public_encrypt","","Encrypts data using the private key, returning the number of encrypted bytes.",61,null],[11,"n","","",61,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"d","","",61,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"e","","",61,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"p","","",61,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"q","","",61,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_public_components","","only useful for associating the key material directly with the key, it's safer to use the supplied load and save methods for DER formatted keys.",60,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"from_private_components","","",60,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"},{"name":"bignum"},{"name":"bignum"},{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"generate","","Generates a public/private key pair with the specified size.",60,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"private_key_from_pem","","Deserializes a PEM-formatted private key.",60,null],[11,"private_key_from_pem_passphrase","","Deserializes a PEM-formatted private key, using the supplied password if the key is encrypted.",60,null],[11,"private_key_from_pem_callback","","Deserializes a PEM-formatted private key, using a callback to retrieve a password if the key is encrypted.",60,null],[11,"private_key_from_der","","Deserializes a private key from DER-formatted data.",60,null],[11,"public_key_from_pem","","Deserializes a public key from PEM-formatted data.",60,null],[11,"public_key_from_der","","Deserializes a public key from DER-formatted data.",60,null],[11,"private_key_from_pem_cb","","",60,null],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"sign","openssl","Message signatures.",null,null],[3,"Signer","openssl::sign","",null,null],[3,"Verifier","","",null,null],[11,"drop","","",62,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",62,{"inputs":[{"name":"messagedigest"},{"name":"pkeyref"}],"output":{"name":"result"}}],[11,"pkey_ctx","","",62,{"inputs":[{"name":"self"}],"output":{"name":"pkeyctxref"}}],[11,"pkey_ctx_mut","","",62,{"inputs":[{"name":"self"}],"output":{"name":"pkeyctxref"}}],[11,"update","","",62,null],[11,"finish","","",62,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",62,null],[11,"flush","","",62,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",63,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",63,{"inputs":[{"name":"messagedigest"},{"name":"pkeyref"}],"output":{"name":"result"}}],[11,"pkey_ctx","","",63,{"inputs":[{"name":"self"}],"output":{"name":"pkeyctxref"}}],[11,"pkey_ctx_mut","","",63,{"inputs":[{"name":"self"}],"output":{"name":"pkeyctxref"}}],[11,"update","","",63,null],[11,"finish","","",63,null],[11,"write","","",63,null],[11,"flush","","",63,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"ssl","openssl","SSL/TLS support.",null,null],[3,"SslConnectorBuilder","openssl::ssl","A builder for `SslConnector`s.",null,null],[3,"SslConnector","","A type which wraps client-side streams in a TLS session.",null,null],[3,"SslAcceptorBuilder","","A builder for `SslAcceptor`s.",null,null],[3,"SslAcceptor","","A type which wraps server-side streams in a TLS session.",null,null],[3,"SslOption","","",null,null],[3,"SslMode","","",null,null],[3,"SslMethod","","",null,null],[3,"SslVerifyMode","","",null,null],[3,"StatusType","","",null,null],[3,"SslContextBuilder","","A builder for `SslContext`s.",null,null],[3,"SslContext","","",null,null],[3,"SslContextRef","","",null,null],[3,"CipherBits","","",null,null],[12,"secret","","The number of secret bits used for the cipher.",64,null],[12,"algorithm","","The number of bits processed by the chosen algorithm.",64,null],[3,"SslCipher","","",null,null],[3,"SslCipherRef","","",null,null],[3,"SslSession","","",null,null],[3,"SslSessionRef","","",null,null],[3,"Ssl","","",null,null],[3,"SslRef","","",null,null],[3,"MidHandshakeSslStream","","An SSL stream midway through the handshake process.",null,null],[3,"SslStream","","A stream wrapper which handles SSL encryption for an underlying stream.",null,null],[4,"Error","","An SSL error.",null,null],[13,"ZeroReturn","","The SSL session has been closed by the other end",65,null],[13,"WantRead","","An attempt to read data from the underlying socket returned `WouldBlock`. Wait for read readiness and reattempt the operation.",65,null],[13,"WantWrite","","An attempt to write data from the underlying socket returned `WouldBlock`. Wait for write readiness and reattempt the operation.",65,null],[13,"WantX509Lookup","","The client certificate callback requested to be called again.",65,null],[13,"Stream","","An error reported by the underlying stream.",65,null],[13,"Ssl","","An error in the OpenSSL library.",65,null],[4,"HandshakeError","","An error or intermediate state after a TLS handshake attempt.",null,null],[13,"SetupFailure","","Setup failed.",66,null],[13,"Failure","","The handshake failed.",66,null],[13,"Interrupted","","The handshake was interrupted midway through.",66,null],[4,"SniError","","An error returned from an SNI callback.",null,null],[13,"Fatal","","",67,null],[13,"Warning","","",67,null],[13,"NoAck","","",67,null],[4,"ShutdownResult","","The result of a shutdown request.",null,null],[13,"Sent","","A close notify message has been sent to the peer.",68,null],[13,"Received","","A close notify response message has been received from the peer.",68,null],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",65,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",65,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",65,{"inputs":[{"name":"errorstack"}],"output":{"name":"error"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",66,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",66,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",66,{"inputs":[{"name":"errorstack"}],"output":{"name":"handshakeerror"}}],[11,"new","","Creates a new builder for TLS connections.",69,{"inputs":[{"name":"sslmethod"}],"output":{"name":"result"}}],[11,"builder","","Returns a shared reference to the inner `SslContextBuilder`.",69,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextbuilder"}}],[11,"builder_mut","","Returns a mutable reference to the inner `SslContextBuilder`.",69,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextbuilder"}}],[11,"build","","Consumes the builder, returning a `SslConnector`.",69,{"inputs":[{"name":"self"}],"output":{"name":"sslconnector"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"sslconnector"}}],[11,"connect","","Initiates a client-side TLS session on a stream.",70,{"inputs":[{"name":"self"},{"name":"str"},{"name":"s"}],"output":{"name":"result"}}],[11,"danger_connect_without_providing_domain_for_certificate_verification_and_server_name_indication","","Initiates a client-side TLS session on a stream without performing hostname verification.",70,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"configure","","Returns a structure allowing for configuration of a single TLS session before connection.",70,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"mozilla_intermediate","","Creates a new builder configured to connect to non-legacy clients. This should generally be considered a reasonable default choice.",71,{"inputs":[{"name":"sslmethod"},{"name":"pkeyref"},{"name":"x509ref"},{"name":"i"}],"output":{"name":"result"}}],[11,"mozilla_modern","","Creates a new builder configured to connect to modern clients.",71,{"inputs":[{"name":"sslmethod"},{"name":"pkeyref"},{"name":"x509ref"},{"name":"i"}],"output":{"name":"result"}}],[11,"mozilla_intermediate_raw","","Like `mozilla_intermediate`, but does not load the certificate chain and private key.",71,{"inputs":[{"name":"sslmethod"}],"output":{"name":"result"}}],[11,"mozilla_modern_raw","","Like `mozilla_modern`, but does not load the certificate chain and private key.",71,{"inputs":[{"name":"sslmethod"}],"output":{"name":"result"}}],[11,"builder","","Returns a shared reference to the inner `SslContextBuilder`.",71,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextbuilder"}}],[11,"builder_mut","","Returns a mutable reference to the inner `SslContextBuilder`.",71,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextbuilder"}}],[11,"build","","Consumes the builder, returning a `SslAcceptor`.",71,{"inputs":[{"name":"self"}],"output":{"name":"sslacceptor"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"sslacceptor"}}],[11,"accept","","Initiates a server-side TLS session on a stream.",72,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[17,"SSL_OP_MICROSOFT_SESS_ID_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_CHALLENGE_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG","","",null,null],[17,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER","","",null,null],[17,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG","","",null,null],[17,"SSL_OP_TLS_D5_BUG","","",null,null],[17,"SSL_OP_TLS_BLOCK_PADDING_BUG","","",null,null],[17,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","","",null,null],[17,"SSL_OP_ALL","","",null,null],[17,"SSL_OP_NO_QUERY_MTU","","",null,null],[17,"SSL_OP_COOKIE_EXCHANGE","","",null,null],[17,"SSL_OP_NO_TICKET","","",null,null],[17,"SSL_OP_CISCO_ANYCONNECT","","",null,null],[17,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION","","",null,null],[17,"SSL_OP_NO_COMPRESSION","","",null,null],[17,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION","","",null,null],[17,"SSL_OP_SINGLE_ECDH_USE","","",null,null],[17,"SSL_OP_SINGLE_DH_USE","","",null,null],[17,"SSL_OP_CIPHER_SERVER_PREFERENCE","","",null,null],[17,"SSL_OP_TLS_ROLLBACK_BUG","","",null,null],[17,"SSL_OP_NO_SSLV2","","",null,null],[17,"SSL_OP_NO_SSLV3","","",null,null],[17,"SSL_OP_NO_TLSV1","","",null,null],[17,"SSL_OP_NO_TLSV1_2","","",null,null],[17,"SSL_OP_NO_TLSV1_1","","",null,null],[17,"SSL_MODE_ENABLE_PARTIAL_WRITE","","",null,null],[17,"SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER","","",null,null],[17,"SSL_MODE_AUTO_RETRY","","",null,null],[17,"SSL_MODE_NO_AUTO_CHAIN","","",null,null],[17,"SSL_MODE_RELEASE_BUFFERS","","",null,null],[17,"SSL_MODE_SEND_CLIENTHELLO_TIME","","",null,null],[17,"SSL_MODE_SEND_SERVERHELLO_TIME","","",null,null],[17,"SSL_MODE_SEND_FALLBACK_SCSV","","",null,null],[17,"SSL_VERIFY_PEER","","Verify that the server's certificate is trusted",null,null],[17,"SSL_VERIFY_NONE","","Do not verify the server's certificate",null,null],[17,"SSL_VERIFY_FAIL_IF_NO_PEER_CERT","","Terminate handshake if client did not return a certificate. Use together with SSL_VERIFY_PEER.",null,null],[17,"STATUS_TYPE_OCSP","","An OSCP status.",null,null],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"ssloption"}}],[11,"partial_cmp","","",73,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"option"}}],[11,"lt","","",73,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"le","","",73,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"gt","","",73,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"ge","","",73,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"cmp","","",73,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"ordering"}}],[11,"hash","","",73,null],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",73,{"inputs":[],"output":{"name":"ssloption"}}],[11,"all","","Returns the set containing all flags.",73,{"inputs":[],"output":{"name":"ssloption"}}],[11,"bits","","Returns the raw value of the flags currently stored.",73,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",73,{"inputs":[{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",73,{"inputs":[{"name":"c_ulong"}],"output":{"name":"ssloption"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",73,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",73,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",73,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",73,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",73,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",73,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"ssloption"}}],[11,"bitor_assign","","Adds the set of flags.",73,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",73,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"ssloption"}}],[11,"bitxor_assign","","Toggles the set of flags.",73,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",73,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"ssloption"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",73,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",73,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"ssloption"}}],[11,"sub_assign","","Disables all flags enabled in the set.",73,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",73,{"inputs":[{"name":"self"}],"output":{"name":"ssloption"}}],[11,"extend","","",73,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",73,{"inputs":[{"name":"t"}],"output":{"name":"ssloption"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"sslmode"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"option"}}],[11,"lt","","",74,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"le","","",74,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"gt","","",74,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"ge","","",74,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"cmp","","",74,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"ordering"}}],[11,"hash","","",74,null],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",74,{"inputs":[],"output":{"name":"sslmode"}}],[11,"all","","Returns the set containing all flags.",74,{"inputs":[],"output":{"name":"sslmode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",74,{"inputs":[{"name":"self"}],"output":{"name":"c_long"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",74,{"inputs":[{"name":"c_long"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",74,{"inputs":[{"name":"c_long"}],"output":{"name":"sslmode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",74,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",74,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",74,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",74,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",74,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",74,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"sslmode"}}],[11,"bitor_assign","","Adds the set of flags.",74,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",74,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"sslmode"}}],[11,"bitxor_assign","","Toggles the set of flags.",74,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",74,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"sslmode"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",74,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",74,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"sslmode"}}],[11,"sub_assign","","Disables all flags enabled in the set.",74,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",74,{"inputs":[{"name":"self"}],"output":{"name":"sslmode"}}],[11,"extend","","",74,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",74,{"inputs":[{"name":"t"}],"output":{"name":"sslmode"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"sslmethod"}}],[11,"tls","","Support all versions of the TLS protocol.",75,{"inputs":[],"output":{"name":"sslmethod"}}],[11,"dtls","","Support all versions of the DTLS protocol.",75,{"inputs":[],"output":{"name":"sslmethod"}}],[11,"from_ptr","","",75,null],[11,"as_ptr","","",75,null],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"sslverifymode"}}],[11,"partial_cmp","","",76,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"option"}}],[11,"lt","","",76,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"le","","",76,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"gt","","",76,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"ge","","",76,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"cmp","","",76,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"ordering"}}],[11,"hash","","",76,null],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",76,{"inputs":[],"output":{"name":"sslverifymode"}}],[11,"all","","Returns the set containing all flags.",76,{"inputs":[],"output":{"name":"sslverifymode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",76,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",76,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",76,{"inputs":[{"name":"i32"}],"output":{"name":"sslverifymode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",76,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",76,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",76,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",76,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",76,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",76,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"bitor_assign","","Adds the set of flags.",76,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",76,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"bitxor_assign","","Toggles the set of flags.",76,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",76,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",76,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",76,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"sub_assign","","Disables all flags enabled in the set.",76,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",76,{"inputs":[{"name":"self"}],"output":{"name":"sslverifymode"}}],[11,"extend","","",76,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",76,{"inputs":[{"name":"t"}],"output":{"name":"sslverifymode"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"statustype"}}],[11,"from_raw","","",77,{"inputs":[{"name":"c_int"}],"output":{"name":"statustype"}}],[11,"as_raw","","",77,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"drop","","",78,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",78,{"inputs":[{"name":"sslmethod"}],"output":{"name":"result"}}],[11,"from_ptr","","",78,null],[11,"as_ptr","","",78,null],[11,"set_verify","","Configures the certificate verification method for new connections.",78,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"set_verify_callback","","Configures the certificate verification method for new connections and registers a verification callback.",78,{"inputs":[{"name":"self"},{"name":"sslverifymode"},{"name":"f"}],"output":null}],[11,"set_servername_callback","","Configures the server name indication (SNI) callback for new connections",78,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_verify_depth","","Sets verification depth",78,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"set_read_ahead","","",78,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_mode","","",78,{"inputs":[{"name":"self"},{"name":"sslmode"}],"output":{"name":"sslmode"}}],[11,"set_tmp_dh","","",78,{"inputs":[{"name":"self"},{"name":"dhref"}],"output":{"name":"result"}}],[11,"set_tmp_dh_callback","","",78,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_tmp_ecdh","","",78,{"inputs":[{"name":"self"},{"name":"eckeyref"}],"output":{"name":"result"}}],[11,"set_default_verify_paths","","Use the default locations of trusted certificates for verification.",78,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_ca_file","","Specifies the file that contains trusted CA certificates.",78,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"set_client_ca_list","","Sets the list of CAs sent to the client.",78,{"inputs":[{"name":"self"},{"name":"stack"}],"output":null}],[11,"set_session_id_context","","Set the context identifier for sessions",78,null],[11,"set_certificate_file","","Loads a certificate from a file.",78,{"inputs":[{"name":"self"},{"name":"p"},{"name":"x509filetype"}],"output":{"name":"result"}}],[11,"set_certificate_chain_file","","Loads a certificate chain from a file.",78,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"set_certificate","","Sets the certificate.",78,{"inputs":[{"name":"self"},{"name":"x509ref"}],"output":{"name":"result"}}],[11,"add_extra_chain_cert","","Appends a certificate to the certificate chain.",78,{"inputs":[{"name":"self"},{"name":"x509"}],"output":{"name":"result"}}],[11,"set_private_key_file","","Loads the private key from a file.",78,{"inputs":[{"name":"self"},{"name":"p"},{"name":"x509filetype"}],"output":{"name":"result"}}],[11,"set_private_key","","Sets the private key.",78,{"inputs":[{"name":"self"},{"name":"pkeyref"}],"output":{"name":"result"}}],[11,"set_cipher_list","","Sets the cipher configuration.",78,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_options","","",78,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"ssloption"}}],[11,"options","","",78,{"inputs":[{"name":"self"}],"output":{"name":"ssloption"}}],[11,"clear_options","","",78,{"inputs":[{"name":"self"},{"name":"ssloption"}],"output":{"name":"ssloption"}}],[11,"set_npn_protocols","","Set the protocols to be used during Next Protocol Negotiation (the protocols supported by the application).",78,null],[11,"check_private_key","","Checks consistency between the private key and certificate.",78,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"cert_store","","Returns a shared reference to the context's certificate store.",78,{"inputs":[{"name":"self"}],"output":{"name":"x509storebuilderref"}}],[11,"cert_store_mut","","Returns a mutable reference to the context's certificate store.",78,{"inputs":[{"name":"self"}],"output":{"name":"x509storebuilderref"}}],[11,"set_status_callback","","Sets the callback dealing with OCSP stapling.",78,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"build","","",78,{"inputs":[{"name":"self"}],"output":{"name":"sslcontext"}}],[11,"from_ptr","","",79,null],[11,"as_ptr","","",79,null],[11,"drop","","",79,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",79,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextref"}}],[11,"deref_mut","","",79,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextref"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"builder","","",79,{"inputs":[{"name":"sslmethod"}],"output":{"name":"result"}}],[11,"cert_store","","Returns the certificate store used for verification.",80,{"inputs":[{"name":"self"}],"output":{"name":"x509storeref"}}],[11,"extra_chain_certs","","",80,{"inputs":[{"name":"self"}],"output":{"name":"stackref"}}],[11,"from_ptr","","",81,null],[11,"as_ptr","","",81,null],[11,"deref","","",81,{"inputs":[{"name":"self"}],"output":{"name":"sslcipherref"}}],[11,"deref_mut","","",81,{"inputs":[{"name":"self"}],"output":{"name":"sslcipherref"}}],[11,"name","","Returns the name of cipher.",82,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"version","","Returns the SSL/TLS protocol version that first defined the cipher.",82,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"bits","","Returns the number of bits used for the cipher.",82,{"inputs":[{"name":"self"}],"output":{"name":"cipherbits"}}],[11,"description","","Returns a textual description of the cipher used",82,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"from_ptr","","",83,null],[11,"as_ptr","","",83,null],[11,"drop","","",83,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",83,{"inputs":[{"name":"self"}],"output":{"name":"sslsessionref"}}],[11,"deref_mut","","",83,{"inputs":[{"name":"self"}],"output":{"name":"sslsessionref"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"sslsession"}}],[11,"borrow","","",83,{"inputs":[{"name":"self"}],"output":{"name":"sslsessionref"}}],[11,"to_owned","","",84,{"inputs":[{"name":"self"}],"output":{"name":"sslsession"}}],[11,"id","","Returns the SSL session ID.",84,null],[11,"master_key_len","","Returns the length of the master key.",84,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"master_key","","Copies the master key into the provided buffer.",84,null],[11,"from_ptr","","",85,null],[11,"as_ptr","","",85,null],[11,"drop","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",85,{"inputs":[{"name":"self"}],"output":{"name":"sslref"}}],[11,"deref_mut","","",85,{"inputs":[{"name":"self"}],"output":{"name":"sslref"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_verify","","Sets the verification mode to be used during the handshake process.",86,{"inputs":[{"name":"self"},{"name":"sslverifymode"}],"output":null}],[11,"set_verify_callback","","Sets the certificate verification callback to be used during the handshake process.",86,{"inputs":[{"name":"self"},{"name":"sslverifymode"},{"name":"f"}],"output":null}],[11,"set_tmp_dh","","",86,{"inputs":[{"name":"self"},{"name":"dhref"}],"output":{"name":"result"}}],[11,"set_tmp_dh_callback","","",86,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_tmp_ecdh","","",86,{"inputs":[{"name":"self"},{"name":"eckeyref"}],"output":{"name":"result"}}],[11,"current_cipher","","",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"state_string","","",86,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"state_string_long","","",86,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"set_hostname","","Sets the host name to be used with SNI (Server Name Indication).",86,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"peer_certificate","","Returns the certificate of the peer, if present.",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"certificate","","Returns the certificate associated with this `Ssl`, if present.",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"private_key","","Returns the private key associated with this `Ssl`, if present.",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"version","","Returns the name of the protocol used for the connection, e.g. \"TLSv1.2\", \"SSLv3\", etc.",86,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"selected_npn_protocol","","Returns the protocol selected by performing Next Protocol Negotiation, if any.",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pending","","Returns the number of bytes remaining in the currently processed TLS record.",86,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"compression","","Returns the compression currently in use.",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"servername","","Returns the server's name for the current connection",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_ssl_context","","Changes the context corresponding to the current connection.",86,{"inputs":[{"name":"self"},{"name":"sslcontextref"}],"output":{"name":"result"}}],[11,"ssl_context","","Returns the context corresponding to the current connection",86,{"inputs":[{"name":"self"}],"output":{"name":"sslcontextref"}}],[11,"verify_result","","Returns the result of X509 certificate verification.",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"session","","Returns the SSL session.",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_session","","Sets the session to be used.",86,{"inputs":[{"name":"self"},{"name":"sslsessionref"}],"output":{"name":"result"}}],[11,"session_reused","","Determines if the session provided to `set_session` was successfully reused.",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_status_type","","Sets the status response a client wishes the server to reply with.",86,{"inputs":[{"name":"self"},{"name":"statustype"}],"output":{"name":"result"}}],[11,"ocsp_status","","Returns the server's OCSP response, if present.",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_ocsp_status","","Sets the OCSP response to be returned to the client.",86,null],[11,"is_server","","Determines if this `Ssl` is configured for server-side or client-side use.",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",85,{"inputs":[{"name":"sslcontext"}],"output":{"name":"result"}}],[11,"connect","","Creates an SSL/TLS client operating over the provided stream.",85,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"accept","","Creates an SSL/TLS server operating over the provided stream.",85,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a shared reference to the inner stream.",87,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the inner stream.",87,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"ssl","","Returns a shared reference to the `Ssl` of the stream.",87,{"inputs":[{"name":"self"}],"output":{"name":"sslref"}}],[11,"error","","Returns the underlying error which interrupted this handshake.",87,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"into_error","","Consumes `self`, returning its error.",87,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"handshake","","Restarts the handshake process.",87,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ssl_read","","Like `read`, but returns an `ssl::Error` rather than an `io::Error`.",88,null],[11,"ssl_write","","Like `write`, but returns an `ssl::Error` rather than an `io::Error`.",88,null],[11,"shutdown","","Shuts down the session.",88,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a reference to the underlying stream.",88,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the underlying stream.",88,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"ssl","","Returns the OpenSSL `Ssl` object associated with this stream.",88,{"inputs":[{"name":"self"}],"output":{"name":"sslref"}}],[11,"read","","",88,null],[11,"write","","",88,null],[11,"flush","","",88,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"shutdownresult"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"shutdownresult"}],"output":{"name":"bool"}}],[0,"stack","openssl","",null,null],[3,"Stack","openssl::stack","An owned stack of `T`.",null,null],[3,"IntoIter","","",null,null],[3,"StackRef","","",null,null],[3,"Iter","","An iterator over the stack's contents.",null,null],[3,"IterMut","","A mutable iterator over the stack's contents.",null,null],[8,"Stackable","","Trait implemented by types which can be placed in a stack.",null,null],[16,"StackType","","The C stack type for this element.",89,null],[11,"new","","",90,{"inputs":[],"output":{"name":"result"}}],[11,"drop","","",90,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",90,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"as_ref","","",90,{"inputs":[{"name":"self"}],"output":{"name":"stackref"}}],[11,"borrow","","",90,{"inputs":[{"name":"self"}],"output":{"name":"stackref"}}],[11,"from_ptr","","",90,null],[11,"as_ptr","","",90,null],[11,"deref","","",90,{"inputs":[{"name":"self"}],"output":{"name":"stackref"}}],[11,"deref_mut","","",90,{"inputs":[{"name":"self"}],"output":{"name":"stackref"}}],[11,"drop","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",91,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"len","","Returns the number of items in the stack",92,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","",92,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",92,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"get","","Returns a reference to the element at the given index in the stack or `None` if the index is out of bounds",92,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the element at the given index in the stack or `None` if the index is out of bounds",92,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"push","","Pushes a value onto the top of the stack.",92,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"pop","","Removes the last element from the stack and returns it.",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",92,null],[11,"index_mut","","",92,null],[11,"next","","",93,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"next","","",94,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[0,"string","openssl","",null,null],[3,"OpensslString","openssl::string","",null,null],[3,"OpensslStringRef","","",null,null],[11,"from_ptr","","",95,null],[11,"as_ptr","","",95,null],[11,"drop","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",95,{"inputs":[{"name":"self"}],"output":{"name":"opensslstringref"}}],[11,"deref_mut","","",95,{"inputs":[{"name":"self"}],"output":{"name":"opensslstringref"}}],[11,"from_raw_parts","","",95,null],[11,"from_null_terminated","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",96,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"symm","openssl","",null,null],[3,"Cipher","openssl::symm","",null,null],[3,"Crypter","","Represents a symmetric cipher context.",null,null],[4,"Mode","","",null,null],[13,"Encrypt","","",97,null],[13,"Decrypt","","",97,null],[5,"encrypt","","Encrypts data, using the specified crypter type in encrypt mode with the specified key and iv; returns the resulting (encrypted) data.",null,null],[5,"decrypt","","Decrypts data, using the specified crypter type in decrypt mode with the specified key and iv; returns the resulting (decrypted) data.",null,null],[5,"encrypt_aead","","Like `encrypt`, but for AEAD ciphers such as AES GCM.",null,null],[5,"decrypt_aead","","Like `decrypt`, but for AEAD ciphers such as AES GCM.",null,null],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"cipher"}}],[11,"aes_128_ecb","","",98,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_128_cbc","","",98,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_128_xts","","",98,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_128_ctr","","",98,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_128_cfb1","","",98,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_128_cfb128","","",98,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_128_cfb8","","",98,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_128_gcm","","",98,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_ecb","","",98,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_cbc","","",98,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_xts","","",98,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_ctr","","",98,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_cfb1","","",98,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_cfb128","","",98,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_cfb8","","",98,{"inputs":[],"output":{"name":"cipher"}}],[11,"aes_256_gcm","","",98,{"inputs":[],"output":{"name":"cipher"}}],[11,"bf_cbc","","",98,{"inputs":[],"output":{"name":"cipher"}}],[11,"bf_ecb","","",98,{"inputs":[],"output":{"name":"cipher"}}],[11,"bf_cfb64","","",98,{"inputs":[],"output":{"name":"cipher"}}],[11,"bf_ofb","","",98,{"inputs":[],"output":{"name":"cipher"}}],[11,"des_cbc","","",98,{"inputs":[],"output":{"name":"cipher"}}],[11,"des_ecb","","",98,{"inputs":[],"output":{"name":"cipher"}}],[11,"rc4","","",98,{"inputs":[],"output":{"name":"cipher"}}],[11,"from_ptr","","",98,null],[11,"as_ptr","","",98,null],[11,"key_len","","Returns the length of keys used with this cipher.",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iv_len","","Returns the length of the IV used with this cipher, or `None` if the cipher does not use an IV.",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"block_size","","Returns the block size of the cipher.",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `Crypter`.",99,null],[11,"pad","","Enables or disables padding.",99,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"set_tag","","Sets the tag used to authenticate ciphertext in AEAD ciphers such as AES GCM.",99,null],[11,"aad_update","","Feeds Additional Authenticated Data (AAD) through the cipher.",99,null],[11,"update","","Feeds data from `input` through the cipher, writing encrypted/decrypted bytes into `output`.",99,null],[11,"finalize","","Finishes the encryption/decryption process, writing any remaining data to `output`.",99,null],[11,"get_tag","","Retrieves the authentication tag used to authenticate ciphertext in AEAD ciphers such as AES GCM.",99,null],[11,"drop","","",99,{"inputs":[{"name":"self"}],"output":null}],[0,"types","openssl","",null,null],[8,"OpenSslType","openssl::types","A type implemented by wrappers over foreign types.",null,null],[16,"CType","","The raw C type.",100,null],[16,"Ref","","The type representing a reference to this type.",100,null],[10,"from_ptr","","Constructs an instance of this type from its raw type.",100,null],[10,"as_ptr","","Returns a raw pointer to the wrapped value.",100,null],[8,"OpenSslTypeRef","","A trait implemented by types which reference borrowed foreign types.",null,null],[16,"CType","","The raw C type.",101,null],[11,"from_ptr","","Constructs a shared instance of this type from its raw type.",101,null],[11,"from_ptr_mut","","Constructs a mutable reference of this type from its raw type.",101,null],[11,"as_ptr","","Returns a raw pointer to the wrapped value.",101,null],[0,"version","openssl","",null,null],[5,"number","openssl::version","OPENSSL_VERSION_NUMBER is a numeric release version identifier:",null,{"inputs":[],"output":{"name":"i64"}}],[5,"version","","The text variant of the version number and the release date. For example, \"OpenSSL 0.9.5a 1 Apr 2000\".",null,{"inputs":[],"output":{"name":"str"}}],[5,"c_flags","","The compiler flags set for the compilation process in the form \"compiler: ...\" if available or \"compiler: information not available\" otherwise.",null,{"inputs":[],"output":{"name":"str"}}],[5,"built_on","","The date of the build process in the form \"built on: ...\" if available or \"built on: date not available\" otherwise.",null,{"inputs":[],"output":{"name":"str"}}],[5,"platform","","The \"Configure\" target of the library build in the form \"platform: ...\" if available or \"platform: information not available\" otherwise.",null,{"inputs":[],"output":{"name":"str"}}],[5,"dir","","The \"OPENSSLDIR\" setting of the library build in the form \"OPENSSLDIR: \"...\"\" if available or \"OPENSSLDIR: N/A\" otherwise.",null,{"inputs":[],"output":{"name":"str"}}],[0,"x509","openssl","",null,null],[3,"X509FileType","openssl::x509","",null,null],[3,"X509StoreContext","","",null,null],[3,"X509StoreContextRef","","",null,null],[3,"X509Generator","","",null,null],[3,"X509Builder","","A builder type which can create `X509` objects.",null,null],[3,"X509","","",null,null],[3,"X509Ref","","",null,null],[3,"X509v3Context","","A context object required to construct certain X509 extension values.",null,null],[3,"X509Extension","","",null,null],[3,"X509ExtensionRef","","",null,null],[3,"X509NameBuilder","","",null,null],[3,"X509Name","","",null,null],[3,"X509NameRef","","",null,null],[3,"X509NameEntries","","",null,null],[3,"X509NameEntry","","",null,null],[3,"X509NameEntryRef","","",null,null],[3,"X509ReqBuilder","","",null,null],[3,"X509Req","","",null,null],[3,"X509ReqRef","","",null,null],[3,"X509VerifyError","","",null,null],[3,"GeneralName","","",null,null],[3,"GeneralNameRef","","",null,null],[3,"X509Algorithm","","",null,null],[3,"X509AlgorithmRef","","",null,null],[0,"extension","","",null,null],[3,"BasicConstraints","openssl::x509::extension","",null,null],[3,"KeyUsage","","",null,null],[3,"ExtendedKeyUsage","","",null,null],[3,"SubjectKeyIdentifier","","",null,null],[3,"AuthorityKeyIdentifier","","",null,null],[3,"SubjectAlternativeName","","",null,null],[4,"ExtensionType","","Type-only version of the `Extension` enum.",null,null],[13,"KeyUsage","","",102,null],[13,"ExtKeyUsage","","",102,null],[13,"SubjectAltName","","",102,null],[13,"IssuerAltName","","",102,null],[13,"OtherNid","","",102,null],[13,"OtherStr","","",102,null],[4,"Extension","","A X.509 v3 certificate extension.",null,null],[13,"KeyUsage","","The purposes of the key contained in the certificate",103,null],[13,"ExtKeyUsage","","The extended purposes of the key contained in the certificate",103,null],[13,"SubjectAltName","","Subject Alternative Names",103,null],[13,"IssuerAltName","","Issuer Alternative Names",103,null],[13,"OtherNid","","Arbitrary extensions by NID. See `man x509v3_config` for value syntax.",103,null],[13,"OtherStr","","Arbitrary extensions by OID string. See `man ASN1_generate_nconf` for value syntax.",103,null],[4,"KeyUsageOption","","",null,null],[13,"DigitalSignature","","",104,null],[13,"NonRepudiation","","",104,null],[13,"KeyEncipherment","","",104,null],[13,"DataEncipherment","","",104,null],[13,"KeyAgreement","","",104,null],[13,"KeyCertSign","","",104,null],[13,"CRLSign","","",104,null],[13,"EncipherOnly","","",104,null],[13,"DecipherOnly","","",104,null],[4,"ExtKeyUsageOption","","",null,null],[13,"ServerAuth","","",105,null],[13,"ClientAuth","","",105,null],[13,"CodeSigning","","",105,null],[13,"EmailProtection","","",105,null],[13,"TimeStamping","","",105,null],[13,"MsCodeInd","","",105,null],[13,"MsCodeCom","","",105,null],[13,"MsCtlSign","","",105,null],[13,"MsSgc","","",105,null],[13,"MsEfs","","",105,null],[13,"NsSgc","","",105,null],[13,"Other","","An arbitrary key usage by OID.",105,null],[4,"AltNameOption","","",null,null],[13,"Other","","The value is specified as OID;content. See `man ASN1_generate_nconf` for more information on the content syntax.",106,null],[13,"Email","","",106,null],[13,"DNS","","",106,null],[13,"Directory","","",106,null],[13,"URI","","",106,null],[13,"IPAddress","","",106,null],[13,"RegisteredID","","",106,null],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"extensiontype"}}],[11,"hash","","",102,null],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"extensiontype"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"extensiontype"}],"output":{"name":"bool"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"extension"}}],[11,"get_type","","",103,{"inputs":[{"name":"self"}],"output":{"name":"extensiontype"}}],[11,"get_nid","","",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_name","","",102,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_string","","",103,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"keyusageoption"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"extkeyusageoption"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"altnameoption"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",107,{"inputs":[],"output":{"name":"basicconstraints"}}],[11,"critical","","",107,{"inputs":[{"name":"self"}],"output":{"name":"basicconstraints"}}],[11,"ca","","",107,{"inputs":[{"name":"self"}],"output":{"name":"basicconstraints"}}],[11,"pathlen","","",107,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"basicconstraints"}}],[11,"build","","",107,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",108,{"inputs":[],"output":{"name":"keyusage"}}],[11,"critical","","",108,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"digital_signature","","",108,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"non_repudiation","","",108,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"key_encipherment","","",108,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"data_encipherment","","",108,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"key_agreement","","",108,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"key_cert_sign","","",108,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"crl_sign","","",108,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"encipher_only","","",108,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"decipher_only","","",108,{"inputs":[{"name":"self"}],"output":{"name":"keyusage"}}],[11,"build","","",108,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",109,{"inputs":[],"output":{"name":"extendedkeyusage"}}],[11,"critical","","",109,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"server_auth","","",109,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"client_auth","","",109,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"code_signing","","",109,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"time_stamping","","",109,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"ms_code_ind","","",109,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"ms_code_com","","",109,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"ms_ctl_sign","","",109,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"ms_sgc","","",109,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"ms_efs","","",109,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"ns_sgc","","",109,{"inputs":[{"name":"self"}],"output":{"name":"extendedkeyusage"}}],[11,"other","","",109,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"extendedkeyusage"}}],[11,"build","","",109,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","",110,{"inputs":[],"output":{"name":"subjectkeyidentifier"}}],[11,"critical","","",110,{"inputs":[{"name":"self"}],"output":{"name":"subjectkeyidentifier"}}],[11,"build","","",110,{"inputs":[{"name":"self"},{"name":"x509v3context"}],"output":{"name":"result"}}],[11,"new","","",111,{"inputs":[],"output":{"name":"authoritykeyidentifier"}}],[11,"critical","","",111,{"inputs":[{"name":"self"}],"output":{"name":"authoritykeyidentifier"}}],[11,"keyid","","",111,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"authoritykeyidentifier"}}],[11,"issuer","","",111,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"authoritykeyidentifier"}}],[11,"build","","",111,{"inputs":[{"name":"self"},{"name":"x509v3context"}],"output":{"name":"result"}}],[11,"new","","",112,{"inputs":[],"output":{"name":"subjectalternativename"}}],[11,"critical","","",112,{"inputs":[{"name":"self"}],"output":{"name":"subjectalternativename"}}],[11,"email","","",112,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"subjectalternativename"}}],[11,"uri","","",112,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"subjectalternativename"}}],[11,"dns","","",112,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"subjectalternativename"}}],[11,"rid","","",112,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"subjectalternativename"}}],[11,"ip","","",112,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"subjectalternativename"}}],[11,"dir_name","","",112,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"subjectalternativename"}}],[11,"other_name","","",112,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"subjectalternativename"}}],[11,"build","","",112,{"inputs":[{"name":"self"},{"name":"x509v3context"}],"output":{"name":"result"}}],[0,"store","openssl::x509","",null,null],[3,"X509StoreBuilder","openssl::x509::store","",null,null],[3,"X509StoreBuilderRef","","",null,null],[3,"X509Store","","",null,null],[3,"X509StoreRef","","",null,null],[11,"from_ptr","","",113,null],[11,"as_ptr","","",113,null],[11,"drop","","",113,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",113,{"inputs":[{"name":"self"}],"output":{"name":"x509storebuilderref"}}],[11,"deref_mut","","",113,{"inputs":[{"name":"self"}],"output":{"name":"x509storebuilderref"}}],[11,"new","","Returns a builder for a certificate store.",113,{"inputs":[],"output":{"name":"result"}}],[11,"build","","Constructs the `X509Store`.",113,{"inputs":[{"name":"self"}],"output":{"name":"x509store"}}],[11,"add_cert","","Adds a certificate to the certificate store.",114,{"inputs":[{"name":"self"},{"name":"x509"}],"output":{"name":"result"}}],[11,"set_default_paths","","Load certificates from their default locations.",114,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_ptr","","",115,null],[11,"as_ptr","","",115,null],[11,"drop","","",115,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",115,{"inputs":[{"name":"self"}],"output":{"name":"x509storeref"}}],[11,"deref_mut","","",115,{"inputs":[{"name":"self"}],"output":{"name":"x509storeref"}}],[17,"X509_FILETYPE_PEM","openssl::x509","",null,null],[17,"X509_FILETYPE_ASN1","","",null,null],[17,"X509_FILETYPE_DEFAULT","","",null,null],[11,"as_raw","","",116,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_ptr","","",117,null],[11,"as_ptr","","",117,null],[11,"drop","","",117,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",117,{"inputs":[{"name":"self"}],"output":{"name":"x509storecontextref"}}],[11,"deref_mut","","",117,{"inputs":[{"name":"self"}],"output":{"name":"x509storecontextref"}}],[11,"error","","",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"current_cert","","",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"error_depth","","",118,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"chain","","",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a new generator with the following defaults:",119,{"inputs":[],"output":{"name":"x509generator"}}],[11,"set_valid_period","","Sets certificate validity period in days since today",119,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"x509generator"}}],[11,"add_name","","Add attribute to the name of the certificate",119,{"inputs":[{"name":"self"},{"name":"string"},{"name":"string"}],"output":{"name":"x509generator"}}],[11,"add_names","","Add multiple attributes to the name of the certificate",119,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"x509generator"}}],[11,"add_extension","","Add an extension to a certificate",119,{"inputs":[{"name":"self"},{"name":"extension"}],"output":{"name":"x509generator"}}],[11,"add_extensions","","Add multiple extensions to a certificate",119,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"x509generator"}}],[11,"set_sign_hash","","",119,{"inputs":[{"name":"self"},{"name":"messagedigest"}],"output":{"name":"x509generator"}}],[11,"sign","","Sets the certificate public-key, then self-sign and return it",119,{"inputs":[{"name":"self"},{"name":"pkeyref"}],"output":{"name":"result"}}],[11,"request","","Obtain a certificate signing request (CSR)",119,{"inputs":[{"name":"self"},{"name":"pkeyref"}],"output":{"name":"result"}}],[11,"new","","Creates a new builder.",120,{"inputs":[],"output":{"name":"result"}}],[11,"set_not_after","","Sets the notAfter constraint on the certificate.",120,{"inputs":[{"name":"self"},{"name":"asn1timeref"}],"output":{"name":"result"}}],[11,"set_not_before","","Sets the notBefore constraint on the certificate.",120,{"inputs":[{"name":"self"},{"name":"asn1timeref"}],"output":{"name":"result"}}],[11,"set_version","","Sets the version of the certificate.",120,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_serial_number","","Sets the serial number of the certificate.",120,{"inputs":[{"name":"self"},{"name":"asn1integerref"}],"output":{"name":"result"}}],[11,"set_issuer_name","","Sets the issuer name of the certificate.",120,{"inputs":[{"name":"self"},{"name":"x509nameref"}],"output":{"name":"result"}}],[11,"set_subject_name","","Sets the subject name of the certificate.",120,{"inputs":[{"name":"self"},{"name":"x509nameref"}],"output":{"name":"result"}}],[11,"set_pubkey","","Sets the public key associated with the certificate.",120,{"inputs":[{"name":"self"},{"name":"pkeyref"}],"output":{"name":"result"}}],[11,"x509v3_context","","Returns a context object which is needed to create certain X509 extension values.",120,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"}],"output":{"name":"x509v3context"}}],[11,"append_extension","","Adds an X509 extension value to the certificate.",120,{"inputs":[{"name":"self"},{"name":"x509extension"}],"output":{"name":"result"}}],[11,"sign","","Signs the certificate with a private key.",120,{"inputs":[{"name":"self"},{"name":"pkeyref"},{"name":"messagedigest"}],"output":{"name":"result"}}],[11,"build","","Consumes the builder, returning the certificate.",120,{"inputs":[{"name":"self"}],"output":{"name":"x509"}}],[11,"from_ptr","","",121,null],[11,"as_ptr","","",121,null],[11,"drop","","",121,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",121,{"inputs":[{"name":"self"}],"output":{"name":"x509ref"}}],[11,"deref_mut","","",121,{"inputs":[{"name":"self"}],"output":{"name":"x509ref"}}],[11,"subject_name","","",122,{"inputs":[{"name":"self"}],"output":{"name":"x509nameref"}}],[11,"subject_alt_names","","Returns this certificate's SAN entries, if they exist.",122,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"public_key","","",122,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fingerprint","","Returns certificate fingerprint calculated using provided hash",122,{"inputs":[{"name":"self"},{"name":"messagedigest"}],"output":{"name":"result"}}],[11,"not_after","","Returns the certificate's Not After validity period.",122,{"inputs":[{"name":"self"}],"output":{"name":"asn1timeref"}}],[11,"not_before","","Returns the certificate's Not Before validity period.",122,{"inputs":[{"name":"self"}],"output":{"name":"asn1timeref"}}],[11,"signature","","Returns the certificate's signature",122,{"inputs":[{"name":"self"}],"output":{"name":"asn1bitstringref"}}],[11,"signature_algorithm","","Returns the certificate's signature algorithm.",122,{"inputs":[{"name":"self"}],"output":{"name":"x509algorithmref"}}],[11,"ocsp_responders","","Returns the list of OCSP responder URLs specified in the certificate's Authority Information Access field.",122,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"issued","","Checks that this certificate issued `subject`.",122,{"inputs":[{"name":"self"},{"name":"x509ref"}],"output":{"name":"result"}}],[11,"to_pem","","Serializes this value to PEM.",122,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_der","","Serializes this value to DER.",122,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_owned","","",122,{"inputs":[{"name":"self"}],"output":{"name":"x509"}}],[11,"builder","","Returns a new builder.",121,{"inputs":[],"output":{"name":"result"}}],[11,"from_pem","","Deserializes a value from PEM-formatted data.",121,null],[11,"from_der","","Deserializes a value from DER-formatted data.",121,null],[11,"stack_from_pem","","Deserializes a list of PEM-formatted certificates.",121,null],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"x509"}}],[11,"as_ref","","",121,{"inputs":[{"name":"self"}],"output":{"name":"x509ref"}}],[11,"as_ref","","",122,{"inputs":[{"name":"self"}],"output":{"name":"x509ref"}}],[11,"borrow","","",121,{"inputs":[{"name":"self"}],"output":{"name":"x509ref"}}],[11,"as_ptr","","",123,null],[11,"from_ptr","","",124,null],[11,"as_ptr","","",124,null],[11,"drop","","",124,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",124,{"inputs":[{"name":"self"}],"output":{"name":"x509extensionref"}}],[11,"deref_mut","","",124,{"inputs":[{"name":"self"}],"output":{"name":"x509extensionref"}}],[11,"new","","Constructs an X509 extension value. See `man x509v3_config` for information on supported names and their value formats.",124,{"inputs":[{"name":"option"},{"name":"option"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"new_nid","","Constructs an X509 extension value. See `man x509v3_config` for information on supported extensions and their value formats.",124,{"inputs":[{"name":"option"},{"name":"option"},{"name":"nid"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","",125,{"inputs":[],"output":{"name":"result"}}],[11,"append_entry_by_text","","",125,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"append_entry_by_nid","","",125,{"inputs":[{"name":"self"},{"name":"nid"},{"name":"str"}],"output":{"name":"result"}}],[11,"build","","",125,{"inputs":[{"name":"self"}],"output":{"name":"x509name"}}],[11,"from_ptr","","",126,null],[11,"as_ptr","","",126,null],[11,"drop","","",126,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",126,{"inputs":[{"name":"self"}],"output":{"name":"x509nameref"}}],[11,"deref_mut","","",126,{"inputs":[{"name":"self"}],"output":{"name":"x509nameref"}}],[11,"builder","","Returns a new builder.",126,{"inputs":[],"output":{"name":"result"}}],[11,"load_client_ca_file","","Loads subject names from a file containing PEM-formatted certificates.",126,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"entries_by_nid","","",127,{"inputs":[{"name":"self"},{"name":"nid"}],"output":{"name":"x509nameentries"}}],[11,"next","","",128,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_ptr","","",129,null],[11,"as_ptr","","",129,null],[11,"drop","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",129,{"inputs":[{"name":"self"}],"output":{"name":"x509nameentryref"}}],[11,"deref_mut","","",129,{"inputs":[{"name":"self"}],"output":{"name":"x509nameentryref"}}],[11,"data","","",130,{"inputs":[{"name":"self"}],"output":{"name":"asn1stringref"}}],[11,"new","","",131,{"inputs":[],"output":{"name":"result"}}],[11,"set_version","","",131,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_subject_name","","",131,{"inputs":[{"name":"self"},{"name":"x509nameref"}],"output":{"name":"result"}}],[11,"set_pubkey","","",131,{"inputs":[{"name":"self"},{"name":"pkeyref"}],"output":{"name":"result"}}],[11,"x509v3_context","","",131,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"x509v3context"}}],[11,"add_extensions","","",131,{"inputs":[{"name":"self"},{"name":"stackref"}],"output":{"name":"result"}}],[11,"sign","","",131,{"inputs":[{"name":"self"},{"name":"pkeyref"},{"name":"messagedigest"}],"output":{"name":"result"}}],[11,"build","","",131,{"inputs":[{"name":"self"}],"output":{"name":"x509req"}}],[11,"from_ptr","","",132,null],[11,"as_ptr","","",132,null],[11,"drop","","",132,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",132,{"inputs":[{"name":"self"}],"output":{"name":"x509reqref"}}],[11,"deref_mut","","",132,{"inputs":[{"name":"self"}],"output":{"name":"x509reqref"}}],[11,"builder","","",132,{"inputs":[],"output":{"name":"result"}}],[11,"from_pem","","Reads CSR from PEM",132,null],[11,"from_der","","Deserializes a value from DER-formatted data.",132,null],[11,"to_pem","","Serializes this value to PEM.",133,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_der","","Serializes this value to DER.",133,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"version","","",133,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"subject_name","","",133,{"inputs":[{"name":"self"}],"output":{"name":"x509nameref"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",134,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_raw","","Creates an `X509VerifyError` from a raw error number.",134,{"inputs":[{"name":"c_long"}],"output":{"name":"option"}}],[11,"as_raw","","",134,{"inputs":[{"name":"self"}],"output":{"name":"c_long"}}],[11,"error_string","","",134,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_ptr","","",135,null],[11,"as_ptr","","",135,null],[11,"drop","","",135,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",135,{"inputs":[{"name":"self"}],"output":{"name":"generalnameref"}}],[11,"deref_mut","","",135,{"inputs":[{"name":"self"}],"output":{"name":"generalnameref"}}],[11,"dnsname","","Returns the contents of this `GeneralName` if it is a `dNSName`.",136,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ipaddress","","Returns the contents of this `GeneralName` if it is an `iPAddress`.",136,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_ptr","","",137,null],[11,"as_ptr","","",137,null],[11,"drop","","",137,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",137,{"inputs":[{"name":"self"}],"output":{"name":"x509algorithmref"}}],[11,"deref_mut","","",137,{"inputs":[{"name":"self"}],"output":{"name":"x509algorithmref"}}],[11,"object","","Returns the ASN.1 OID of this algorithm.",138,{"inputs":[{"name":"self"}],"output":{"name":"asn1objectref"}}]],"paths":[[3,"KeyError"],[3,"AesKey"],[3,"Asn1GeneralizedTime"],[3,"Asn1GeneralizedTimeRef"],[3,"Asn1Time"],[3,"Asn1TimeRef"],[3,"Asn1String"],[3,"Asn1StringRef"],[3,"Asn1Integer"],[3,"Asn1IntegerRef"],[3,"Asn1BitString"],[3,"Asn1BitStringRef"],[3,"Asn1Object"],[3,"Asn1ObjectRef"],[3,"BigNumContext"],[3,"BigNumRef"],[3,"BigNum"],[3,"ConfMethod"],[3,"Conf"],[3,"Dh"],[3,"DhRef"],[3,"Dsa"],[3,"DsaRef"],[3,"PointConversionForm"],[3,"Asn1Flag"],[3,"EcGroup"],[3,"EcGroupRef"],[3,"EcPoint"],[3,"EcPointRef"],[3,"EcKey"],[3,"EcKeyRef"],[3,"EcKeyBuilder"],[3,"EcKeyBuilderRef"],[3,"ErrorStack"],[3,"Error"],[3,"MessageDigest"],[3,"Hasher"],[3,"Nid"],[3,"Status"],[3,"Flag"],[3,"OcspResponseStatus"],[3,"OcspCertStatus"],[3,"OcspRevokedStatus"],[3,"OcspBasicResponse"],[3,"OcspBasicResponseRef"],[3,"OcspCertId"],[3,"OcspResponse"],[3,"OcspResponseRef"],[3,"OcspRequest"],[3,"OcspRequestRef"],[3,"OcspOneReq"],[3,"ParsedPkcs12"],[3,"Pkcs12"],[3,"Pkcs12Ref"],[3,"Pkcs12Builder"],[3,"KeyIvPair"],[3,"PKey"],[3,"PKeyRef"],[3,"PKeyCtxRef"],[3,"Padding"],[3,"Rsa"],[3,"RsaRef"],[3,"Signer"],[3,"Verifier"],[3,"CipherBits"],[4,"Error"],[4,"HandshakeError"],[4,"SniError"],[4,"ShutdownResult"],[3,"SslConnectorBuilder"],[3,"SslConnector"],[3,"SslAcceptorBuilder"],[3,"SslAcceptor"],[3,"SslOption"],[3,"SslMode"],[3,"SslMethod"],[3,"SslVerifyMode"],[3,"StatusType"],[3,"SslContextBuilder"],[3,"SslContext"],[3,"SslContextRef"],[3,"SslCipher"],[3,"SslCipherRef"],[3,"SslSession"],[3,"SslSessionRef"],[3,"Ssl"],[3,"SslRef"],[3,"MidHandshakeSslStream"],[3,"SslStream"],[8,"Stackable"],[3,"Stack"],[3,"IntoIter"],[3,"StackRef"],[3,"Iter"],[3,"IterMut"],[3,"OpensslString"],[3,"OpensslStringRef"],[4,"Mode"],[3,"Cipher"],[3,"Crypter"],[8,"OpenSslType"],[8,"OpenSslTypeRef"],[4,"ExtensionType"],[4,"Extension"],[4,"KeyUsageOption"],[4,"ExtKeyUsageOption"],[4,"AltNameOption"],[3,"BasicConstraints"],[3,"KeyUsage"],[3,"ExtendedKeyUsage"],[3,"SubjectKeyIdentifier"],[3,"AuthorityKeyIdentifier"],[3,"SubjectAlternativeName"],[3,"X509StoreBuilder"],[3,"X509StoreBuilderRef"],[3,"X509Store"],[3,"X509FileType"],[3,"X509StoreContext"],[3,"X509StoreContextRef"],[3,"X509Generator"],[3,"X509Builder"],[3,"X509"],[3,"X509Ref"],[3,"X509v3Context"],[3,"X509Extension"],[3,"X509NameBuilder"],[3,"X509Name"],[3,"X509NameRef"],[3,"X509NameEntries"],[3,"X509NameEntry"],[3,"X509NameEntryRef"],[3,"X509ReqBuilder"],[3,"X509Req"],[3,"X509ReqRef"],[3,"X509VerifyError"],[3,"GeneralName"],[3,"GeneralNameRef"],[3,"X509Algorithm"],[3,"X509AlgorithmRef"]]};
searchIndex["openssl_sys"] = {"doc":"","items":[[3,"stack_st_ASN1_OBJECT","openssl_sys","",null,null],[12,"stack","","",0,null],[3,"stack_st_X509","","",null,null],[12,"stack","","",1,null],[3,"stack_st_X509_NAME","","",null,null],[12,"stack","","",2,null],[3,"stack_st_X509_ATTRIBUTE","","",null,null],[12,"stack","","",3,null],[3,"stack_st_X509_EXTENSION","","",null,null],[12,"stack","","",4,null],[3,"stack_st_GENERAL_NAME","","",null,null],[12,"stack","","",5,null],[3,"stack_st_void","","",null,null],[12,"stack","","",6,null],[3,"stack_st_SSL_CIPHER","","",null,null],[12,"stack","","",7,null],[3,"stack_st_OPENSSL_STRING","","",null,null],[12,"stack","","",8,null],[3,"_STACK","","",null,null],[12,"num","","",9,null],[12,"data","","",9,null],[12,"sorted","","",9,null],[12,"num_alloc","","",9,null],[12,"comp","","",9,null],[3,"BIO_METHOD","","",null,null],[12,"type_","","",10,null],[12,"name","","",10,null],[12,"bwrite","","",10,null],[12,"bread","","",10,null],[12,"bputs","","",10,null],[12,"bgets","","",10,null],[12,"ctrl","","",10,null],[12,"create","","",10,null],[12,"destroy","","",10,null],[12,"callback_ctrl","","",10,null],[3,"RSA","","",null,null],[12,"pad","","",11,null],[12,"version","","",11,null],[12,"meth","","",11,null],[12,"engine","","",11,null],[12,"n","","",11,null],[12,"e","","",11,null],[12,"d","","",11,null],[12,"p","","",11,null],[12,"q","","",11,null],[12,"dmp1","","",11,null],[12,"dmq1","","",11,null],[12,"iqmp","","",11,null],[12,"ex_data","","",11,null],[12,"references","","",11,null],[12,"flags","","",11,null],[12,"_method_mod_n","","",11,null],[12,"_method_mod_p","","",11,null],[12,"_method_mod_q","","",11,null],[12,"bignum_data","","",11,null],[12,"blinding","","",11,null],[12,"mt_blinding","","",11,null],[3,"DSA","","",null,null],[12,"pad","","",12,null],[12,"version","","",12,null],[12,"write_params","","",12,null],[12,"p","","",12,null],[12,"q","","",12,null],[12,"g","","",12,null],[12,"pub_key","","",12,null],[12,"priv_key","","",12,null],[12,"kinv","","",12,null],[12,"r","","",12,null],[12,"flags","","",12,null],[12,"method_mont_p","","",12,null],[12,"references","","",12,null],[12,"ex_data","","",12,null],[12,"meth","","",12,null],[12,"engine","","",12,null],[3,"EVP_PKEY","","",null,null],[12,"type_","","",13,null],[12,"save_type","","",13,null],[12,"references","","",13,null],[12,"ameth","","",13,null],[12,"engine","","",13,null],[12,"pkey","","",13,null],[12,"save_parameters","","",13,null],[12,"attributes","","",13,null],[3,"BIO","","",null,null],[12,"method","","",14,null],[12,"callback","","",14,null],[12,"cb_arg","","",14,null],[12,"init","","",14,null],[12,"shutdown","","",14,null],[12,"flags","","",14,null],[12,"retry_reason","","",14,null],[12,"num","","",14,null],[12,"ptr","","",14,null],[12,"next_bio","","",14,null],[12,"prev_bio","","",14,null],[12,"references","","",14,null],[12,"num_read","","",14,null],[12,"num_write","","",14,null],[12,"ex_data","","",14,null],[3,"CRYPTO_EX_DATA","","",null,null],[12,"sk","","",15,null],[12,"dummy","","",15,null],[3,"EVP_MD_CTX","","",null,null],[3,"EVP_CIPHER","","",null,null],[12,"nid","","",16,null],[12,"block_size","","",16,null],[12,"key_len","","",16,null],[12,"iv_len","","",16,null],[12,"flags","","",16,null],[12,"init","","",16,null],[12,"do_cipher","","",16,null],[12,"cleanup","","",16,null],[12,"ctx_size","","",16,null],[12,"set_asn1_parameters","","",16,null],[12,"get_asn1_parameters","","",16,null],[12,"ctrl","","",16,null],[12,"app_data","","",16,null],[3,"HMAC_CTX","","",null,null],[3,"BIGNUM","","",null,null],[12,"d","","",17,null],[12,"top","","",17,null],[12,"dmax","","",17,null],[12,"neg","","",17,null],[12,"flags","","",17,null],[3,"DH","","",null,null],[12,"pad","","",18,null],[12,"version","","",18,null],[12,"p","","",18,null],[12,"g","","",18,null],[12,"length","","",18,null],[12,"pub_key","","",18,null],[12,"priv_key","","",18,null],[12,"flags","","",18,null],[12,"method_mont_p","","",18,null],[12,"q","","",18,null],[12,"j","","",18,null],[12,"seed","","",18,null],[12,"seedlen","","",18,null],[12,"counter","","",18,null],[12,"references","","",18,null],[12,"ex_data","","",18,null],[12,"meth","","",18,null],[12,"engine","","",18,null],[3,"X509","","",null,null],[12,"cert_info","","",19,null],[12,"sig_alg","","",19,null],[12,"signature","","",19,null],[12,"valid","","",19,null],[12,"references","","",19,null],[12,"name","","",19,null],[12,"ex_data","","",19,null],[12,"ex_pathlen","","",19,null],[12,"ex_pcpathlen","","",19,null],[12,"ex_flags","","",19,null],[12,"ex_kusage","","",19,null],[12,"ex_xkusage","","",19,null],[12,"ex_nscert","","",19,null],[3,"X509_CINF","","",null,null],[12,"validity","","",20,null],[12,"extensions","","",20,null],[3,"X509_ALGOR","","",null,null],[12,"algorithm","","",21,null],[3,"ASN1_ENCODING","","",null,null],[12,"enc","","",22,null],[12,"len","","",22,null],[12,"modified","","",22,null],[3,"X509_VAL","","",null,null],[12,"notBefore","","",23,null],[12,"notAfter","","",23,null],[3,"X509_REQ_INFO","","",null,null],[12,"enc","","",24,null],[12,"version","","",24,null],[12,"subject","","",24,null],[12,"attributes","","",24,null],[3,"X509_REQ","","",null,null],[12,"req_info","","",25,null],[3,"SSL","","",null,null],[12,"server","","",26,null],[3,"SSL_CTX","","",null,null],[12,"references","","",27,null],[3,"SSL_SESSION","","",null,null],[12,"master_key_length","","",28,null],[12,"master_key","","",28,null],[12,"references","","",28,null],[3,"SRP_CTX","","",null,null],[3,"AES_KEY","","",null,null],[3,"GENERAL_NAME","","",null,null],[12,"type_","","",29,null],[12,"d","","",29,null],[3,"X509V3_CTX","","",null,null],[4,"PKCS12","","",null,null],[4,"ASN1_INTEGER","","",null,null],[4,"ASN1_GENERALIZEDTIME","","",null,null],[4,"ASN1_STRING","","",null,null],[4,"ASN1_BIT_STRING","","",null,null],[4,"ASN1_TIME","","",null,null],[4,"ASN1_TYPE","","",null,null],[4,"ASN1_OBJECT","","",null,null],[4,"BN_CTX","","",null,null],[4,"BN_GENCB","","",null,null],[4,"CONF","","",null,null],[4,"CONF_METHOD","","",null,null],[4,"COMP_METHOD","","",null,null],[4,"EC_KEY","","",null,null],[4,"EC_GROUP","","",null,null],[4,"EC_METHOD","","",null,null],[4,"EC_POINT","","",null,null],[4,"ENGINE","","",null,null],[4,"EVP_CIPHER_CTX","","",null,null],[4,"EVP_MD","","",null,null],[4,"EVP_PKEY_CTX","","",null,null],[4,"OCSP_BASICRESP","","",null,null],[4,"OCSP_CERTID","","",null,null],[4,"OCSP_RESPONSE","","",null,null],[4,"OCSP_REQUEST","","",null,null],[4,"OCSP_ONEREQ","","",null,null],[4,"SSL_CIPHER","","",null,null],[4,"SSL_METHOD","","",null,null],[4,"X509_CRL","","",null,null],[4,"X509_EXTENSION","","",null,null],[4,"X509_NAME","","",null,null],[4,"X509_NAME_ENTRY","","",null,null],[4,"X509_STORE","","",null,null],[4,"X509_STORE_CTX","","",null,null],[4,"bio_st","","",null,null],[4,"DH_METHOD","","",null,null],[4,"RSA_METHOD","","",null,null],[4,"BN_MONT_CTX","","",null,null],[4,"BN_BLINDING","","",null,null],[4,"DSA_METHOD","","",null,null],[4,"EVP_PKEY_ASN1_METHOD","","",null,null],[4,"point_conversion_form_t","","",null,null],[13,"POINT_CONVERSION_COMPRESSED","","",30,null],[13,"POINT_CONVERSION_UNCOMPRESSED","","",30,null],[13,"POINT_CONVERSION_HYBRID","","",30,null],[5,"init","","",null,{"inputs":[],"output":null}],[5,"SSL_session_reused","","",null,null],[5,"BIO_get_mem_data","","",null,null],[5,"BIO_clear_retry_flags","","",null,null],[5,"BIO_set_retry_read","","",null,null],[5,"BIO_set_retry_write","","",null,null],[5,"EVP_PKEY_CTX_set_rsa_padding","","",null,null],[5,"EVP_PKEY_CTX_get_rsa_padding","","",null,null],[5,"SSL_CTX_set_mode","","",null,null],[5,"SSL_CTX_set_read_ahead","","",null,null],[5,"SSL_CTX_set_tmp_dh","","",null,null],[5,"SSL_CTX_set_tmp_ecdh","","",null,null],[5,"SSL_set_tmp_dh","","",null,null],[5,"SSL_set_tmp_ecdh","","",null,null],[5,"SSL_CTX_add_extra_chain_cert","","",null,null],[5,"SSL_CTX_set_tlsext_servername_callback","","",null,null],[5,"SSL_set_tlsext_host_name","","",null,null],[5,"SSL_set_tlsext_status_type","","",null,null],[5,"SSL_CTX_set_tlsext_status_cb","","",null,null],[5,"SSL_CTX_set_tlsext_status_arg","","",null,null],[5,"SSL_CTX_get_extra_chain_certs","","",null,null],[5,"SSL_get_tlsext_status_ocsp_resp","","",null,null],[5,"SSL_set_tlsext_status_ocsp_resp","","",null,null],[5,"ERR_GET_LIB","","",null,{"inputs":[{"name":"c_ulong"}],"output":{"name":"c_int"}}],[5,"ERR_GET_FUNC","","",null,{"inputs":[{"name":"c_ulong"}],"output":{"name":"c_int"}}],[5,"ERR_GET_REASON","","",null,{"inputs":[{"name":"c_ulong"}],"output":{"name":"c_int"}}],[5,"BIO_new","","",null,null],[5,"BIO_s_file","","",null,null],[5,"BIO_s_mem","","",null,null],[5,"get_rfc2409_prime_768","","",null,null],[5,"get_rfc2409_prime_1024","","",null,null],[5,"get_rfc3526_prime_1536","","",null,null],[5,"get_rfc3526_prime_2048","","",null,null],[5,"get_rfc3526_prime_3072","","",null,null],[5,"get_rfc3526_prime_4096","","",null,null],[5,"get_rfc3526_prime_6144","","",null,null],[5,"get_rfc3526_prime_8192","","",null,null],[5,"CRYPTO_malloc","","",null,null],[5,"CRYPTO_free","","",null,null],[5,"CRYPTO_num_locks","","",null,null],[5,"CRYPTO_set_locking_callback","","",null,null],[5,"CRYPTO_set_id_callback","","",null,null],[5,"ERR_load_crypto_strings","","",null,null],[5,"RSA_generate_key","","",null,null],[5,"OCSP_cert_to_id","","",null,null],[5,"PKCS12_create","","",null,null],[5,"SSL_library_init","","",null,null],[5,"SSL_load_error_strings","","",null,null],[5,"OPENSSL_add_all_algorithms_noconf","","",null,null],[5,"HMAC_CTX_init","","",null,null],[5,"HMAC_CTX_cleanup","","",null,null],[5,"SSLv3_method","","",null,null],[5,"TLSv1_method","","",null,null],[5,"SSLv23_method","","",null,null],[5,"TLSv1_1_method","","",null,null],[5,"TLSv1_2_method","","",null,null],[5,"DTLSv1_method","","",null,null],[5,"SSL_get_ex_new_index","","",null,null],[5,"SSL_set_tmp_ecdh_callback","","",null,null],[5,"SSL_CIPHER_get_version","","",null,null],[5,"SSL_CTX_get_ex_new_index","","",null,null],[5,"SSL_CTX_set_tmp_ecdh_callback","","",null,null],[5,"X509_get_subject_name","","",null,null],[5,"X509_set_notAfter","","",null,null],[5,"X509_set_notBefore","","",null,null],[5,"X509_get_ext_d2i","","",null,null],[5,"X509_NAME_add_entry_by_NID","","",null,null],[5,"X509_NAME_get_entry","","",null,null],[5,"X509_NAME_ENTRY_get_data","","",null,null],[5,"X509_STORE_CTX_get_chain","","",null,null],[5,"X509V3_EXT_nconf_nid","","",null,null],[5,"X509V3_EXT_nconf","","",null,null],[5,"ASN1_STRING_to_UTF8","","",null,null],[5,"ASN1_STRING_data","","",null,null],[5,"CRYPTO_add_lock","","",null,null],[5,"EVP_MD_CTX_create","","",null,null],[5,"EVP_MD_CTX_destroy","","",null,null],[5,"EVP_PKEY_bits","","",null,null],[5,"sk_new_null","","",null,null],[5,"sk_num","","",null,null],[5,"sk_value","","",null,null],[5,"sk_free","","",null,null],[5,"sk_push","","",null,null],[5,"sk_pop_free","","",null,null],[5,"sk_pop","","",null,null],[5,"SSLeay","","",null,null],[5,"SSLeay_version","","",null,null],[5,"AES_set_encrypt_key","","",null,null],[5,"AES_set_decrypt_key","","",null,null],[5,"AES_ige_encrypt","","",null,null],[5,"ASN1_INTEGER_get","","",null,null],[5,"ASN1_INTEGER_set","","",null,null],[5,"ASN1_GENERALIZEDTIME_free","","",null,null],[5,"ASN1_GENERALIZEDTIME_print","","",null,null],[5,"ASN1_STRING_type_new","","",null,null],[5,"ASN1_TIME_free","","",null,null],[5,"ASN1_TIME_print","","",null,null],[5,"ASN1_BIT_STRING_free","","",null,null],[5,"ASN1_OBJECT_free","","",null,null],[5,"BIO_ctrl","","",null,null],[5,"BIO_free_all","","",null,null],[5,"BIO_new_fp","","",null,null],[5,"BIO_new_socket","","",null,null],[5,"BIO_read","","",null,null],[5,"BIO_write","","",null,null],[5,"BIO_new_mem_buf","","",null,null],[5,"BIO_set_flags","","",null,null],[5,"BIO_clear_flags","","",null,null],[5,"BN_CTX_new","","",null,null],[5,"BN_CTX_free","","",null,null],[5,"BN_new","","",null,null],[5,"BN_dup","","",null,null],[5,"BN_clear","","",null,null],[5,"BN_free","","",null,null],[5,"BN_clear_free","","",null,null],[5,"BN_num_bits","","",null,null],[5,"BN_set_negative","","",null,null],[5,"BN_set_word","","",null,null],[5,"BN_add","","",null,null],[5,"BN_div","","",null,null],[5,"BN_exp","","",null,null],[5,"BN_gcd","","",null,null],[5,"BN_mod_add","","",null,null],[5,"BN_mod_exp","","",null,null],[5,"BN_mod_inverse","","",null,null],[5,"BN_mod_mul","","",null,null],[5,"BN_mod_sqr","","",null,null],[5,"BN_mod_sub","","",null,null],[5,"BN_mul","","",null,null],[5,"BN_nnmod","","",null,null],[5,"BN_add_word","","",null,null],[5,"BN_sub_word","","",null,null],[5,"BN_mul_word","","",null,null],[5,"BN_div_word","","",null,null],[5,"BN_mod_word","","",null,null],[5,"BN_sqr","","",null,null],[5,"BN_sub","","",null,null],[5,"BN_clear_bit","","",null,null],[5,"BN_is_bit_set","","",null,null],[5,"BN_lshift","","",null,null],[5,"BN_lshift1","","",null,null],[5,"BN_mask_bits","","",null,null],[5,"BN_rshift","","",null,null],[5,"BN_set_bit","","",null,null],[5,"BN_rshift1","","",null,null],[5,"BN_cmp","","",null,null],[5,"BN_ucmp","","",null,null],[5,"BN_generate_prime_ex","","",null,null],[5,"BN_is_prime_ex","","",null,null],[5,"BN_is_prime_fasttest_ex","","",null,null],[5,"BN_rand","","",null,null],[5,"BN_pseudo_rand","","",null,null],[5,"BN_rand_range","","",null,null],[5,"BN_pseudo_rand_range","","",null,null],[5,"BN_bin2bn","","",null,null],[5,"BN_bn2bin","","",null,null],[5,"BN_dec2bn","","",null,null],[5,"BN_bn2dec","","",null,null],[5,"BN_hex2bn","","",null,null],[5,"BN_bn2hex","","",null,null],[5,"BN_to_ASN1_INTEGER","","",null,null],[5,"NCONF_default","","",null,null],[5,"NCONF_new","","",null,null],[5,"NCONF_free","","",null,null],[5,"CRYPTO_memcmp","","",null,null],[5,"DH_new","","",null,null],[5,"DH_free","","",null,null],[5,"EC_KEY_new","","",null,null],[5,"EC_KEY_new_by_curve_name","","",null,null],[5,"EC_KEY_set_group","","",null,null],[5,"EC_KEY_get0_group","","",null,null],[5,"EC_KEY_set_public_key","","",null,null],[5,"EC_KEY_get0_public_key","","",null,null],[5,"EC_KEY_set_private_key","","",null,null],[5,"EC_KEY_get0_private_key","","",null,null],[5,"EC_KEY_generate_key","","",null,null],[5,"EC_KEY_check_key","","",null,null],[5,"EC_KEY_free","","",null,null],[5,"EC_GF2m_simple_method","","",null,null],[5,"EC_GROUP_new","","",null,null],[5,"EC_GROUP_new_curve_GFp","","",null,null],[5,"EC_GROUP_new_curve_GF2m","","",null,null],[5,"EC_GROUP_new_by_curve_name","","",null,null],[5,"EC_GROUP_get_curve_GFp","","",null,null],[5,"EC_GROUP_get_curve_GF2m","","",null,null],[5,"EC_GROUP_get_degree","","",null,null],[5,"EC_GROUP_get_order","","",null,null],[5,"EC_GROUP_set_asn1_flag","","",null,null],[5,"EC_GROUP_free","","",null,null],[5,"EC_POINT_new","","",null,null],[5,"EC_POINT_add","","",null,null],[5,"EC_POINT_mul","","",null,null],[5,"EC_POINT_invert","","",null,null],[5,"EC_POINT_point2oct","","",null,null],[5,"EC_POINT_oct2point","","",null,null],[5,"EC_POINT_cmp","","",null,null],[5,"EC_POINT_free","","",null,null],[5,"ERR_peek_last_error","","",null,null],[5,"ERR_get_error","","",null,null],[5,"ERR_get_error_line_data","","",null,null],[5,"ERR_lib_error_string","","",null,null],[5,"ERR_func_error_string","","",null,null],[5,"ERR_reason_error_string","","",null,null],[5,"ERR_clear_error","","",null,null],[5,"EVP_md5","","",null,null],[5,"EVP_ripemd160","","",null,null],[5,"EVP_sha1","","",null,null],[5,"EVP_sha224","","",null,null],[5,"EVP_sha256","","",null,null],[5,"EVP_sha384","","",null,null],[5,"EVP_sha512","","",null,null],[5,"EVP_aes_128_cbc","","",null,null],[5,"EVP_aes_128_ecb","","",null,null],[5,"EVP_aes_128_xts","","",null,null],[5,"EVP_aes_128_ctr","","",null,null],[5,"EVP_aes_128_gcm","","",null,null],[5,"EVP_aes_128_cfb1","","",null,null],[5,"EVP_aes_128_cfb128","","",null,null],[5,"EVP_aes_128_cfb8","","",null,null],[5,"EVP_aes_256_cbc","","",null,null],[5,"EVP_aes_256_ecb","","",null,null],[5,"EVP_aes_256_xts","","",null,null],[5,"EVP_aes_256_ctr","","",null,null],[5,"EVP_aes_256_gcm","","",null,null],[5,"EVP_aes_256_cfb1","","",null,null],[5,"EVP_aes_256_cfb128","","",null,null],[5,"EVP_aes_256_cfb8","","",null,null],[5,"EVP_bf_cbc","","",null,null],[5,"EVP_bf_ecb","","",null,null],[5,"EVP_bf_cfb64","","",null,null],[5,"EVP_bf_ofb","","",null,null],[5,"EVP_rc4","","",null,null],[5,"EVP_des_cbc","","",null,null],[5,"EVP_des_ecb","","",null,null],[5,"EVP_BytesToKey","","",null,null],[5,"EVP_CIPHER_CTX_new","","",null,null],[5,"EVP_CIPHER_CTX_set_padding","","",null,null],[5,"EVP_CIPHER_CTX_set_key_length","","",null,null],[5,"EVP_CIPHER_CTX_ctrl","","",null,null],[5,"EVP_CIPHER_CTX_free","","",null,null],[5,"EVP_CipherInit","","",null,null],[5,"EVP_CipherInit_ex","","",null,null],[5,"EVP_CipherUpdate","","",null,null],[5,"EVP_CipherFinal","","",null,null],[5,"EVP_DigestInit","","",null,null],[5,"EVP_DigestInit_ex","","",null,null],[5,"EVP_DigestUpdate","","",null,null],[5,"EVP_DigestFinal","","",null,null],[5,"EVP_DigestFinal_ex","","",null,null],[5,"EVP_DigestSignInit","","",null,null],[5,"EVP_DigestSignFinal","","",null,null],[5,"EVP_DigestVerifyInit","","",null,null],[5,"EVP_DigestVerifyFinal","","",null,null],[5,"EVP_MD_CTX_copy_ex","","",null,null],[5,"EVP_PKEY_new","","",null,null],[5,"EVP_PKEY_free","","",null,null],[5,"EVP_PKEY_assign","","",null,null],[5,"EVP_PKEY_copy_parameters","","",null,null],[5,"EVP_PKEY_get1_RSA","","",null,null],[5,"EVP_PKEY_set1_RSA","","",null,null],[5,"EVP_PKEY_get1_DSA","","",null,null],[5,"EVP_PKEY_get1_DH","","",null,null],[5,"EVP_PKEY_get1_EC_KEY","","",null,null],[5,"EVP_PKEY_cmp","","",null,null],[5,"EVP_PKEY_new_mac_key","","",null,null],[5,"d2i_PKCS8PrivateKey_bio","","",null,null],[5,"EVP_PKEY_CTX_ctrl","","",null,null],[5,"HMAC_CTX_copy","","",null,null],[5,"OBJ_obj2nid","","",null,null],[5,"OBJ_obj2txt","","",null,null],[5,"OCSP_BASICRESP_new","","",null,null],[5,"OCSP_BASICRESP_free","","",null,null],[5,"OCSP_basic_verify","","",null,null],[5,"OCSP_resp_find_status","","",null,null],[5,"OCSP_check_validity","","",null,null],[5,"OCSP_CERTID_free","","",null,null],[5,"OCSP_RESPONSE_new","","",null,null],[5,"OCSP_RESPONSE_free","","",null,null],[5,"i2d_OCSP_RESPONSE","","",null,null],[5,"d2i_OCSP_RESPONSE","","",null,null],[5,"OCSP_response_create","","",null,null],[5,"OCSP_response_status","","",null,null],[5,"OCSP_response_get1_basic","","",null,null],[5,"OCSP_REQUEST_new","","",null,null],[5,"OCSP_REQUEST_free","","",null,null],[5,"i2d_OCSP_REQUEST","","",null,null],[5,"d2i_OCSP_REQUEST","","",null,null],[5,"OCSP_request_add0_id","","",null,null],[5,"OCSP_ONEREQ_free","","",null,null],[5,"PEM_read_bio_DHparams","","",null,null],[5,"PEM_read_bio_X509","","",null,null],[5,"PEM_read_bio_X509_REQ","","",null,null],[5,"PEM_read_bio_PrivateKey","","",null,null],[5,"PEM_read_bio_PUBKEY","","",null,null],[5,"PEM_read_bio_RSAPrivateKey","","",null,null],[5,"PEM_read_bio_RSA_PUBKEY","","",null,null],[5,"PEM_write_bio_DHparams","","",null,null],[5,"PEM_write_bio_PrivateKey","","",null,null],[5,"PEM_write_bio_PKCS8PrivateKey","","",null,null],[5,"PEM_write_bio_PUBKEY","","",null,null],[5,"PEM_write_bio_RSAPrivateKey","","",null,null],[5,"PEM_write_bio_RSAPublicKey","","",null,null],[5,"PEM_write_bio_RSA_PUBKEY","","",null,null],[5,"PEM_read_bio_DSAPrivateKey","","",null,null],[5,"PEM_read_bio_DSA_PUBKEY","","",null,null],[5,"PEM_write_bio_DSAPrivateKey","","",null,null],[5,"PEM_write_bio_DSA_PUBKEY","","",null,null],[5,"PEM_write_bio_X509","","",null,null],[5,"PEM_write_bio_X509_REQ","","",null,null],[5,"PEM_write_bio_ECPrivateKey","","",null,null],[5,"PEM_read_bio_ECPrivateKey","","",null,null],[5,"PKCS5_PBKDF2_HMAC_SHA1","","",null,null],[5,"PKCS5_PBKDF2_HMAC","","",null,null],[5,"RAND_bytes","","",null,null],[5,"RAND_status","","",null,null],[5,"RSA_new","","",null,null],[5,"RSA_free","","",null,null],[5,"RSA_generate_key_ex","","",null,null],[5,"RSA_private_decrypt","","",null,null],[5,"RSA_public_decrypt","","",null,null],[5,"RSA_private_encrypt","","",null,null],[5,"RSA_public_encrypt","","",null,null],[5,"RSA_sign","","",null,null],[5,"RSA_size","","",null,null],[5,"RSA_verify","","",null,null],[5,"DSA_new","","",null,null],[5,"DSA_free","","",null,null],[5,"DSA_size","","",null,null],[5,"DSA_generate_parameters_ex","","",null,null],[5,"DSA_generate_key","","",null,null],[5,"DSA_sign","","",null,null],[5,"DSA_verify","","",null,null],[5,"SSL_new","","",null,null],[5,"SSL_pending","","",null,null],[5,"SSL_free","","",null,null],[5,"SSL_set_bio","","",null,null],[5,"SSL_get_rbio","","",null,null],[5,"SSL_get_wbio","","",null,null],[5,"SSL_accept","","",null,null],[5,"SSL_connect","","",null,null],[5,"SSL_do_handshake","","",null,null],[5,"SSL_ctrl","","",null,null],[5,"SSL_get_error","","",null,null],[5,"SSL_read","","",null,null],[5,"SSL_write","","",null,null],[5,"SSL_get_ex_data_X509_STORE_CTX_idx","","",null,null],[5,"SSL_get_SSL_CTX","","",null,null],[5,"SSL_set_SSL_CTX","","",null,null],[5,"SSL_get_current_compression","","",null,null],[5,"SSL_get_peer_certificate","","",null,null],[5,"SSL_get_ssl_method","","",null,null],[5,"SSL_get_version","","",null,null],[5,"SSL_state_string","","",null,null],[5,"SSL_state_string_long","","",null,null],[5,"SSL_set_verify","","",null,null],[5,"SSL_set_ex_data","","",null,null],[5,"SSL_get_ex_data","","",null,null],[5,"SSL_get_servername","","",null,null],[5,"SSL_get_current_cipher","","",null,null],[5,"SSL_get_verify_result","","",null,null],[5,"SSL_shutdown","","",null,null],[5,"SSL_get_certificate","","",null,null],[5,"SSL_get_privatekey","","",null,null],[5,"SSL_load_client_CA_file","","",null,null],[5,"SSL_set_tmp_dh_callback","","",null,null],[5,"SSL_COMP_get_name","","",null,null],[5,"SSL_CIPHER_get_name","","",null,null],[5,"SSL_CIPHER_get_bits","","",null,null],[5,"SSL_CIPHER_description","","",null,null],[5,"SSL_CTX_new","","",null,null],[5,"SSL_CTX_free","","",null,null],[5,"SSL_CTX_ctrl","","",null,null],[5,"SSL_CTX_callback_ctrl","","",null,null],[5,"SSL_CTX_set_verify","","",null,null],[5,"SSL_CTX_set_verify_depth","","",null,null],[5,"SSL_CTX_load_verify_locations","","",null,null],[5,"SSL_CTX_set_default_verify_paths","","",null,null],[5,"SSL_CTX_set_ex_data","","",null,null],[5,"SSL_CTX_get_ex_data","","",null,null],[5,"SSL_CTX_set_session_id_context","","",null,null],[5,"SSL_CTX_use_certificate_file","","",null,null],[5,"SSL_CTX_use_certificate_chain_file","","",null,null],[5,"SSL_CTX_use_certificate","","",null,null],[5,"SSL_CTX_use_PrivateKey_file","","",null,null],[5,"SSL_CTX_use_PrivateKey","","",null,null],[5,"SSL_CTX_check_private_key","","",null,null],[5,"SSL_CTX_set_client_CA_list","","",null,null],[5,"SSL_CTX_get_cert_store","","",null,null],[5,"SSL_CTX_set_tmp_dh_callback","","",null,null],[5,"SSL_CTX_set_cipher_list","","",null,null],[5,"SSL_CTX_set_next_protos_advertised_cb","","",null,null],[5,"SSL_CTX_set_next_proto_select_cb","","",null,null],[5,"SSL_select_next_proto","","",null,null],[5,"SSL_get0_next_proto_negotiated","","",null,null],[5,"SSL_get_session","","",null,null],[5,"SSL_set_session","","",null,null],[5,"SSL_SESSION_free","","",null,null],[5,"SSL_SESSION_get_id","","",null,null],[5,"X509_add_ext","","",null,null],[5,"X509_digest","","",null,null],[5,"X509_free","","",null,null],[5,"X509_REQ_free","","",null,null],[5,"X509_get_serialNumber","","",null,null],[5,"X509_gmtime_adj","","",null,null],[5,"X509_new","","",null,null],[5,"X509_set_issuer_name","","",null,null],[5,"X509_set_subject_name","","",null,null],[5,"X509_set_serialNumber","","",null,null],[5,"X509_set_version","","",null,null],[5,"X509_set_pubkey","","",null,null],[5,"X509_sign","","",null,null],[5,"X509_get_pubkey","","",null,null],[5,"X509_to_X509_REQ","","",null,null],[5,"X509_verify_cert_error_string","","",null,null],[5,"X509_get1_ocsp","","",null,null],[5,"X509_check_issued","","",null,null],[5,"X509_ALGOR_free","","",null,null],[5,"X509_EXTENSION_free","","",null,null],[5,"X509_NAME_new","","",null,null],[5,"X509_NAME_free","","",null,null],[5,"X509_NAME_add_entry_by_txt","","",null,null],[5,"X509_NAME_get_index_by_NID","","",null,null],[5,"X509_NAME_ENTRY_free","","",null,null],[5,"ASN1_STRING_free","","",null,null],[5,"ASN1_STRING_length","","",null,null],[5,"ASN1_INTEGER_free","","",null,null],[5,"X509_STORE_new","","",null,null],[5,"X509_STORE_free","","",null,null],[5,"X509_STORE_add_cert","","",null,null],[5,"X509_STORE_set_default_paths","","",null,null],[5,"X509_STORE_CTX_free","","",null,null],[5,"X509_STORE_CTX_get_current_cert","","",null,null],[5,"X509_STORE_CTX_get_error","","",null,null],[5,"X509_STORE_CTX_get_ex_data","","",null,null],[5,"X509_STORE_CTX_get_error_depth","","",null,null],[5,"X509V3_set_ctx","","",null,null],[5,"X509V3_set_nconf","","",null,null],[5,"X509_REQ_new","","",null,null],[5,"X509_REQ_set_version","","",null,null],[5,"X509_REQ_set_subject_name","","",null,null],[5,"X509_REQ_set_pubkey","","",null,null],[5,"X509_REQ_add_extensions","","",null,null],[5,"X509_REQ_sign","","",null,null],[5,"d2i_DHparams","","",null,null],[5,"i2d_DHparams","","",null,null],[5,"d2i_DSAPublicKey","","",null,null],[5,"i2d_DSAPublicKey","","",null,null],[5,"d2i_DSAPrivateKey","","",null,null],[5,"i2d_DSAPrivateKey","","",null,null],[5,"d2i_ECPrivateKey","","",null,null],[5,"i2d_ECPrivateKey","","",null,null],[5,"d2i_X509","","",null,null],[5,"d2i_X509_REQ","","",null,null],[5,"i2d_X509_bio","","",null,null],[5,"i2d_X509","","",null,null],[5,"i2d_X509_REQ_bio","","",null,null],[5,"i2d_X509_REQ","","",null,null],[5,"i2d_PUBKEY_bio","","",null,null],[5,"i2d_PrivateKey_bio","","",null,null],[5,"i2d_PUBKEY","","",null,null],[5,"i2d_PrivateKey","","",null,null],[5,"i2d_RSA_PUBKEY","","",null,null],[5,"d2i_RSA_PUBKEY","","",null,null],[5,"i2d_RSAPrivateKey","","",null,null],[5,"d2i_RSAPrivateKey","","",null,null],[5,"i2d_PKCS12_bio","","",null,null],[5,"i2d_PKCS12","","",null,null],[5,"d2i_PKCS12","","",null,null],[5,"PKCS12_parse","","",null,null],[5,"PKCS12_free","","",null,null],[5,"GENERAL_NAME_free","","",null,null],[5,"HMAC_Init_ex","","",null,null],[5,"HMAC_Update","","",null,null],[5,"HMAC_Final","","",null,null],[6,"bio_info_cb","","",null,null],[6,"GEN_SESSION_CB","","",null,null],[6,"tls_session_ticket_ext_cb_fn","","",null,null],[6,"tls_session_secret_cb_fn","","",null,null],[6,"BN_ULONG","","",null,null],[6,"CRYPTO_EX_new","","",null,null],[6,"CRYPTO_EX_dup","","",null,null],[6,"CRYPTO_EX_free","","",null,null],[6,"PasswordCallback","","",null,null],[17,"SSL_CTRL_GET_SESSION_REUSED","","",null,null],[17,"SSL_CTRL_OPTIONS","","",null,null],[17,"SSL_CTRL_CLEAR_OPTIONS","","",null,null],[17,"SSL_OP_MICROSOFT_SESS_ID_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_CHALLENGE_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG","","",null,null],[17,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER","","",null,null],[17,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG","","",null,null],[17,"SSL_OP_TLS_D5_BUG","","",null,null],[17,"SSL_OP_TLS_BLOCK_PADDING_BUG","","",null,null],[17,"SSL_OP_SINGLE_ECDH_USE","","",null,null],[17,"SSL_OP_SINGLE_DH_USE","","",null,null],[17,"SSL_OP_NO_SSLv2","","",null,null],[17,"SSL_MAX_SSL_SESSION_ID_LENGTH","","",null,null],[17,"SSL_MAX_SID_CTX_LENGTH","","",null,null],[17,"SSL_MAX_KEY_ARG_LENGTH","","",null,null],[17,"SSL_MAX_MASTER_KEY_LENGTH","","",null,null],[17,"SSL_MAX_KRB5_PRINCIPAL_LENGTH","","",null,null],[17,"SSLEAY_VERSION","","",null,null],[17,"SSLEAY_CFLAGS","","",null,null],[17,"SSLEAY_BUILT_ON","","",null,null],[17,"SSLEAY_PLATFORM","","",null,null],[17,"SSLEAY_DIR","","",null,null],[17,"CRYPTO_LOCK_X509","","",null,null],[17,"CRYPTO_LOCK_SSL_CTX","","",null,null],[17,"CRYPTO_LOCK_SSL_SESSION","","",null,null],[17,"AES_ENCRYPT","","",null,null],[17,"AES_DECRYPT","","",null,null],[17,"AES_MAXNR","","",null,null],[17,"AES_BLOCK_SIZE","","",null,null],[17,"BIO_TYPE_NONE","","",null,null],[17,"BIO_CTRL_EOF","","",null,null],[17,"BIO_CTRL_INFO","","",null,null],[17,"BIO_CTRL_FLUSH","","",null,null],[17,"BIO_C_SET_BUF_MEM_EOF_RETURN","","",null,null],[17,"BIO_FLAGS_READ","","",null,null],[17,"BIO_FLAGS_WRITE","","",null,null],[17,"BIO_FLAGS_IO_SPECIAL","","",null,null],[17,"BIO_FLAGS_RWS","","",null,null],[17,"BIO_FLAGS_SHOULD_RETRY","","",null,null],[17,"CRYPTO_LOCK","","",null,null],[17,"ERR_TXT_MALLOCED","","",null,null],[17,"ERR_TXT_STRING","","",null,null],[17,"ERR_LIB_PEM","","",null,null],[17,"PEM_R_NO_START_LINE","","",null,null],[17,"EVP_MAX_MD_SIZE","","",null,null],[17,"EVP_PKEY_RSA","","",null,null],[17,"EVP_PKEY_HMAC","","",null,null],[17,"EVP_PKEY_DSA","","",null,null],[17,"EVP_PKEY_DH","","",null,null],[17,"EVP_PKEY_EC","","",null,null],[17,"EVP_PKEY_ALG_CTRL","","",null,null],[17,"EVP_PKEY_CTRL_RSA_PADDING","","",null,null],[17,"EVP_PKEY_CTRL_GET_RSA_PADDING","","",null,null],[17,"EVP_CTRL_GCM_SET_IVLEN","","",null,null],[17,"EVP_CTRL_GCM_GET_TAG","","",null,null],[17,"EVP_CTRL_GCM_SET_TAG","","",null,null],[17,"MBSTRING_ASC","","",null,null],[17,"MBSTRING_BMP","","",null,null],[17,"MBSTRING_FLAG","","",null,null],[17,"MBSTRING_UNIV","","",null,null],[17,"MBSTRING_UTF8","","",null,null],[17,"NID_undef","","",null,null],[17,"NID_itu_t","","",null,null],[17,"NID_ccitt","","",null,null],[17,"NID_iso","","",null,null],[17,"NID_joint_iso_itu_t","","",null,null],[17,"NID_joint_iso_ccitt","","",null,null],[17,"NID_member_body","","",null,null],[17,"NID_identified_organization","","",null,null],[17,"NID_hmac_md5","","",null,null],[17,"NID_hmac_sha1","","",null,null],[17,"NID_certicom_arc","","",null,null],[17,"NID_international_organizations","","",null,null],[17,"NID_wap","","",null,null],[17,"NID_wap_wsg","","",null,null],[17,"NID_selected_attribute_types","","",null,null],[17,"NID_clearance","","",null,null],[17,"NID_ISO_US","","",null,null],[17,"NID_X9_57","","",null,null],[17,"NID_X9cm","","",null,null],[17,"NID_dsa","","",null,null],[17,"NID_dsaWithSHA1","","",null,null],[17,"NID_ansi_X9_62","","",null,null],[17,"NID_X9_62_prime_field","","",null,null],[17,"NID_X9_62_characteristic_two_field","","",null,null],[17,"NID_X9_62_id_characteristic_two_basis","","",null,null],[17,"NID_X9_62_onBasis","","",null,null],[17,"NID_X9_62_tpBasis","","",null,null],[17,"NID_X9_62_ppBasis","","",null,null],[17,"NID_X9_62_id_ecPublicKey","","",null,null],[17,"NID_X9_62_c2pnb163v1","","",null,null],[17,"NID_X9_62_c2pnb163v2","","",null,null],[17,"NID_X9_62_c2pnb163v3","","",null,null],[17,"NID_X9_62_c2pnb176v1","","",null,null],[17,"NID_X9_62_c2tnb191v1","","",null,null],[17,"NID_X9_62_c2tnb191v2","","",null,null],[17,"NID_X9_62_c2tnb191v3","","",null,null],[17,"NID_X9_62_c2onb191v4","","",null,null],[17,"NID_X9_62_c2onb191v5","","",null,null],[17,"NID_X9_62_c2pnb208w1","","",null,null],[17,"NID_X9_62_c2tnb239v1","","",null,null],[17,"NID_X9_62_c2tnb239v2","","",null,null],[17,"NID_X9_62_c2tnb239v3","","",null,null],[17,"NID_X9_62_c2onb239v4","","",null,null],[17,"NID_X9_62_c2onb239v5","","",null,null],[17,"NID_X9_62_c2pnb272w1","","",null,null],[17,"NID_X9_62_c2pnb304w1","","",null,null],[17,"NID_X9_62_c2tnb359v1","","",null,null],[17,"NID_X9_62_c2pnb368w1","","",null,null],[17,"NID_X9_62_c2tnb431r1","","",null,null],[17,"NID_X9_62_prime192v1","","",null,null],[17,"NID_X9_62_prime192v2","","",null,null],[17,"NID_X9_62_prime192v3","","",null,null],[17,"NID_X9_62_prime239v1","","",null,null],[17,"NID_X9_62_prime239v2","","",null,null],[17,"NID_X9_62_prime239v3","","",null,null],[17,"NID_X9_62_prime256v1","","",null,null],[17,"NID_ecdsa_with_SHA1","","",null,null],[17,"NID_ecdsa_with_Recommended","","",null,null],[17,"NID_ecdsa_with_Specified","","",null,null],[17,"NID_ecdsa_with_SHA224","","",null,null],[17,"NID_ecdsa_with_SHA256","","",null,null],[17,"NID_ecdsa_with_SHA384","","",null,null],[17,"NID_ecdsa_with_SHA512","","",null,null],[17,"NID_secp112r1","","",null,null],[17,"NID_secp112r2","","",null,null],[17,"NID_secp128r1","","",null,null],[17,"NID_secp128r2","","",null,null],[17,"NID_secp160k1","","",null,null],[17,"NID_secp160r1","","",null,null],[17,"NID_secp160r2","","",null,null],[17,"NID_secp192k1","","",null,null],[17,"NID_secp224k1","","",null,null],[17,"NID_secp224r1","","",null,null],[17,"NID_secp256k1","","",null,null],[17,"NID_secp384r1","","",null,null],[17,"NID_secp521r1","","",null,null],[17,"NID_sect113r1","","",null,null],[17,"NID_sect113r2","","",null,null],[17,"NID_sect131r1","","",null,null],[17,"NID_sect131r2","","",null,null],[17,"NID_sect163k1","","",null,null],[17,"NID_sect163r1","","",null,null],[17,"NID_sect163r2","","",null,null],[17,"NID_sect193r1","","",null,null],[17,"NID_sect193r2","","",null,null],[17,"NID_sect233k1","","",null,null],[17,"NID_sect233r1","","",null,null],[17,"NID_sect239k1","","",null,null],[17,"NID_sect283k1","","",null,null],[17,"NID_sect283r1","","",null,null],[17,"NID_sect409k1","","",null,null],[17,"NID_sect409r1","","",null,null],[17,"NID_sect571k1","","",null,null],[17,"NID_sect571r1","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls1","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls3","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls4","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls5","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls6","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls7","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls8","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls9","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls10","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls11","","",null,null],[17,"NID_wap_wsg_idm_ecid_wtls12","","",null,null],[17,"NID_cast5_cbc","","",null,null],[17,"NID_cast5_ecb","","",null,null],[17,"NID_cast5_cfb64","","",null,null],[17,"NID_cast5_ofb64","","",null,null],[17,"NID_pbeWithMD5AndCast5_CBC","","",null,null],[17,"NID_id_PasswordBasedMAC","","",null,null],[17,"NID_id_DHBasedMac","","",null,null],[17,"NID_rsadsi","","",null,null],[17,"NID_pkcs","","",null,null],[17,"NID_pkcs1","","",null,null],[17,"NID_rsaEncryption","","",null,null],[17,"NID_md2WithRSAEncryption","","",null,null],[17,"NID_md4WithRSAEncryption","","",null,null],[17,"NID_md5WithRSAEncryption","","",null,null],[17,"NID_sha1WithRSAEncryption","","",null,null],[17,"NID_rsaesOaep","","",null,null],[17,"NID_mgf1","","",null,null],[17,"NID_rsassaPss","","",null,null],[17,"NID_sha256WithRSAEncryption","","",null,null],[17,"NID_sha384WithRSAEncryption","","",null,null],[17,"NID_sha512WithRSAEncryption","","",null,null],[17,"NID_sha224WithRSAEncryption","","",null,null],[17,"NID_pkcs3","","",null,null],[17,"NID_dhKeyAgreement","","",null,null],[17,"NID_pkcs5","","",null,null],[17,"NID_pbeWithMD2AndDES_CBC","","",null,null],[17,"NID_pbeWithMD5AndDES_CBC","","",null,null],[17,"NID_pbeWithMD2AndRC2_CBC","","",null,null],[17,"NID_pbeWithMD5AndRC2_CBC","","",null,null],[17,"NID_pbeWithSHA1AndDES_CBC","","",null,null],[17,"NID_pbeWithSHA1AndRC2_CBC","","",null,null],[17,"NID_id_pbkdf2","","",null,null],[17,"NID_pbes2","","",null,null],[17,"NID_pbmac1","","",null,null],[17,"NID_pkcs7","","",null,null],[17,"NID_pkcs7_data","","",null,null],[17,"NID_pkcs7_signed","","",null,null],[17,"NID_pkcs7_enveloped","","",null,null],[17,"NID_pkcs7_signedAndEnveloped","","",null,null],[17,"NID_pkcs7_digest","","",null,null],[17,"NID_pkcs7_encrypted","","",null,null],[17,"NID_pkcs9","","",null,null],[17,"NID_pkcs9_emailAddress","","",null,null],[17,"NID_pkcs9_unstructuredName","","",null,null],[17,"NID_pkcs9_contentType","","",null,null],[17,"NID_pkcs9_messageDigest","","",null,null],[17,"NID_pkcs9_signingTime","","",null,null],[17,"NID_pkcs9_countersignature","","",null,null],[17,"NID_pkcs9_challengePassword","","",null,null],[17,"NID_pkcs9_unstructuredAddress","","",null,null],[17,"NID_pkcs9_extCertAttributes","","",null,null],[17,"NID_ext_req","","",null,null],[17,"NID_SMIMECapabilities","","",null,null],[17,"NID_SMIME","","",null,null],[17,"NID_id_smime_mod","","",null,null],[17,"NID_id_smime_ct","","",null,null],[17,"NID_id_smime_aa","","",null,null],[17,"NID_id_smime_alg","","",null,null],[17,"NID_id_smime_cd","","",null,null],[17,"NID_id_smime_spq","","",null,null],[17,"NID_id_smime_cti","","",null,null],[17,"NID_id_smime_mod_cms","","",null,null],[17,"NID_id_smime_mod_ess","","",null,null],[17,"NID_id_smime_mod_oid","","",null,null],[17,"NID_id_smime_mod_msg_v3","","",null,null],[17,"NID_id_smime_mod_ets_eSignature_88","","",null,null],[17,"NID_id_smime_mod_ets_eSignature_97","","",null,null],[17,"NID_id_smime_mod_ets_eSigPolicy_88","","",null,null],[17,"NID_id_smime_mod_ets_eSigPolicy_97","","",null,null],[17,"NID_id_smime_ct_receipt","","",null,null],[17,"NID_id_smime_ct_authData","","",null,null],[17,"NID_id_smime_ct_publishCert","","",null,null],[17,"NID_id_smime_ct_TSTInfo","","",null,null],[17,"NID_id_smime_ct_TDTInfo","","",null,null],[17,"NID_id_smime_ct_contentInfo","","",null,null],[17,"NID_id_smime_ct_DVCSRequestData","","",null,null],[17,"NID_id_smime_ct_DVCSResponseData","","",null,null],[17,"NID_id_smime_ct_compressedData","","",null,null],[17,"NID_id_ct_asciiTextWithCRLF","","",null,null],[17,"NID_id_smime_aa_receiptRequest","","",null,null],[17,"NID_id_smime_aa_securityLabel","","",null,null],[17,"NID_id_smime_aa_mlExpandHistory","","",null,null],[17,"NID_id_smime_aa_contentHint","","",null,null],[17,"NID_id_smime_aa_msgSigDigest","","",null,null],[17,"NID_id_smime_aa_encapContentType","","",null,null],[17,"NID_id_smime_aa_contentIdentifier","","",null,null],[17,"NID_id_smime_aa_macValue","","",null,null],[17,"NID_id_smime_aa_equivalentLabels","","",null,null],[17,"NID_id_smime_aa_contentReference","","",null,null],[17,"NID_id_smime_aa_encrypKeyPref","","",null,null],[17,"NID_id_smime_aa_signingCertificate","","",null,null],[17,"NID_id_smime_aa_smimeEncryptCerts","","",null,null],[17,"NID_id_smime_aa_timeStampToken","","",null,null],[17,"NID_id_smime_aa_ets_sigPolicyId","","",null,null],[17,"NID_id_smime_aa_ets_commitmentType","","",null,null],[17,"NID_id_smime_aa_ets_signerLocation","","",null,null],[17,"NID_id_smime_aa_ets_signerAttr","","",null,null],[17,"NID_id_smime_aa_ets_otherSigCert","","",null,null],[17,"NID_id_smime_aa_ets_contentTimestamp","","",null,null],[17,"NID_id_smime_aa_ets_CertificateRefs","","",null,null],[17,"NID_id_smime_aa_ets_RevocationRefs","","",null,null],[17,"NID_id_smime_aa_ets_certValues","","",null,null],[17,"NID_id_smime_aa_ets_revocationValues","","",null,null],[17,"NID_id_smime_aa_ets_escTimeStamp","","",null,null],[17,"NID_id_smime_aa_ets_certCRLTimestamp","","",null,null],[17,"NID_id_smime_aa_ets_archiveTimeStamp","","",null,null],[17,"NID_id_smime_aa_signatureType","","",null,null],[17,"NID_id_smime_aa_dvcs_dvc","","",null,null],[17,"NID_id_smime_alg_ESDHwith3DES","","",null,null],[17,"NID_id_smime_alg_ESDHwithRC2","","",null,null],[17,"NID_id_smime_alg_3DESwrap","","",null,null],[17,"NID_id_smime_alg_RC2wrap","","",null,null],[17,"NID_id_smime_alg_ESDH","","",null,null],[17,"NID_id_smime_alg_CMS3DESwrap","","",null,null],[17,"NID_id_smime_alg_CMSRC2wrap","","",null,null],[17,"NID_id_alg_PWRI_KEK","","",null,null],[17,"NID_id_smime_cd_ldap","","",null,null],[17,"NID_id_smime_spq_ets_sqt_uri","","",null,null],[17,"NID_id_smime_spq_ets_sqt_unotice","","",null,null],[17,"NID_id_smime_cti_ets_proofOfOrigin","","",null,null],[17,"NID_id_smime_cti_ets_proofOfReceipt","","",null,null],[17,"NID_id_smime_cti_ets_proofOfDelivery","","",null,null],[17,"NID_id_smime_cti_ets_proofOfSender","","",null,null],[17,"NID_id_smime_cti_ets_proofOfApproval","","",null,null],[17,"NID_id_smime_cti_ets_proofOfCreation","","",null,null],[17,"NID_friendlyName","","",null,null],[17,"NID_localKeyID","","",null,null],[17,"NID_ms_csp_name","","",null,null],[17,"NID_LocalKeySet","","",null,null],[17,"NID_x509Certificate","","",null,null],[17,"NID_sdsiCertificate","","",null,null],[17,"NID_x509Crl","","",null,null],[17,"NID_pbe_WithSHA1And128BitRC4","","",null,null],[17,"NID_pbe_WithSHA1And40BitRC4","","",null,null],[17,"NID_pbe_WithSHA1And3_Key_TripleDES_CBC","","",null,null],[17,"NID_pbe_WithSHA1And2_Key_TripleDES_CBC","","",null,null],[17,"NID_pbe_WithSHA1And128BitRC2_CBC","","",null,null],[17,"NID_pbe_WithSHA1And40BitRC2_CBC","","",null,null],[17,"NID_keyBag","","",null,null],[17,"NID_pkcs8ShroudedKeyBag","","",null,null],[17,"NID_certBag","","",null,null],[17,"NID_crlBag","","",null,null],[17,"NID_secretBag","","",null,null],[17,"NID_safeContentsBag","","",null,null],[17,"NID_md2","","",null,null],[17,"NID_md4","","",null,null],[17,"NID_md5","","",null,null],[17,"NID_md5_sha1","","",null,null],[17,"NID_hmacWithMD5","","",null,null],[17,"NID_hmacWithSHA1","","",null,null],[17,"NID_hmacWithSHA224","","",null,null],[17,"NID_hmacWithSHA256","","",null,null],[17,"NID_hmacWithSHA384","","",null,null],[17,"NID_hmacWithSHA512","","",null,null],[17,"NID_rc2_cbc","","",null,null],[17,"NID_rc2_ecb","","",null,null],[17,"NID_rc2_cfb64","","",null,null],[17,"NID_rc2_ofb64","","",null,null],[17,"NID_rc2_40_cbc","","",null,null],[17,"NID_rc2_64_cbc","","",null,null],[17,"NID_rc4","","",null,null],[17,"NID_rc4_40","","",null,null],[17,"NID_des_ede3_cbc","","",null,null],[17,"NID_rc5_cbc","","",null,null],[17,"NID_rc5_ecb","","",null,null],[17,"NID_rc5_cfb64","","",null,null],[17,"NID_rc5_ofb64","","",null,null],[17,"NID_ms_ext_req","","",null,null],[17,"NID_ms_code_ind","","",null,null],[17,"NID_ms_code_com","","",null,null],[17,"NID_ms_ctl_sign","","",null,null],[17,"NID_ms_sgc","","",null,null],[17,"NID_ms_efs","","",null,null],[17,"NID_ms_smartcard_login","","",null,null],[17,"NID_ms_upn","","",null,null],[17,"NID_idea_cbc","","",null,null],[17,"NID_idea_ecb","","",null,null],[17,"NID_idea_cfb64","","",null,null],[17,"NID_idea_ofb64","","",null,null],[17,"NID_bf_cbc","","",null,null],[17,"NID_bf_ecb","","",null,null],[17,"NID_bf_cfb64","","",null,null],[17,"NID_bf_ofb64","","",null,null],[17,"NID_id_pkix","","",null,null],[17,"NID_id_pkix_mod","","",null,null],[17,"NID_id_pe","","",null,null],[17,"NID_id_qt","","",null,null],[17,"NID_id_kp","","",null,null],[17,"NID_id_it","","",null,null],[17,"NID_id_pkip","","",null,null],[17,"NID_id_alg","","",null,null],[17,"NID_id_cmc","","",null,null],[17,"NID_id_on","","",null,null],[17,"NID_id_pda","","",null,null],[17,"NID_id_aca","","",null,null],[17,"NID_id_qcs","","",null,null],[17,"NID_id_cct","","",null,null],[17,"NID_id_ppl","","",null,null],[17,"NID_id_ad","","",null,null],[17,"NID_id_pkix1_explicit_88","","",null,null],[17,"NID_id_pkix1_implicit_88","","",null,null],[17,"NID_id_pkix1_explicit_93","","",null,null],[17,"NID_id_pkix1_implicit_93","","",null,null],[17,"NID_id_mod_crmf","","",null,null],[17,"NID_id_mod_cmc","","",null,null],[17,"NID_id_mod_kea_profile_88","","",null,null],[17,"NID_id_mod_kea_profile_93","","",null,null],[17,"NID_id_mod_cmp","","",null,null],[17,"NID_id_mod_qualified_cert_88","","",null,null],[17,"NID_id_mod_qualified_cert_93","","",null,null],[17,"NID_id_mod_attribute_cert","","",null,null],[17,"NID_id_mod_timestamp_protocol","","",null,null],[17,"NID_id_mod_ocsp","","",null,null],[17,"NID_id_mod_dvcs","","",null,null],[17,"NID_id_mod_cmp2000","","",null,null],[17,"NID_info_access","","",null,null],[17,"NID_biometricInfo","","",null,null],[17,"NID_qcStatements","","",null,null],[17,"NID_ac_auditEntity","","",null,null],[17,"NID_ac_targeting","","",null,null],[17,"NID_aaControls","","",null,null],[17,"NID_sbgp_ipAddrBlock","","",null,null],[17,"NID_sbgp_autonomousSysNum","","",null,null],[17,"NID_sbgp_routerIdentifier","","",null,null],[17,"NID_ac_proxying","","",null,null],[17,"NID_sinfo_access","","",null,null],[17,"NID_proxyCertInfo","","",null,null],[17,"NID_id_qt_cps","","",null,null],[17,"NID_id_qt_unotice","","",null,null],[17,"NID_textNotice","","",null,null],[17,"NID_server_auth","","",null,null],[17,"NID_client_auth","","",null,null],[17,"NID_code_sign","","",null,null],[17,"NID_email_protect","","",null,null],[17,"NID_ipsecEndSystem","","",null,null],[17,"NID_ipsecTunnel","","",null,null],[17,"NID_ipsecUser","","",null,null],[17,"NID_time_stamp","","",null,null],[17,"NID_OCSP_sign","","",null,null],[17,"NID_dvcs","","",null,null],[17,"NID_id_it_caProtEncCert","","",null,null],[17,"NID_id_it_signKeyPairTypes","","",null,null],[17,"NID_id_it_encKeyPairTypes","","",null,null],[17,"NID_id_it_preferredSymmAlg","","",null,null],[17,"NID_id_it_caKeyUpdateInfo","","",null,null],[17,"NID_id_it_currentCRL","","",null,null],[17,"NID_id_it_unsupportedOIDs","","",null,null],[17,"NID_id_it_subscriptionRequest","","",null,null],[17,"NID_id_it_subscriptionResponse","","",null,null],[17,"NID_id_it_keyPairParamReq","","",null,null],[17,"NID_id_it_keyPairParamRep","","",null,null],[17,"NID_id_it_revPassphrase","","",null,null],[17,"NID_id_it_implicitConfirm","","",null,null],[17,"NID_id_it_confirmWaitTime","","",null,null],[17,"NID_id_it_origPKIMessage","","",null,null],[17,"NID_id_it_suppLangTags","","",null,null],[17,"NID_id_regCtrl","","",null,null],[17,"NID_id_regInfo","","",null,null],[17,"NID_id_regCtrl_regToken","","",null,null],[17,"NID_id_regCtrl_authenticator","","",null,null],[17,"NID_id_regCtrl_pkiPublicationInfo","","",null,null],[17,"NID_id_regCtrl_pkiArchiveOptions","","",null,null],[17,"NID_id_regCtrl_oldCertID","","",null,null],[17,"NID_id_regCtrl_protocolEncrKey","","",null,null],[17,"NID_id_regInfo_utf8Pairs","","",null,null],[17,"NID_id_regInfo_certReq","","",null,null],[17,"NID_id_alg_des40","","",null,null],[17,"NID_id_alg_noSignature","","",null,null],[17,"NID_id_alg_dh_sig_hmac_sha1","","",null,null],[17,"NID_id_alg_dh_pop","","",null,null],[17,"NID_id_cmc_statusInfo","","",null,null],[17,"NID_id_cmc_identification","","",null,null],[17,"NID_id_cmc_identityProof","","",null,null],[17,"NID_id_cmc_dataReturn","","",null,null],[17,"NID_id_cmc_transactionId","","",null,null],[17,"NID_id_cmc_senderNonce","","",null,null],[17,"NID_id_cmc_recipientNonce","","",null,null],[17,"NID_id_cmc_addExtensions","","",null,null],[17,"NID_id_cmc_encryptedPOP","","",null,null],[17,"NID_id_cmc_decryptedPOP","","",null,null],[17,"NID_id_cmc_lraPOPWitness","","",null,null],[17,"NID_id_cmc_getCert","","",null,null],[17,"NID_id_cmc_getCRL","","",null,null],[17,"NID_id_cmc_revokeRequest","","",null,null],[17,"NID_id_cmc_regInfo","","",null,null],[17,"NID_id_cmc_responseInfo","","",null,null],[17,"NID_id_cmc_queryPending","","",null,null],[17,"NID_id_cmc_popLinkRandom","","",null,null],[17,"NID_id_cmc_popLinkWitness","","",null,null],[17,"NID_id_cmc_confirmCertAcceptance","","",null,null],[17,"NID_id_on_personalData","","",null,null],[17,"NID_id_on_permanentIdentifier","","",null,null],[17,"NID_id_pda_dateOfBirth","","",null,null],[17,"NID_id_pda_placeOfBirth","","",null,null],[17,"NID_id_pda_gender","","",null,null],[17,"NID_id_pda_countryOfCitizenship","","",null,null],[17,"NID_id_pda_countryOfResidence","","",null,null],[17,"NID_id_aca_authenticationInfo","","",null,null],[17,"NID_id_aca_accessIdentity","","",null,null],[17,"NID_id_aca_chargingIdentity","","",null,null],[17,"NID_id_aca_group","","",null,null],[17,"NID_id_aca_role","","",null,null],[17,"NID_id_aca_encAttrs","","",null,null],[17,"NID_id_qcs_pkixQCSyntax_v1","","",null,null],[17,"NID_id_cct_crs","","",null,null],[17,"NID_id_cct_PKIData","","",null,null],[17,"NID_id_cct_PKIResponse","","",null,null],[17,"NID_id_ppl_anyLanguage","","",null,null],[17,"NID_id_ppl_inheritAll","","",null,null],[17,"NID_Independent","","",null,null],[17,"NID_ad_OCSP","","",null,null],[17,"NID_ad_ca_issuers","","",null,null],[17,"NID_ad_timeStamping","","",null,null],[17,"NID_ad_dvcs","","",null,null],[17,"NID_caRepository","","",null,null],[17,"NID_id_pkix_OCSP_basic","","",null,null],[17,"NID_id_pkix_OCSP_Nonce","","",null,null],[17,"NID_id_pkix_OCSP_CrlID","","",null,null],[17,"NID_id_pkix_OCSP_acceptableResponses","","",null,null],[17,"NID_id_pkix_OCSP_noCheck","","",null,null],[17,"NID_id_pkix_OCSP_archiveCutoff","","",null,null],[17,"NID_id_pkix_OCSP_serviceLocator","","",null,null],[17,"NID_id_pkix_OCSP_extendedStatus","","",null,null],[17,"NID_id_pkix_OCSP_valid","","",null,null],[17,"NID_id_pkix_OCSP_path","","",null,null],[17,"NID_id_pkix_OCSP_trustRoot","","",null,null],[17,"NID_algorithm","","",null,null],[17,"NID_md5WithRSA","","",null,null],[17,"NID_des_ecb","","",null,null],[17,"NID_des_cbc","","",null,null],[17,"NID_des_ofb64","","",null,null],[17,"NID_des_cfb64","","",null,null],[17,"NID_rsaSignature","","",null,null],[17,"NID_dsa_2","","",null,null],[17,"NID_dsaWithSHA","","",null,null],[17,"NID_shaWithRSAEncryption","","",null,null],[17,"NID_des_ede_ecb","","",null,null],[17,"NID_des_ede3_ecb","","",null,null],[17,"NID_des_ede_cbc","","",null,null],[17,"NID_des_ede_cfb64","","",null,null],[17,"NID_des_ede3_cfb64","","",null,null],[17,"NID_des_ede_ofb64","","",null,null],[17,"NID_des_ede3_ofb64","","",null,null],[17,"NID_desx_cbc","","",null,null],[17,"NID_sha","","",null,null],[17,"NID_sha1","","",null,null],[17,"NID_dsaWithSHA1_2","","",null,null],[17,"NID_sha1WithRSA","","",null,null],[17,"NID_ripemd160","","",null,null],[17,"NID_ripemd160WithRSA","","",null,null],[17,"NID_sxnet","","",null,null],[17,"NID_X500","","",null,null],[17,"NID_X509","","",null,null],[17,"NID_commonName","","",null,null],[17,"NID_surname","","",null,null],[17,"NID_serialNumber","","",null,null],[17,"NID_countryName","","",null,null],[17,"NID_localityName","","",null,null],[17,"NID_stateOrProvinceName","","",null,null],[17,"NID_streetAddress","","",null,null],[17,"NID_organizationName","","",null,null],[17,"NID_organizationalUnitName","","",null,null],[17,"NID_title","","",null,null],[17,"NID_description","","",null,null],[17,"NID_searchGuide","","",null,null],[17,"NID_businessCategory","","",null,null],[17,"NID_postalAddress","","",null,null],[17,"NID_postalCode","","",null,null],[17,"NID_postOfficeBox","","",null,null],[17,"NID_physicalDeliveryOfficeName","","",null,null],[17,"NID_telephoneNumber","","",null,null],[17,"NID_telexNumber","","",null,null],[17,"NID_teletexTerminalIdentifier","","",null,null],[17,"NID_facsimileTelephoneNumber","","",null,null],[17,"NID_x121Address","","",null,null],[17,"NID_internationaliSDNNumber","","",null,null],[17,"NID_registeredAddress","","",null,null],[17,"NID_destinationIndicator","","",null,null],[17,"NID_preferredDeliveryMethod","","",null,null],[17,"NID_presentationAddress","","",null,null],[17,"NID_supportedApplicationContext","","",null,null],[17,"NID_member","","",null,null],[17,"NID_owner","","",null,null],[17,"NID_roleOccupant","","",null,null],[17,"NID_seeAlso","","",null,null],[17,"NID_userPassword","","",null,null],[17,"NID_userCertificate","","",null,null],[17,"NID_cACertificate","","",null,null],[17,"NID_authorityRevocationList","","",null,null],[17,"NID_certificateRevocationList","","",null,null],[17,"NID_crossCertificatePair","","",null,null],[17,"NID_name","","",null,null],[17,"NID_givenName","","",null,null],[17,"NID_initials","","",null,null],[17,"NID_generationQualifier","","",null,null],[17,"NID_x500UniqueIdentifier","","",null,null],[17,"NID_dnQualifier","","",null,null],[17,"NID_enhancedSearchGuide","","",null,null],[17,"NID_protocolInformation","","",null,null],[17,"NID_distinguishedName","","",null,null],[17,"NID_uniqueMember","","",null,null],[17,"NID_houseIdentifier","","",null,null],[17,"NID_supportedAlgorithms","","",null,null],[17,"NID_deltaRevocationList","","",null,null],[17,"NID_dmdName","","",null,null],[17,"NID_pseudonym","","",null,null],[17,"NID_role","","",null,null],[17,"NID_X500algorithms","","",null,null],[17,"NID_rsa","","",null,null],[17,"NID_mdc2WithRSA","","",null,null],[17,"NID_mdc2","","",null,null],[17,"NID_id_ce","","",null,null],[17,"NID_subject_directory_attributes","","",null,null],[17,"NID_subject_key_identifier","","",null,null],[17,"NID_key_usage","","",null,null],[17,"NID_private_key_usage_period","","",null,null],[17,"NID_subject_alt_name","","",null,null],[17,"NID_issuer_alt_name","","",null,null],[17,"NID_basic_constraints","","",null,null],[17,"NID_crl_number","","",null,null],[17,"NID_crl_reason","","",null,null],[17,"NID_invalidity_date","","",null,null],[17,"NID_delta_crl","","",null,null],[17,"NID_issuing_distribution_point","","",null,null],[17,"NID_certificate_issuer","","",null,null],[17,"NID_name_constraints","","",null,null],[17,"NID_crl_distribution_points","","",null,null],[17,"NID_certificate_policies","","",null,null],[17,"NID_any_policy","","",null,null],[17,"NID_policy_mappings","","",null,null],[17,"NID_authority_key_identifier","","",null,null],[17,"NID_policy_constraints","","",null,null],[17,"NID_ext_key_usage","","",null,null],[17,"NID_freshest_crl","","",null,null],[17,"NID_inhibit_any_policy","","",null,null],[17,"NID_target_information","","",null,null],[17,"NID_no_rev_avail","","",null,null],[17,"NID_anyExtendedKeyUsage","","",null,null],[17,"NID_netscape","","",null,null],[17,"NID_netscape_cert_extension","","",null,null],[17,"NID_netscape_data_type","","",null,null],[17,"NID_netscape_cert_type","","",null,null],[17,"NID_netscape_base_url","","",null,null],[17,"NID_netscape_revocation_url","","",null,null],[17,"NID_netscape_ca_revocation_url","","",null,null],[17,"NID_netscape_renewal_url","","",null,null],[17,"NID_netscape_ca_policy_url","","",null,null],[17,"NID_netscape_ssl_server_name","","",null,null],[17,"NID_netscape_comment","","",null,null],[17,"NID_netscape_cert_sequence","","",null,null],[17,"NID_ns_sgc","","",null,null],[17,"NID_org","","",null,null],[17,"NID_dod","","",null,null],[17,"NID_iana","","",null,null],[17,"NID_Directory","","",null,null],[17,"NID_Management","","",null,null],[17,"NID_Experimental","","",null,null],[17,"NID_Private","","",null,null],[17,"NID_Security","","",null,null],[17,"NID_SNMPv2","","",null,null],[17,"NID_Mail","","",null,null],[17,"NID_Enterprises","","",null,null],[17,"NID_dcObject","","",null,null],[17,"NID_mime_mhs","","",null,null],[17,"NID_mime_mhs_headings","","",null,null],[17,"NID_mime_mhs_bodies","","",null,null],[17,"NID_id_hex_partial_message","","",null,null],[17,"NID_id_hex_multipart_message","","",null,null],[17,"NID_zlib_compression","","",null,null],[17,"NID_aes_128_ecb","","",null,null],[17,"NID_aes_128_cbc","","",null,null],[17,"NID_aes_128_ofb128","","",null,null],[17,"NID_aes_128_cfb128","","",null,null],[17,"NID_id_aes128_wrap","","",null,null],[17,"NID_aes_128_gcm","","",null,null],[17,"NID_aes_128_ccm","","",null,null],[17,"NID_id_aes128_wrap_pad","","",null,null],[17,"NID_aes_192_ecb","","",null,null],[17,"NID_aes_192_cbc","","",null,null],[17,"NID_aes_192_ofb128","","",null,null],[17,"NID_aes_192_cfb128","","",null,null],[17,"NID_id_aes192_wrap","","",null,null],[17,"NID_aes_192_gcm","","",null,null],[17,"NID_aes_192_ccm","","",null,null],[17,"NID_id_aes192_wrap_pad","","",null,null],[17,"NID_aes_256_ecb","","",null,null],[17,"NID_aes_256_cbc","","",null,null],[17,"NID_aes_256_ofb128","","",null,null],[17,"NID_aes_256_cfb128","","",null,null],[17,"NID_id_aes256_wrap","","",null,null],[17,"NID_aes_256_gcm","","",null,null],[17,"NID_aes_256_ccm","","",null,null],[17,"NID_id_aes256_wrap_pad","","",null,null],[17,"NID_aes_128_cfb1","","",null,null],[17,"NID_aes_192_cfb1","","",null,null],[17,"NID_aes_256_cfb1","","",null,null],[17,"NID_aes_128_cfb8","","",null,null],[17,"NID_aes_192_cfb8","","",null,null],[17,"NID_aes_256_cfb8","","",null,null],[17,"NID_aes_128_ctr","","",null,null],[17,"NID_aes_192_ctr","","",null,null],[17,"NID_aes_256_ctr","","",null,null],[17,"NID_aes_128_xts","","",null,null],[17,"NID_aes_256_xts","","",null,null],[17,"NID_des_cfb1","","",null,null],[17,"NID_des_cfb8","","",null,null],[17,"NID_des_ede3_cfb1","","",null,null],[17,"NID_des_ede3_cfb8","","",null,null],[17,"NID_sha256","","",null,null],[17,"NID_sha384","","",null,null],[17,"NID_sha512","","",null,null],[17,"NID_sha224","","",null,null],[17,"NID_dsa_with_SHA224","","",null,null],[17,"NID_dsa_with_SHA256","","",null,null],[17,"NID_hold_instruction_code","","",null,null],[17,"NID_hold_instruction_none","","",null,null],[17,"NID_hold_instruction_call_issuer","","",null,null],[17,"NID_hold_instruction_reject","","",null,null],[17,"NID_data","","",null,null],[17,"NID_pss","","",null,null],[17,"NID_ucl","","",null,null],[17,"NID_pilot","","",null,null],[17,"NID_pilotAttributeType","","",null,null],[17,"NID_pilotAttributeSyntax","","",null,null],[17,"NID_pilotObjectClass","","",null,null],[17,"NID_pilotGroups","","",null,null],[17,"NID_iA5StringSyntax","","",null,null],[17,"NID_caseIgnoreIA5StringSyntax","","",null,null],[17,"NID_pilotObject","","",null,null],[17,"NID_pilotPerson","","",null,null],[17,"NID_account","","",null,null],[17,"NID_document","","",null,null],[17,"NID_room","","",null,null],[17,"NID_documentSeries","","",null,null],[17,"NID_Domain","","",null,null],[17,"NID_rFC822localPart","","",null,null],[17,"NID_dNSDomain","","",null,null],[17,"NID_domainRelatedObject","","",null,null],[17,"NID_friendlyCountry","","",null,null],[17,"NID_simpleSecurityObject","","",null,null],[17,"NID_pilotOrganization","","",null,null],[17,"NID_pilotDSA","","",null,null],[17,"NID_qualityLabelledData","","",null,null],[17,"NID_userId","","",null,null],[17,"NID_textEncodedORAddress","","",null,null],[17,"NID_rfc822Mailbox","","",null,null],[17,"NID_info","","",null,null],[17,"NID_favouriteDrink","","",null,null],[17,"NID_roomNumber","","",null,null],[17,"NID_photo","","",null,null],[17,"NID_userClass","","",null,null],[17,"NID_host","","",null,null],[17,"NID_manager","","",null,null],[17,"NID_documentIdentifier","","",null,null],[17,"NID_documentTitle","","",null,null],[17,"NID_documentVersion","","",null,null],[17,"NID_documentAuthor","","",null,null],[17,"NID_documentLocation","","",null,null],[17,"NID_homeTelephoneNumber","","",null,null],[17,"NID_secretary","","",null,null],[17,"NID_otherMailbox","","",null,null],[17,"NID_lastModifiedTime","","",null,null],[17,"NID_lastModifiedBy","","",null,null],[17,"NID_domainComponent","","",null,null],[17,"NID_aRecord","","",null,null],[17,"NID_pilotAttributeType27","","",null,null],[17,"NID_mXRecord","","",null,null],[17,"NID_nSRecord","","",null,null],[17,"NID_sOARecord","","",null,null],[17,"NID_cNAMERecord","","",null,null],[17,"NID_associatedDomain","","",null,null],[17,"NID_associatedName","","",null,null],[17,"NID_homePostalAddress","","",null,null],[17,"NID_personalTitle","","",null,null],[17,"NID_mobileTelephoneNumber","","",null,null],[17,"NID_pagerTelephoneNumber","","",null,null],[17,"NID_friendlyCountryName","","",null,null],[17,"NID_organizationalStatus","","",null,null],[17,"NID_janetMailbox","","",null,null],[17,"NID_mailPreferenceOption","","",null,null],[17,"NID_buildingName","","",null,null],[17,"NID_dSAQuality","","",null,null],[17,"NID_singleLevelQuality","","",null,null],[17,"NID_subtreeMinimumQuality","","",null,null],[17,"NID_subtreeMaximumQuality","","",null,null],[17,"NID_personalSignature","","",null,null],[17,"NID_dITRedirect","","",null,null],[17,"NID_audio","","",null,null],[17,"NID_documentPublisher","","",null,null],[17,"NID_id_set","","",null,null],[17,"NID_set_ctype","","",null,null],[17,"NID_set_msgExt","","",null,null],[17,"NID_set_attr","","",null,null],[17,"NID_set_policy","","",null,null],[17,"NID_set_certExt","","",null,null],[17,"NID_set_brand","","",null,null],[17,"NID_setct_PANData","","",null,null],[17,"NID_setct_PANToken","","",null,null],[17,"NID_setct_PANOnly","","",null,null],[17,"NID_setct_OIData","","",null,null],[17,"NID_setct_PI","","",null,null],[17,"NID_setct_PIData","","",null,null],[17,"NID_setct_PIDataUnsigned","","",null,null],[17,"NID_setct_HODInput","","",null,null],[17,"NID_setct_AuthResBaggage","","",null,null],[17,"NID_setct_AuthRevReqBaggage","","",null,null],[17,"NID_setct_AuthRevResBaggage","","",null,null],[17,"NID_setct_CapTokenSeq","","",null,null],[17,"NID_setct_PInitResData","","",null,null],[17,"NID_setct_PI_TBS","","",null,null],[17,"NID_setct_PResData","","",null,null],[17,"NID_setct_AuthReqTBS","","",null,null],[17,"NID_setct_AuthResTBS","","",null,null],[17,"NID_setct_AuthResTBSX","","",null,null],[17,"NID_setct_AuthTokenTBS","","",null,null],[17,"NID_setct_CapTokenData","","",null,null],[17,"NID_setct_CapTokenTBS","","",null,null],[17,"NID_setct_AcqCardCodeMsg","","",null,null],[17,"NID_setct_AuthRevReqTBS","","",null,null],[17,"NID_setct_AuthRevResData","","",null,null],[17,"NID_setct_AuthRevResTBS","","",null,null],[17,"NID_setct_CapReqTBS","","",null,null],[17,"NID_setct_CapReqTBSX","","",null,null],[17,"NID_setct_CapResData","","",null,null],[17,"NID_setct_CapRevReqTBS","","",null,null],[17,"NID_setct_CapRevReqTBSX","","",null,null],[17,"NID_setct_CapRevResData","","",null,null],[17,"NID_setct_CredReqTBS","","",null,null],[17,"NID_setct_CredReqTBSX","","",null,null],[17,"NID_setct_CredResData","","",null,null],[17,"NID_setct_CredRevReqTBS","","",null,null],[17,"NID_setct_CredRevReqTBSX","","",null,null],[17,"NID_setct_CredRevResData","","",null,null],[17,"NID_setct_PCertReqData","","",null,null],[17,"NID_setct_PCertResTBS","","",null,null],[17,"NID_setct_BatchAdminReqData","","",null,null],[17,"NID_setct_BatchAdminResData","","",null,null],[17,"NID_setct_CardCInitResTBS","","",null,null],[17,"NID_setct_MeAqCInitResTBS","","",null,null],[17,"NID_setct_RegFormResTBS","","",null,null],[17,"NID_setct_CertReqData","","",null,null],[17,"NID_setct_CertReqTBS","","",null,null],[17,"NID_setct_CertResData","","",null,null],[17,"NID_setct_CertInqReqTBS","","",null,null],[17,"NID_setct_ErrorTBS","","",null,null],[17,"NID_setct_PIDualSignedTBE","","",null,null],[17,"NID_setct_PIUnsignedTBE","","",null,null],[17,"NID_setct_AuthReqTBE","","",null,null],[17,"NID_setct_AuthResTBE","","",null,null],[17,"NID_setct_AuthResTBEX","","",null,null],[17,"NID_setct_AuthTokenTBE","","",null,null],[17,"NID_setct_CapTokenTBE","","",null,null],[17,"NID_setct_CapTokenTBEX","","",null,null],[17,"NID_setct_AcqCardCodeMsgTBE","","",null,null],[17,"NID_setct_AuthRevReqTBE","","",null,null],[17,"NID_setct_AuthRevResTBE","","",null,null],[17,"NID_setct_AuthRevResTBEB","","",null,null],[17,"NID_setct_CapReqTBE","","",null,null],[17,"NID_setct_CapReqTBEX","","",null,null],[17,"NID_setct_CapResTBE","","",null,null],[17,"NID_setct_CapRevReqTBE","","",null,null],[17,"NID_setct_CapRevReqTBEX","","",null,null],[17,"NID_setct_CapRevResTBE","","",null,null],[17,"NID_setct_CredReqTBE","","",null,null],[17,"NID_setct_CredReqTBEX","","",null,null],[17,"NID_setct_CredResTBE","","",null,null],[17,"NID_setct_CredRevReqTBE","","",null,null],[17,"NID_setct_CredRevReqTBEX","","",null,null],[17,"NID_setct_CredRevResTBE","","",null,null],[17,"NID_setct_BatchAdminReqTBE","","",null,null],[17,"NID_setct_BatchAdminResTBE","","",null,null],[17,"NID_setct_RegFormReqTBE","","",null,null],[17,"NID_setct_CertReqTBE","","",null,null],[17,"NID_setct_CertReqTBEX","","",null,null],[17,"NID_setct_CertResTBE","","",null,null],[17,"NID_setct_CRLNotificationTBS","","",null,null],[17,"NID_setct_CRLNotificationResTBS","","",null,null],[17,"NID_setct_BCIDistributionTBS","","",null,null],[17,"NID_setext_genCrypt","","",null,null],[17,"NID_setext_miAuth","","",null,null],[17,"NID_setext_pinSecure","","",null,null],[17,"NID_setext_pinAny","","",null,null],[17,"NID_setext_track2","","",null,null],[17,"NID_setext_cv","","",null,null],[17,"NID_set_policy_root","","",null,null],[17,"NID_setCext_hashedRoot","","",null,null],[17,"NID_setCext_certType","","",null,null],[17,"NID_setCext_merchData","","",null,null],[17,"NID_setCext_cCertRequired","","",null,null],[17,"NID_setCext_tunneling","","",null,null],[17,"NID_setCext_setExt","","",null,null],[17,"NID_setCext_setQualf","","",null,null],[17,"NID_setCext_PGWYcapabilities","","",null,null],[17,"NID_setCext_TokenIdentifier","","",null,null],[17,"NID_setCext_Track2Data","","",null,null],[17,"NID_setCext_TokenType","","",null,null],[17,"NID_setCext_IssuerCapabilities","","",null,null],[17,"NID_setAttr_Cert","","",null,null],[17,"NID_setAttr_PGWYcap","","",null,null],[17,"NID_setAttr_TokenType","","",null,null],[17,"NID_setAttr_IssCap","","",null,null],[17,"NID_set_rootKeyThumb","","",null,null],[17,"NID_set_addPolicy","","",null,null],[17,"NID_setAttr_Token_EMV","","",null,null],[17,"NID_setAttr_Token_B0Prime","","",null,null],[17,"NID_setAttr_IssCap_CVM","","",null,null],[17,"NID_setAttr_IssCap_T2","","",null,null],[17,"NID_setAttr_IssCap_Sig","","",null,null],[17,"NID_setAttr_GenCryptgrm","","",null,null],[17,"NID_setAttr_T2Enc","","",null,null],[17,"NID_setAttr_T2cleartxt","","",null,null],[17,"NID_setAttr_TokICCsig","","",null,null],[17,"NID_setAttr_SecDevSig","","",null,null],[17,"NID_set_brand_IATA_ATA","","",null,null],[17,"NID_set_brand_Diners","","",null,null],[17,"NID_set_brand_AmericanExpress","","",null,null],[17,"NID_set_brand_JCB","","",null,null],[17,"NID_set_brand_Visa","","",null,null],[17,"NID_set_brand_MasterCard","","",null,null],[17,"NID_set_brand_Novus","","",null,null],[17,"NID_des_cdmf","","",null,null],[17,"NID_rsaOAEPEncryptionSET","","",null,null],[17,"NID_ipsec3","","",null,null],[17,"NID_ipsec4","","",null,null],[17,"NID_whirlpool","","",null,null],[17,"NID_cryptopro","","",null,null],[17,"NID_cryptocom","","",null,null],[17,"NID_id_GostR3411_94_with_GostR3410_2001","","",null,null],[17,"NID_id_GostR3411_94_with_GostR3410_94","","",null,null],[17,"NID_id_GostR3411_94","","",null,null],[17,"NID_id_HMACGostR3411_94","","",null,null],[17,"NID_id_GostR3410_2001","","",null,null],[17,"NID_id_GostR3410_94","","",null,null],[17,"NID_id_Gost28147_89","","",null,null],[17,"NID_gost89_cnt","","",null,null],[17,"NID_id_Gost28147_89_MAC","","",null,null],[17,"NID_id_GostR3411_94_prf","","",null,null],[17,"NID_id_GostR3410_2001DH","","",null,null],[17,"NID_id_GostR3410_94DH","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_KeyMeshing","","",null,null],[17,"NID_id_Gost28147_89_None_KeyMeshing","","",null,null],[17,"NID_id_GostR3411_94_TestParamSet","","",null,null],[17,"NID_id_GostR3411_94_CryptoProParamSet","","",null,null],[17,"NID_id_Gost28147_89_TestParamSet","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_A_ParamSet","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_B_ParamSet","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_C_ParamSet","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_D_ParamSet","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet","","",null,null],[17,"NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_TestParamSet","","",null,null],[17,"NID_id_GostR3410_94_CryptoPro_A_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_CryptoPro_B_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_CryptoPro_C_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_CryptoPro_D_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_CryptoPro_XchA_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_CryptoPro_XchB_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_CryptoPro_XchC_ParamSet","","",null,null],[17,"NID_id_GostR3410_2001_TestParamSet","","",null,null],[17,"NID_id_GostR3410_2001_CryptoPro_A_ParamSet","","",null,null],[17,"NID_id_GostR3410_2001_CryptoPro_B_ParamSet","","",null,null],[17,"NID_id_GostR3410_2001_CryptoPro_C_ParamSet","","",null,null],[17,"NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet","","",null,null],[17,"NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet","","",null,null],[17,"NID_id_GostR3410_94_a","","",null,null],[17,"NID_id_GostR3410_94_aBis","","",null,null],[17,"NID_id_GostR3410_94_b","","",null,null],[17,"NID_id_GostR3410_94_bBis","","",null,null],[17,"NID_id_Gost28147_89_cc","","",null,null],[17,"NID_id_GostR3410_94_cc","","",null,null],[17,"NID_id_GostR3410_2001_cc","","",null,null],[17,"NID_id_GostR3411_94_with_GostR3410_94_cc","","",null,null],[17,"NID_id_GostR3411_94_with_GostR3410_2001_cc","","",null,null],[17,"NID_id_GostR3410_2001_ParamSet_cc","","",null,null],[17,"NID_camellia_128_cbc","","",null,null],[17,"NID_camellia_192_cbc","","",null,null],[17,"NID_camellia_256_cbc","","",null,null],[17,"NID_id_camellia128_wrap","","",null,null],[17,"NID_id_camellia192_wrap","","",null,null],[17,"NID_id_camellia256_wrap","","",null,null],[17,"NID_camellia_128_ecb","","",null,null],[17,"NID_camellia_128_ofb128","","",null,null],[17,"NID_camellia_128_cfb128","","",null,null],[17,"NID_camellia_192_ecb","","",null,null],[17,"NID_camellia_192_ofb128","","",null,null],[17,"NID_camellia_192_cfb128","","",null,null],[17,"NID_camellia_256_ecb","","",null,null],[17,"NID_camellia_256_ofb128","","",null,null],[17,"NID_camellia_256_cfb128","","",null,null],[17,"NID_camellia_128_cfb1","","",null,null],[17,"NID_camellia_192_cfb1","","",null,null],[17,"NID_camellia_256_cfb1","","",null,null],[17,"NID_camellia_128_cfb8","","",null,null],[17,"NID_camellia_192_cfb8","","",null,null],[17,"NID_camellia_256_cfb8","","",null,null],[17,"NID_kisa","","",null,null],[17,"NID_seed_ecb","","",null,null],[17,"NID_seed_cbc","","",null,null],[17,"NID_seed_cfb128","","",null,null],[17,"NID_seed_ofb128","","",null,null],[17,"NID_hmac","","",null,null],[17,"NID_cmac","","",null,null],[17,"NID_rc4_hmac_md5","","",null,null],[17,"NID_aes_128_cbc_hmac_sha1","","",null,null],[17,"NID_aes_192_cbc_hmac_sha1","","",null,null],[17,"NID_aes_256_cbc_hmac_sha1","","",null,null],[17,"OCSP_NOCERTS","","",null,null],[17,"OCSP_NOINTERN","","",null,null],[17,"OCSP_NOSIGS","","",null,null],[17,"OCSP_NOCHAIN","","",null,null],[17,"OCSP_NOVERIFY","","",null,null],[17,"OCSP_NOEXPLICIT","","",null,null],[17,"OCSP_NOCASIGN","","",null,null],[17,"OCSP_NODELEGATED","","",null,null],[17,"OCSP_NOCHECKS","","",null,null],[17,"OCSP_TRUSTOTHER","","",null,null],[17,"OCSP_RESPID_KEY","","",null,null],[17,"OCSP_NOTIME","","",null,null],[17,"V_OCSP_CERTSTATUS_GOOD","","",null,null],[17,"V_OCSP_CERTSTATUS_REVOKED","","",null,null],[17,"V_OCSP_CERTSTATUS_UNKNOWN","","",null,null],[17,"OCSP_REVOKED_STATUS_NOSTATUS","","",null,null],[17,"OCSP_REVOKED_STATUS_UNSPECIFIED","","",null,null],[17,"OCSP_REVOKED_STATUS_KEYCOMPROMISE","","",null,null],[17,"OCSP_REVOKED_STATUS_CACOMPROMISE","","",null,null],[17,"OCSP_REVOKED_STATUS_AFFILIATIONCHANGED","","",null,null],[17,"OCSP_REVOKED_STATUS_SUPERSEDED","","",null,null],[17,"OCSP_REVOKED_STATUS_CESSATIONOFOPERATION","","",null,null],[17,"OCSP_REVOKED_STATUS_CERTIFICATEHOLD","","",null,null],[17,"OCSP_REVOKED_STATUS_REMOVEFROMCRL","","",null,null],[17,"OCSP_RESPONSE_STATUS_SUCCESSFUL","","",null,null],[17,"OCSP_RESPONSE_STATUS_MALFORMEDREQUEST","","",null,null],[17,"OCSP_RESPONSE_STATUS_INTERNALERROR","","",null,null],[17,"OCSP_RESPONSE_STATUS_TRYLATER","","",null,null],[17,"OCSP_RESPONSE_STATUS_SIGREQUIRED","","",null,null],[17,"OCSP_RESPONSE_STATUS_UNAUTHORIZED","","",null,null],[17,"OPENSSL_EC_NAMED_CURVE","","",null,null],[17,"PKCS5_SALT_LEN","","",null,null],[17,"PKCS12_DEFAULT_ITER","","",null,null],[17,"RSA_F4","","",null,null],[17,"RSA_PKCS1_PADDING","","",null,null],[17,"RSA_SSLV23_PADDING","","",null,null],[17,"RSA_NO_PADDING","","",null,null],[17,"RSA_PKCS1_OAEP_PADDING","","",null,null],[17,"RSA_X931_PADDING","","",null,null],[17,"SSL_CTRL_SET_TMP_DH","","",null,null],[17,"SSL_CTRL_SET_TMP_ECDH","","",null,null],[17,"SSL_CTRL_EXTRA_CHAIN_CERT","","",null,null],[17,"SSL_CTRL_MODE","","",null,null],[17,"SSL_CTRL_SET_READ_AHEAD","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_SERVERNAME_CB","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_HOSTNAME","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE","","",null,null],[17,"SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP","","",null,null],[17,"SSL_CTRL_GET_EXTRA_CHAIN_CERTS","","",null,null],[17,"SSL_MODE_ENABLE_PARTIAL_WRITE","","",null,null],[17,"SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER","","",null,null],[17,"SSL_MODE_AUTO_RETRY","","",null,null],[17,"SSL_MODE_NO_AUTO_CHAIN","","",null,null],[17,"SSL_MODE_RELEASE_BUFFERS","","",null,null],[17,"SSL_MODE_SEND_CLIENTHELLO_TIME","","",null,null],[17,"SSL_MODE_SEND_SERVERHELLO_TIME","","",null,null],[17,"SSL_MODE_SEND_FALLBACK_SCSV","","",null,null],[17,"SSL_ERROR_NONE","","",null,null],[17,"SSL_ERROR_SSL","","",null,null],[17,"SSL_ERROR_SYSCALL","","",null,null],[17,"SSL_ERROR_WANT_ACCEPT","","",null,null],[17,"SSL_ERROR_WANT_CONNECT","","",null,null],[17,"SSL_ERROR_WANT_READ","","",null,null],[17,"SSL_ERROR_WANT_WRITE","","",null,null],[17,"SSL_ERROR_WANT_X509_LOOKUP","","",null,null],[17,"SSL_ERROR_ZERO_RETURN","","",null,null],[17,"SSL_VERIFY_NONE","","",null,null],[17,"SSL_VERIFY_PEER","","",null,null],[17,"SSL_VERIFY_FAIL_IF_NO_PEER_CERT","","",null,null],[17,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","","",null,null],[17,"SSL_OP_ALL","","",null,null],[17,"SSL_OP_NO_QUERY_MTU","","",null,null],[17,"SSL_OP_COOKIE_EXCHANGE","","",null,null],[17,"SSL_OP_NO_TICKET","","",null,null],[17,"SSL_OP_CISCO_ANYCONNECT","","",null,null],[17,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION","","",null,null],[17,"SSL_OP_NO_COMPRESSION","","",null,null],[17,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION","","",null,null],[17,"SSL_OP_CIPHER_SERVER_PREFERENCE","","",null,null],[17,"SSL_OP_TLS_ROLLBACK_BUG","","",null,null],[17,"SSL_OP_NO_SSLv3","","",null,null],[17,"SSL_OP_NO_TLSv1","","",null,null],[17,"SSL_OP_NO_TLSv1_2","","",null,null],[17,"SSL_OP_NO_TLSv1_1","","",null,null],[17,"TLSEXT_NAMETYPE_host_name","","",null,null],[17,"TLSEXT_STATUSTYPE_ocsp","","",null,null],[17,"SSL_TLSEXT_ERR_OK","","",null,null],[17,"SSL_TLSEXT_ERR_ALERT_WARNING","","",null,null],[17,"SSL_TLSEXT_ERR_ALERT_FATAL","","",null,null],[17,"SSL_TLSEXT_ERR_NOACK","","",null,null],[17,"OPENSSL_NPN_UNSUPPORTED","","",null,null],[17,"OPENSSL_NPN_NEGOTIATED","","",null,null],[17,"OPENSSL_NPN_NO_OVERLAP","","",null,null],[17,"V_ASN1_GENERALIZEDTIME","","",null,null],[17,"V_ASN1_UTCTIME","","",null,null],[17,"X509_FILETYPE_ASN1","","",null,null],[17,"X509_FILETYPE_DEFAULT","","",null,null],[17,"X509_FILETYPE_PEM","","",null,null],[17,"X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH","","",null,null],[17,"X509_V_ERR_AKID_SKID_MISMATCH","","",null,null],[17,"X509_V_ERR_APPLICATION_VERIFICATION","","",null,null],[17,"X509_V_ERR_CERT_CHAIN_TOO_LONG","","",null,null],[17,"X509_V_ERR_CERT_HAS_EXPIRED","","",null,null],[17,"X509_V_ERR_CERT_NOT_YET_VALID","","",null,null],[17,"X509_V_ERR_CERT_REJECTED","","",null,null],[17,"X509_V_ERR_CERT_REVOKED","","",null,null],[17,"X509_V_ERR_CERT_SIGNATURE_FAILURE","","",null,null],[17,"X509_V_ERR_CERT_UNTRUSTED","","",null,null],[17,"X509_V_ERR_CRL_HAS_EXPIRED","","",null,null],[17,"X509_V_ERR_CRL_NOT_YET_VALID","","",null,null],[17,"X509_V_ERR_CRL_PATH_VALIDATION_ERROR","","",null,null],[17,"X509_V_ERR_CRL_SIGNATURE_FAILURE","","",null,null],[17,"X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT","","",null,null],[17,"X509_V_ERR_DIFFERENT_CRL_SCOPE","","",null,null],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD","","",null,null],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD","","",null,null],[17,"X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD","","",null,null],[17,"X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD","","",null,null],[17,"X509_V_ERR_EXCLUDED_VIOLATION","","",null,null],[17,"X509_V_ERR_INVALID_CA","","",null,null],[17,"X509_V_ERR_INVALID_EXTENSION","","",null,null],[17,"X509_V_ERR_INVALID_NON_CA","","",null,null],[17,"X509_V_ERR_INVALID_POLICY_EXTENSION","","",null,null],[17,"X509_V_ERR_INVALID_PURPOSE","","",null,null],[17,"X509_V_ERR_KEYUSAGE_NO_CERTSIGN","","",null,null],[17,"X509_V_ERR_KEYUSAGE_NO_CRL_SIGN","","",null,null],[17,"X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE","","",null,null],[17,"X509_V_ERR_NO_EXPLICIT_POLICY","","",null,null],[17,"X509_V_ERR_OUT_OF_MEM","","",null,null],[17,"X509_V_ERR_PATH_LENGTH_EXCEEDED","","",null,null],[17,"X509_V_ERR_PERMITTED_VIOLATION","","",null,null],[17,"X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED","","",null,null],[17,"X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED","","",null,null],[17,"X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN","","",null,null],[17,"X509_V_ERR_SUBJECT_ISSUER_MISMATCH","","",null,null],[17,"X509_V_ERR_SUBTREE_MINMAX","","",null,null],[17,"X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY","","",null,null],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE","","",null,null],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_CRL","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY","","",null,null],[17,"X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE","","",null,null],[17,"X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION","","",null,null],[17,"X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION","","",null,null],[17,"X509_V_ERR_UNNESTED_RESOURCE","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_NAME_SYNTAX","","",null,null],[17,"X509_V_OK","","",null,null],[17,"GEN_OTHERNAME","","",null,null],[17,"GEN_EMAIL","","",null,null],[17,"GEN_DNS","","",null,null],[17,"GEN_X400","","",null,null],[17,"GEN_DIRNAME","","",null,null],[17,"GEN_EDIPARTY","","",null,null],[17,"GEN_URI","","",null,null],[17,"GEN_IPADD","","",null,null],[17,"GEN_RID","","",null,null],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"point_conversion_form_t"}}]],"paths":[[3,"stack_st_ASN1_OBJECT"],[3,"stack_st_X509"],[3,"stack_st_X509_NAME"],[3,"stack_st_X509_ATTRIBUTE"],[3,"stack_st_X509_EXTENSION"],[3,"stack_st_GENERAL_NAME"],[3,"stack_st_void"],[3,"stack_st_SSL_CIPHER"],[3,"stack_st_OPENSSL_STRING"],[3,"_STACK"],[3,"BIO_METHOD"],[3,"RSA"],[3,"DSA"],[3,"EVP_PKEY"],[3,"BIO"],[3,"CRYPTO_EX_DATA"],[3,"EVP_CIPHER"],[3,"BIGNUM"],[3,"DH"],[3,"X509"],[3,"X509_CINF"],[3,"X509_ALGOR"],[3,"ASN1_ENCODING"],[3,"X509_VAL"],[3,"X509_REQ_INFO"],[3,"X509_REQ"],[3,"SSL"],[3,"SSL_CTX"],[3,"SSL_SESSION"],[3,"GENERAL_NAME"],[4,"point_conversion_form_t"]]};
searchIndex["quick_error"] = {"doc":"A macro which makes errors easy to write","items":[[3,"Context","quick_error","",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[8,"ResultExt","","",null,null],[10,"context","","",1,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"quick_error","","Main macro that does all the work",null,null]],"paths":[[3,"Context"],[8,"ResultExt"]]};
searchIndex["quote"] = {"doc":"Quasi-quoting without a Syntex dependency, intended for use with Macros 1.1.","items":[[3,"Tokens","quote","Tokens produced by a `quote!(...)` invocation.",null,null],[3,"ByteStr","","Wrap a `&str` so it interpolates as a byte-string: `b\"abc\"`.",null,null],[12,"0","","",0,null],[3,"Hex","","Wrap an integer so it interpolates as a hexadecimal.",null,null],[12,"0","","",1,null],[3,"Ident","","An identifier that should be interpolated without quotes.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"new","","Empty tokens.",2,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"parse","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",3,null],[11,"new","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a `quote!(...)` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[14,"quote","","The whole point.",null,null]],"paths":[[3,"ByteStr"],[3,"Hex"],[3,"Tokens"],[3,"Ident"],[8,"ToTokens"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",24,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",27,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",27,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["regex"] = {"doc":"This crate provides a native implementation of regular expressions that is heavily based on RE2 both in syntax and in implementation. Notably, backreferences and arbitrary lookahead/lookbehind assertions are not provided. In return, regular expression searching provided by this package has excellent worst-case performance. The specific syntax supported is documented further down.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,null],[13,"InvalidSet","","DEPRECATED: Will be removed on next major version bump.",1,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"Splits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","regex","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",6,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",6,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",6,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",6,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",6,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about submatches.",6,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",6,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",6,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",6,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",6,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",6,null],[11,"shortest_match","","Returns the end location of a match in the text given.",6,null],[11,"as_str","","Returns the original string of this regex.",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",6,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original byte string matched.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't a valid capture group or didn't match anything, then `None` is returned.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in the regular expression.",12,{"inputs":[{"name":"self"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of appearance in the regular expression. Positions are byte indices in terms of the original string matched.",12,{"inputs":[{"name":"self"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group name and the value. The iterator returns these values in arbitrary order.",12,{"inputs":[{"name":"self"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",12,null],[11,"len","","Returns the number of captured groups.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",12,null],[11,"index","","",12,null],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"replace_append","","",2,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","regex","",16,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",16,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",17,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",17,null],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex::bytes","",20,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",20,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",20,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",20,null],[11,"len","","Returns the total number of regular expressions in this set.",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",21,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",21,null],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex","",24,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"from_str","","Attempts to parse a string into a regular expression",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",24,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"findmatches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about submatches.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"findcaptures"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"regexsplits"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"regexsplitsn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"string"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"as_str","","Returns the original string of this regex.",24,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",24,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"reg_replace","","",0,{"inputs":[{"name":"self"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"no_expand","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't a valid capture group or didn't match anything, then `None` is returned.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in the regular expression.",28,{"inputs":[{"name":"self"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of appearance in the regular expression. Positions are byte indices in terms of the original string matched.",28,{"inputs":[{"name":"self"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group name and the value. The iterator returns these values in arbitrary order.",28,{"inputs":[{"name":"self"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`.",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"len","","Returns the number of captured groups.",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"str"}}],[11,"index","","",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"str"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match corresponding to the `caps` capture group.",34,{"inputs":[{"name":"self"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Regex"],[3,"CaptureNames"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for regular expressions. The abstract syntax is defined by the `Expr` type. The concrete syntax is enumerated in the `regex` crate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word character on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word characters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes or grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the least).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings. e.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once. e.g., `(?P<a>.)(?P<a>.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P<>a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence. e.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P<0a>b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the range is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not allowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal sequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be repeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P<a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `u`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the Unicode (`u`) flag was disabled.",4,null],[13,"InvalidUtf8","","InvalidUtf8 indicates that the expression may match non-UTF-8 bytes. This never returned if the parser is permitted to allow expressions that match arbitrary bytes.",4,null],[13,"EmptyClass","","A character class was constructed such that it is empty. e.g., `[^\\d\\D]`.",4,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"ordering"}}],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"limit_class","","Get the character class size limit for this set.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"min_len","","Returns the length of the smallest literal.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"all_complete","","Returns true if all members in this set are complete.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"any_complete","","Returns true if any member in this set is complete.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union","","Unions this set with another set.",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_product","","Extends this set with another set.",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"reverse","","Reverses all members in place.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Clears this set of all members.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was \"cut.\"",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cut","","Cuts this literal.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",6,null],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"repeater"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"classrange"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"ordering"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"byterange"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"ordering"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"exprbuilder"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new builder for configuring expression parsing.",9,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"allow_bytes","","Whether the parser allows matching arbitrary bytes or not.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"exprbuilder"}}],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_anchored_start","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the end of the text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_anchored_end","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions that can match arbitrary bytes.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_iter","","",7,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"new","","Create a new class from an existing set of ranges.",7,{"inputs":[{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given character from the class if it exists.",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"negate","","Negates the character class.",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"case_fold","","Apply case folding to this character class.",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"option"}}],[11,"new","","Create a new class from an existing set of ranges.",8,{"inputs":[{"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",8,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given byte from the class if it exists.",8,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"negate","","Negates the byte class.",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"case_fold","","Apply case folding to this byte class.",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_iter","","",8,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"position","","Returns an approximate character offset at which the error occurred.",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"kind","","Returns the type of the regex parse error.",10,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["reqwest"] = {"doc":"reqwest","items":[[8,"IntoUrl","reqwest","A helper trait to convert common objects into a Url.",null,null],[10,"into_url","","Consumes the object, trying to return a Url.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[4,"HyperError","","A set of errors that can occur parsing HTTP streams.",null,null],[13,"Method","","An invalid `Method`, such as `GE,T`.",1,null],[13,"Uri","","An invalid `RequestUri`, such as `exam ple.domain`.",1,null],[13,"Version","","An invalid `HttpVersion`, such as `HTP/1.1`",1,null],[13,"Header","","An invalid `Header`.",1,null],[13,"TooLarge","","A message head is too large to be reasonable.",1,null],[13,"Status","","An invalid `Status`, such as `1337 ELITE`.",1,null],[13,"Io","","An `io::Error` that occurred while trying to read or write to a network stream.",1,null],[13,"Ssl","","An error from a SSL library.",1,null],[13,"Utf8","","Parsing a field as string failed",1,null],[0,"header","","Headers container, and common header fields.",null,null],[0,"parsing","reqwest::header","Utility functions for Header implementations.",null,null],[5,"from_one_raw_str","reqwest::header::parsing","Reads a single raw string when parsing a header.",null,null],[5,"from_raw_str","","Reads a raw string into a value.",null,null],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec.",null,null],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string.",null,null],[3,"ExtendedValue","","An extended header parameter value (i.e., tagged with a character set and optionally, a language), as defined in RFC 5987.",null,null],[12,"charset","","The character set that is used to encode the `value` to a string.",2,null],[12,"language_tag","","The human language details of the `value`, if available.",2,null],[12,"value","","The parameter value, as expressed in octets.",2,null],[5,"parse_extended_value","","Parses extended header parameter values (`ext-value`), as defined in RFC 5987.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"HTTP_VALUE","","This encode set is used for HTTP header values and is defined at https://tools.ietf.org/html/rfc5987#section-3.2",null,null],[8,"Header","reqwest::header","A trait for any object that will represent a header field and value.",null,null],[10,"header_name","","Returns the name of the header field this belongs to.",3,{"inputs":[],"output":{"name":"str"}}],[10,"parse_header","","Parse a header from a raw stream of bytes.",3,null],[8,"HeaderFormat","","A trait for any object that will represent a header field and value.",null,null],[10,"fmt_header","","Format a header to be output into a TcpStream.",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Headers","","A map of header fields on requests and responses.",null,null],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map.",null,null],[3,"HeaderView","","Returned with the `HeadersItems` iterator.",null,null],[3,"HeaderFormatter","","",null,null],[12,"0","","",5,null],[4,"Range","","`Range` header, defined in RFC7233",null,null],[13,"Bytes","","Byte range",6,null],[13,"Unregistered","","Custom range, with unit not registered at IANA (`other-range-unit`: String , `other-range-set`: String)",6,null],[4,"Vary","","`Vary` header, defined in RFC7231",null,null],[13,"Any","","Any value is a match",7,null],[13,"Items","","Only the listed items are a match",7,null],[4,"CacheDirective","","`CacheControl` contains a list of these directives.",null,null],[13,"NoCache","","\"no-cache\"",8,null],[13,"NoStore","","\"no-store\"",8,null],[13,"NoTransform","","\"no-transform\"",8,null],[13,"OnlyIfCached","","\"only-if-cached\"",8,null],[13,"MaxAge","","\"max-age=delta\"",8,null],[13,"MaxStale","","\"max-stale=delta\"",8,null],[13,"MinFresh","","\"min-fresh=delta\"",8,null],[13,"MustRevalidate","","\"must-revalidate\"",8,null],[13,"Public","","\"public\"",8,null],[13,"Private","","\"private\"",8,null],[13,"ProxyRevalidate","","\"proxy-revalidate\"",8,null],[13,"SMaxAge","","\"s-maxage=delta\"",8,null],[13,"Extension","","Extension directives. Optionally include an argument.",8,null],[3,"Quality","","Represents a quality used in quality values.",null,null],[12,"0","","",9,null],[4,"RangeUnit","","Range Units, described in RFC7233",null,null],[13,"Bytes","","Indicating byte-range requests are supported.",10,null],[13,"None","","Reserved as keyword, indicating no ranges are supported.",10,null],[13,"Unregistered","","The given range unit is not registered at IANA.",10,null],[4,"Preference","","Prefer contains a list of these preferences.",null,null],[13,"RespondAsync","","\"respond-async\"",11,null],[13,"ReturnRepresentation","","\"return=representation\"",11,null],[13,"ReturnMinimal","","\"return=minimal\"",11,null],[13,"HandlingStrict","","\"handling=strict\"",11,null],[13,"HandlingLeniant","","\"handling=leniant\"",11,null],[13,"Wait","","\"wait=delta\"",11,null],[13,"Extension","","Extension preferences. Always has a value, if none is specified it is just \"\". A preference can also have a list of parameters.",11,null],[3,"Expires","","`Expires` header, defined in RFC7234",null,null],[12,"0","","",12,null],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of CORS",null,null],[12,"0","","",13,null],[5,"q","","Convenience function to create a `Quality` from a float.",null,{"inputs":[{"name":"f32"}],"output":{"name":"quality"}}],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of CORS",null,null],[12,"0","","",14,null],[3,"Server","","`Server` header, defined in RFC7231",null,null],[12,"0","","",15,null],[3,"Host","","The `Host` header.",null,null],[12,"hostname","","The hostname, such a example.domain.",16,null],[12,"port","","An optional port number.",16,null],[4,"ConnectionOption","","Values that can be in the `Connection` header.",null,null],[13,"KeepAlive","","The `keep-alive` connection value.",17,null],[13,"Close","","The `close` connection value.",17,null],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",17,null],[3,"ContentEncoding","","`Content-Encoding` header, defined in RFC7231",null,null],[12,"0","","",18,null],[5,"qitem","","Convinience function to wrap a value in a `QualityItem` Sets `q` to the default 1.0",null,{"inputs":[{"name":"t"}],"output":{"name":"qualityitem"}}],[3,"QualityItem","","Represents an item with a quality value as defined in RFC7231.",null,null],[12,"item","","The actual contents of the field.",19,null],[12,"quality","","The quality (client or server preference) for the value.",19,null],[3,"HttpDate","","A `time::Time` with HTTP formatting and parsing",null,null],[12,"0","","",20,null],[3,"UserAgent","","`User-Agent` header, defined in RFC7231",null,null],[12,"0","","",21,null],[3,"ContentType","","`Content-Type` header, defined in RFC7231",null,null],[12,"0","","",22,null],[4,"IfRange","","`If-Range` header, defined in RFC7233",null,null],[13,"EntityTag","","The entity-tag the client has of the resource",23,null],[13,"Date","","The date when the client retrieved the resource",23,null],[4,"IfMatch","","`If-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",24,null],[13,"Items","","Only the listed items are a match",24,null],[4,"DispositionType","","The implied disposition of the content of the HTTP body",null,null],[13,"Inline","","Inline implies default processing",25,null],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally, rather than process it normally (as per its media type).",25,null],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",25,null],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding` or `Accept-Encoding` header.",null,null],[13,"Chunked","","The `chunked` encoding.",26,null],[13,"Gzip","","The `gzip` encoding.",26,null],[13,"Deflate","","The `deflate` encoding.",26,null],[13,"Compress","","The `compress` encoding.",26,null],[13,"Identity","","The `identity` encoding.",26,null],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",26,null],[3,"Allow","","`Allow` header, defined in RFC7231",null,null],[12,"0","","",27,null],[4,"IfNoneMatch","","`If-None-Match` header, defined in RFC7232",null,null],[13,"Any","","Any value is a match",28,null],[13,"Items","","Only the listed items are a match",28,null],[3,"AcceptCharset","","`Accept-Charset` header, defined in RFC7231",null,null],[12,"0","","",29,null],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in RFC7230",null,null],[12,"0","","",30,null],[3,"ContentLength","","`Content-Length` header, defined in RFC7230",null,null],[12,"0","","",31,null],[4,"Charset","","A Mime charset.",null,null],[13,"Us_Ascii","","US ASCII",32,null],[13,"Iso_8859_1","","ISO-8859-1",32,null],[13,"Iso_8859_2","","ISO-8859-2",32,null],[13,"Iso_8859_3","","ISO-8859-3",32,null],[13,"Iso_8859_4","","ISO-8859-4",32,null],[13,"Iso_8859_5","","ISO-8859-5",32,null],[13,"Iso_8859_6","","ISO-8859-6",32,null],[13,"Iso_8859_7","","ISO-8859-7",32,null],[13,"Iso_8859_8","","ISO-8859-8",32,null],[13,"Iso_8859_9","","ISO-8859-9",32,null],[13,"Iso_8859_10","","ISO-8859-10",32,null],[13,"Shift_Jis","","Shift_JIS",32,null],[13,"Euc_Jp","","EUC-JP",32,null],[13,"Iso_2022_Kr","","ISO-2022-KR",32,null],[13,"Euc_Kr","","EUC-KR",32,null],[13,"Iso_2022_Jp","","ISO-2022-JP",32,null],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",32,null],[13,"Iso_8859_6_E","","ISO-8859-6-E",32,null],[13,"Iso_8859_6_I","","ISO-8859-6-I",32,null],[13,"Iso_8859_8_E","","ISO-8859-8-E",32,null],[13,"Iso_8859_8_I","","ISO-8859-8-I",32,null],[13,"Gb2312","","GB2312",32,null],[13,"Big5","","Big5",32,null],[13,"Koi8_R","","KOI8-R",32,null],[13,"Ext","","An arbitrary charset specified as a string",32,null],[3,"EntityTag","","An entity tag, defined in RFC7232",null,null],[12,"weak","","Weakness indicator for the tag",33,null],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in RFC6797",null,null],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as any subdomains of the host's domain name.",34,null],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header field, during which the UA regards the host (from whom the message was received) as a Known HSTS Host.",34,null],[3,"LastModified","","`Last-Modified` header, defined in RFC7232",null,null],[12,"0","","",35,null],[3,"Basic","","Credential holder for Basic Authentication",null,null],[12,"username","","The username as a possibly empty string",36,null],[12,"password","","The password. `None` if the `:` delimiter character was not part of the parsed input.",36,null],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in RFC7232",null,null],[12,"0","","",37,null],[4,"ByteRangeSpec","","Each `Range::Bytes` header can contain one or more `ByteRangeSpecs`. Each `ByteRangeSpec` defines a range of bytes to fetch",null,null],[13,"FromTo","","Get all bytes between x and y (\"x-y\")",38,null],[13,"AllFrom","","Get all bytes starting from x (\"x-\")",38,null],[13,"Last","","Get last x bytes (\"-x\")",38,null],[3,"Upgrade","","`Upgrade` header, defined in RFC7230",null,null],[12,"0","","",39,null],[3,"Authorization","","`Authorization` header, defined in RFC7235",null,null],[12,"0","","",40,null],[8,"Scheme","","An Authorization scheme to be used in the header.",null,null],[10,"scheme","","An optional Scheme name.",41,{"inputs":[],"output":{"name":"option"}}],[10,"fmt_scheme","","Format the Scheme data into a header value.",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header, part of CORS",null,null],[13,"Any","","Allow all origins",42,null],[13,"Null","","A hidden origin",42,null],[13,"Value","","Allow one particular origin",42,null],[3,"Location","","`Location` header, defined in RFC7231",null,null],[12,"0","","",43,null],[3,"ContentLanguage","","`Content-Language` header, defined in RFC7231",null,null],[12,"0","","",44,null],[3,"CacheControl","","`Cache-Control` header, defined in RFC7234",null,null],[12,"0","","",45,null],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in RFC7232",null,null],[12,"0","","",46,null],[3,"Origin","","The `Origin` header.",null,null],[12,"scheme","","The scheme, such as http or https",47,null],[12,"host","","The host, such as Host{hostname: \"hyper.rs\".to_owned(), port: None}",47,null],[3,"Date","","`Date` header, defined in RFC7231",null,null],[12,"0","","",48,null],[4,"ContentRangeSpec","","Content-Range, described in RFC7233",null,null],[13,"Bytes","","Byte range",49,null],[12,"range","reqwest::header::ContentRangeSpec","First and last bytes of the range, omitted if request could not be satisfied",49,null],[12,"instance_length","","Total length of the instance, can be omitted if unknown",49,null],[13,"Unregistered","reqwest::header","Custom range, with unit not registered at IANA",49,null],[12,"unit","reqwest::header::ContentRangeSpec","other-range-unit",49,null],[12,"resp","","other-range-resp",49,null],[3,"AcceptRanges","reqwest::header","`Accept-Ranges` header, defined in RFC7233",null,null],[12,"0","","",50,null],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of CORS",null,null],[12,"0","","",51,null],[3,"From","","`From` header, defined in RFC7231",null,null],[12,"0","","",52,null],[3,"Prefer","","`Prefer` header, defined in RFC7240",null,null],[12,"0","","",53,null],[3,"SetCookie","","`Set-Cookie` header, defined RFC6265",null,null],[12,"0","","",54,null],[3,"Accept","","`Accept` header, defined in RFC7231",null,null],[12,"0","","",55,null],[4,"DispositionParam","","A parameter to the disposition type",null,null],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of bytes representing the filename",56,null],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized parameters.",56,null],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in RFC7231",null,null],[12,"0","","",57,null],[4,"Expect","","The `Expect` header.",null,null],[13,"Continue","","The value `100-continue`.",58,null],[3,"Connection","","`Connection` header, defined in RFC7230",null,null],[12,"0","","",59,null],[3,"ContentRange","","`Content-Range` header, defined in RFC7233",null,null],[12,"0","","",60,null],[3,"Referer","","`Referer` header, defined in RFC7231",null,null],[12,"0","","",61,null],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of CORS",null,null],[12,"0","","",62,null],[3,"PreferenceApplied","","`Preference-Applied` header, defined in RFC7240",null,null],[12,"0","","",63,null],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of CORS",null,null],[12,"0","","",64,null],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of CORS",null,null],[12,"0","","",65,null],[4,"ReferrerPolicy","","`Referrer-Policy` header, part of Referrer Policy",null,null],[13,"NoReferrer","","`no-referrer`",66,null],[13,"NoReferrerWhenDowngrade","","`no-referrer-when-downgrade`",66,null],[13,"SameOrigin","","`same-origin`",66,null],[13,"Origin","","`origin`",66,null],[13,"OriginWhenCrossOrigin","","`origin-when-cross-origin`",66,null],[13,"UnsafeUrl","","`unsafe-url`",66,null],[13,"StrictOrigin","","`strict-origin`",66,null],[13,"StrictOriginWhenCrossOrigin","","`strict-origin-when-cross-origin`",66,null],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in RFC6266",null,null],[12,"disposition","","The disposition",67,null],[12,"parameters","","Disposition parameters",67,null],[3,"Cookie","","`Cookie` header, defined in RFC6265",null,null],[12,"0","","",68,null],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",null,null],[12,"token","","Actual bearer token as a string",69,null],[3,"AcceptLanguage","","`Accept-Language` header, defined in RFC7231",null,null],[12,"0","","",70,null],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of CORS",null,null],[3,"ETag","","`ETag` header, defined in RFC7232",null,null],[12,"0","","",71,null],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",null,null],[12,"name","","The protocol identifier",72,null],[12,"version","","The optional version of the protocol, often in the format \"DIGIT.DIGIT\" (e.g.. \"1.2\")",72,null],[4,"ProtocolName","","A protocol name used to identify a spefic protocol. Names are case-sensitive except for the `WebSocket` value.",null,null],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",73,null],[13,"Tls","","`TLS` value, Transport Layer Security RFC2817",73,null],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol RFC6455",73,null],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",73,null],[13,"Unregistered","","Any other protocol name not known to hyper",73,null],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",null,null],[13,"NoCache","","Corresponds to the `no-cache` value.",74,null],[13,"Ext","","Every value other than `no-cache`.",74,null],[4,"Method","reqwest","The Request Method (VERB)",null,null],[13,"Options","","OPTIONS",75,null],[13,"Get","","GET",75,null],[13,"Post","","POST",75,null],[13,"Put","","PUT",75,null],[13,"Delete","","DELETE",75,null],[13,"Head","","HEAD",75,null],[13,"Trace","","TRACE",75,null],[13,"Connect","","CONNECT",75,null],[13,"Patch","","PATCH",75,null],[13,"Extension","","Method extensions. An example would be `let m = Extension(\"FOO\".to_string())`.",75,null],[4,"StatusCode","","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[13,"Continue","","100 Continue [RFC7231, Section 6.2.1]",76,null],[13,"SwitchingProtocols","","101 Switching Protocols [RFC7231, Section 6.2.2]",76,null],[13,"Processing","","102 Processing [RFC2518]",76,null],[13,"Ok","","200 OK [RFC7231, Section 6.3.1]",76,null],[13,"Created","","201 Created [RFC7231, Section 6.3.2]",76,null],[13,"Accepted","","202 Accepted [RFC7231, Section 6.3.3]",76,null],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information [RFC7231, Section 6.3.4]",76,null],[13,"NoContent","","204 No Content [RFC7231, Section 6.3.5]",76,null],[13,"ResetContent","","205 Reset Content [RFC7231, Section 6.3.6]",76,null],[13,"PartialContent","","206 Partial Content [RFC7233, Section 4.1]",76,null],[13,"MultiStatus","","207 Multi-Status [RFC4918]",76,null],[13,"AlreadyReported","","208 Already Reported [RFC5842]",76,null],[13,"ImUsed","","226 IM Used [RFC3229]",76,null],[13,"MultipleChoices","","300 Multiple Choices [RFC7231, Section 6.4.1]",76,null],[13,"MovedPermanently","","301 Moved Permanently [RFC7231, Section 6.4.2]",76,null],[13,"Found","","302 Found [RFC7231, Section 6.4.3]",76,null],[13,"SeeOther","","303 See Other [RFC7231, Section 6.4.4]",76,null],[13,"NotModified","","304 Not Modified [RFC7232, Section 4.1]",76,null],[13,"UseProxy","","305 Use Proxy [RFC7231, Section 6.4.5]",76,null],[13,"TemporaryRedirect","","307 Temporary Redirect [RFC7231, Section 6.4.7]",76,null],[13,"PermanentRedirect","","308 Permanent Redirect [RFC7238]",76,null],[13,"BadRequest","","400 Bad Request [RFC7231, Section 6.5.1]",76,null],[13,"Unauthorized","","401 Unauthorized [RFC7235, Section 3.1]",76,null],[13,"PaymentRequired","","402 Payment Required [RFC7231, Section 6.5.2]",76,null],[13,"Forbidden","","403 Forbidden [RFC7231, Section 6.5.3]",76,null],[13,"NotFound","","404 Not Found [RFC7231, Section 6.5.4]",76,null],[13,"MethodNotAllowed","","405 Method Not Allowed [RFC7231, Section 6.5.5]",76,null],[13,"NotAcceptable","","406 Not Acceptable [RFC7231, Section 6.5.6]",76,null],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required [RFC7235, Section 3.2]",76,null],[13,"RequestTimeout","","408 Request Timeout [RFC7231, Section 6.5.7]",76,null],[13,"Conflict","","409 Conflict [RFC7231, Section 6.5.8]",76,null],[13,"Gone","","410 Gone [RFC7231, Section 6.5.9]",76,null],[13,"LengthRequired","","411 Length Required [RFC7231, Section 6.5.10]",76,null],[13,"PreconditionFailed","","412 Precondition Failed [RFC7232, Section 4.2]",76,null],[13,"PayloadTooLarge","","413 Payload Too Large [RFC7231, Section 6.5.11]",76,null],[13,"UriTooLong","","414 URI Too Long [RFC7231, Section 6.5.12]",76,null],[13,"UnsupportedMediaType","","415 Unsupported Media Type [RFC7231, Section 6.5.13]",76,null],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable [RFC7233, Section 4.4]",76,null],[13,"ExpectationFailed","","417 Expectation Failed [RFC7231, Section 6.5.14]",76,null],[13,"ImATeapot","","418 I'm a teapot [curiously, not registered by IANA, but RFC2324]",76,null],[13,"MisdirectedRequest","","421 Misdirected Request RFC7540, Section 9.1.2",76,null],[13,"UnprocessableEntity","","422 Unprocessable Entity [RFC4918]",76,null],[13,"Locked","","423 Locked [RFC4918]",76,null],[13,"FailedDependency","","424 Failed Dependency [RFC4918]",76,null],[13,"UpgradeRequired","","426 Upgrade Required [RFC7231, Section 6.5.15]",76,null],[13,"PreconditionRequired","","428 Precondition Required [RFC6585]",76,null],[13,"TooManyRequests","","429 Too Many Requests [RFC6585]",76,null],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large [RFC6585]",76,null],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons [RFC7725]",76,null],[13,"InternalServerError","","500 Internal Server Error [RFC7231, Section 6.6.1]",76,null],[13,"NotImplemented","","501 Not Implemented [RFC7231, Section 6.6.2]",76,null],[13,"BadGateway","","502 Bad Gateway [RFC7231, Section 6.6.3]",76,null],[13,"ServiceUnavailable","","503 Service Unavailable [RFC7231, Section 6.6.4]",76,null],[13,"GatewayTimeout","","504 Gateway Timeout [RFC7231, Section 6.6.5]",76,null],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]",76,null],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates [RFC2295]",76,null],[13,"InsufficientStorage","","507 Insufficient Storage [RFC4918]",76,null],[13,"LoopDetected","","508 Loop Detected [RFC5842]",76,null],[13,"NotExtended","","510 Not Extended [RFC2774]",76,null],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required [RFC6585]",76,null],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",76,null],[4,"HttpVersion","","Represents a version of the HTTP spec.",null,null],[13,"Http09","","`HTTP/0.9`",77,null],[13,"Http10","","`HTTP/1.0`",77,null],[13,"Http11","","`HTTP/1.1`",77,null],[13,"Http20","","`HTTP/2.0`",77,null],[3,"Url","","A parsed URL record.",null,null],[4,"UrlError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",78,null],[13,"IdnaError","","",78,null],[13,"InvalidPort","","",78,null],[13,"InvalidIpv4Address","","",78,null],[13,"InvalidIpv6Address","","",78,null],[13,"InvalidDomainCharacter","","",78,null],[13,"RelativeUrlWithoutBase","","",78,null],[13,"RelativeUrlWithCannotBeABaseBase","","",78,null],[13,"SetHostOnCannotBeABaseUrl","","",78,null],[13,"Overflow","","",78,null],[3,"Client","","A `Client` to make Requests with.",null,null],[3,"Response","","A Response to a submitted `Request`.",null,null],[3,"RequestBuilder","","A builder to construct the properties of a `Request`.",null,null],[3,"Body","","Body type for a request.",null,null],[3,"RedirectPolicy","","A type that controls the policy on how to handle the following of redirects.",null,null],[4,"Error","","The Errors that may occur when processing a `Request`.",null,null],[13,"Http","","An HTTP error from the `hyper` crate.",79,null],[13,"Serialize","","An error trying to serialize a value.",79,null],[13,"TooManyRedirects","","A request tried to redirect too many times.",79,null],[13,"RedirectLoop","","An infinite redirect loop was detected.",79,null],[5,"get","","Shortcut method to quickly make a `GET` request.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Instantiate a `Body` from a reader.",80,{"inputs":[{"name":"r"}],"output":{"name":"body"}}],[11,"from","","",80,{"inputs":[{"name":"vec"}],"output":{"name":"body"}}],[11,"from","","",80,{"inputs":[{"name":"string"}],"output":{"name":"body"}}],[11,"from","","",80,null],[11,"from","","",80,{"inputs":[{"name":"str"}],"output":{"name":"body"}}],[11,"from","","",80,{"inputs":[{"name":"file"}],"output":{"name":"body"}}],[11,"new","","Constructs a new `Client`.",81,{"inputs":[],"output":{"name":"result"}}],[11,"redirect","","Set a `RedirectPolicy` for this client.",81,{"inputs":[{"name":"self"},{"name":"redirectpolicy"}],"output":null}],[11,"get","","Convenience method to make a `GET` request to a URL.",81,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"post","","Convenience method to make a `POST` request to a URL.",81,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"head","","Convenience method to make a `HEAD` request to a URL.",81,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"request","","Start building a `Request` with the `Method` and `Url`.",81,{"inputs":[{"name":"self"},{"name":"method"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header","","Add a `Header` to this Request.",82,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"requestbuilder"}}],[11,"headers","","Add a set of Headers to the existing ones on this Request.",82,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"requestbuilder"}}],[11,"body","","Set the request body.",82,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"requestbuilder"}}],[11,"form","","Send a form body.",82,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"requestbuilder"}}],[11,"json","","Send a JSON body.",82,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"requestbuilder"}}],[11,"send","","Constructs the Request and sends it the target URL, returning a Response.",82,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"status","","Get the `StatusCode`.",83,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"headers","","Get the `Headers`.",83,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"version","","Get the `HttpVersion`.",83,{"inputs":[{"name":"self"}],"output":{"name":"httpversion"}}],[11,"json","","Try and deserialize the response body as JSON.",83,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",83,null],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",79,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",79,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",79,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",79,{"inputs":[{"name":"parseerror"}],"output":{"name":"error"}}],[11,"from","","",79,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",79,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"limited","","Create a RedirectPolicy with a maximum number of redirects.",84,{"inputs":[{"name":"usize"}],"output":{"name":"redirectpolicy"}}],[11,"none","","Create a RedirectPolicy that does not follow any redirect.",84,{"inputs":[],"output":{"name":"redirectpolicy"}}],[11,"custom","","Create a custom RedirectPolicy using the passed function.",84,{"inputs":[{"name":"t"}],"output":{"name":"redirectpolicy"}}],[11,"default","","",84,{"inputs":[],"output":{"name":"redirectpolicy"}}],[6,"Result","","A `Result` alias where the `Err` case is `reqwest::Error`.",null,null],[11,"cmp","","",85,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"ordering"}}],[11,"to_socket_addrs","","",85,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_str","","",85,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"bool"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",85,{"inputs":[{"name":"self"},{"name":"url"}],"output":{"name":"option"}}],[11,"from","","",78,{"inputs":[{"name":"errors"}],"output":{"name":"parseerror"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",85,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"hash","","",85,null],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"index","","",85,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",85,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",85,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",85,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"description","","",78,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_str","","",75,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","reqwest::header","",10,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",36,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",69,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",49,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",16,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",47,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",38,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",34,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",73,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",72,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",32,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",26,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",33,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",20,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"extend","","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","reqwest","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","reqwest::header","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","reqwest::header::parsing","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","reqwest","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"contains","reqwest::header::parsing","",89,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","reqwest::header","",19,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"option"}}],[11,"partial_cmp","reqwest","",76,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"option"}}],[11,"partial_cmp","reqwest::header","",20,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"partial_cmp","reqwest","",77,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":{"name":"option"}}],[11,"default","reqwest::header","",9,{"inputs":[],"output":{"name":"quality"}}],[11,"into_url","reqwest","",85,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",75,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"clone","reqwest::header","",55,{"inputs":[{"name":"self"}],"output":{"name":"accept"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowcredentials"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowheaders"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolallowmethods"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolexposeheaders"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolmaxage"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestheaders"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"accesscontrolrequestmethod"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"acceptcharset"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"acceptencoding"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"acceptlanguage"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"acceptranges"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"rangeunit"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"allow"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"authorization"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"basic"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"bearer"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"cachecontrol"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"cachedirective"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"cookie"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"connectionoption"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"connection"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"dispositiontype"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"dispositionparam"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"contentdisposition"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"contentencoding"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"contentlanguage"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"contentlength"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"contentrange"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"contenttype"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"etag"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"expect"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"expires"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"from"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"ifmatch"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"ifmodifiedsince"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"ifnonematch"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"ifrange"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"ifunmodifiedsince"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"lastmodified"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"location"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"pragma"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"prefer"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"preference"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"preferenceapplied"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"byterangespec"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"referer"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"referrerpolicy"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"server"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"setcookie"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"stricttransportsecurity"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"transferencoding"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"upgrade"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"protocolname"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"protocol"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"useragent"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vary"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"charset"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"quality"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"qualityitem"}}],[11,"clone","reqwest::header::parsing","",2,{"inputs":[{"name":"self"}],"output":{"name":"extendedvalue"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"http_value"}}],[11,"clone","reqwest::header","",86,{"inputs":[{"name":"self"}],"output":{"name":"headers"}}],[11,"clone","reqwest","",77,{"inputs":[{"name":"self"}],"output":{"name":"httpversion"}}],[11,"next","reqwest::header","",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref","","",40,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref","","",55,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",51,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",62,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",64,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"deref","","",65,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"safe","reqwest","Whether a method is considered \"safe\", meaning the request is essentially read-only.",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"idempotent","","Whether a method is considered \"idempotent\", meaning the request has the same result is executed multiple times.",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deref","reqwest::header","",14,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"deref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",70,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",50,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",68,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",59,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",44,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"deref","","",60,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"deref","","",22,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"deref","","",48,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"new","","Constructs a new EntityTag. # Panics If the tag contains invalid characters.",33,{"inputs":[{"name":"bool"},{"name":"string"}],"output":{"name":"entitytag"}}],[11,"weak","","Constructs a new weak EntityTag. # Panics If the tag contains invalid characters.",33,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"strong","","Constructs a new strong EntityTag. # Panics If the tag contains invalid characters.",33,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"tag","","Get the tag.",33,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"set_tag","","Set the tag. # Panics If the tag contains invalid characters.",33,null],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.",33,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their opaque-tags match character-by-character, regardless of either or both being tagged as \"weak\".",33,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",33,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",33,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"deref","","",71,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"deref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",46,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",37,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",35,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref","","",43,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",53,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",63,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",61,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref","","",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",40,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",55,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",51,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",62,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",64,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"deref_mut","","",65,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",14,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"deref_mut","","",29,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",57,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",70,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",50,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",27,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",68,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",59,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",44,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"deref_mut","","",60,{"inputs":[{"name":"self"}],"output":{"name":"contentrangespec"}}],[11,"deref_mut","","",22,{"inputs":[{"name":"self"}],"output":{"name":"mime"}}],[11,"deref_mut","","",48,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",71,{"inputs":[{"name":"self"}],"output":{"name":"entitytag"}}],[11,"deref_mut","","",12,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",52,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",46,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",37,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",35,{"inputs":[{"name":"self"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",43,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",53,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",63,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",61,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",15,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deref_mut","","",54,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",30,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",39,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",21,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"headers"}],"output":{"name":"bool"}}],[11,"eq","reqwest","",76,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"method"}],"output":{"name":"bool"}}],[11,"eq","reqwest::header","",55,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"accesscontrolallowcredentials"}],"output":{"name":"bool"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"expect"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"from"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"location"}],"output":{"name":"bool"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"referrerpolicy"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"server"}],"output":{"name":"bool"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"eq","reqwest::header::parsing","",2,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"eq","reqwest","",77,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"from_iter","reqwest::header","",86,{"inputs":[{"name":"i"}],"output":{"name":"headers"}}],[11,"scheme","","",36,{"inputs":[],"output":{"name":"option"}}],[11,"fmt_scheme","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scheme","","",69,{"inputs":[],"output":{"name":"option"}}],[11,"fmt_scheme","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","reqwest","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"parseerror"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"utf8error"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt_header","reqwest::header","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_multi_header","","",54,{"inputs":[{"name":"self"},{"name":"multilineformatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt_header","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"header_name","","",88,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",88,null],[11,"header_name","","",42,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",42,null],[11,"header_name","","",40,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",40,null],[11,"header_name","","",45,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",45,null],[11,"header_name","","",68,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",68,null],[11,"header_name","","",67,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",67,null],[11,"header_name","","",31,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",31,null],[11,"header_name","","",58,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",58,null],[11,"header_name","","",16,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",16,null],[11,"header_name","","",23,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",23,null],[11,"header_name","","",47,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",47,null],[11,"header_name","","",74,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",74,null],[11,"header_name","","",53,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",53,null],[11,"header_name","","",63,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",63,null],[11,"header_name","","",6,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",6,null],[11,"header_name","","",66,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",66,null],[11,"header_name","","",54,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",54,null],[11,"header_name","","",34,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",34,null],[11,"header_name","","",55,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",55,null],[11,"header_name","","",51,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",51,null],[11,"header_name","","",62,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",62,null],[11,"header_name","","",64,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",64,null],[11,"header_name","","",13,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",13,null],[11,"header_name","","",65,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",65,null],[11,"header_name","","",14,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",14,null],[11,"header_name","","",29,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",29,null],[11,"header_name","","",57,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",57,null],[11,"header_name","","",70,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",70,null],[11,"header_name","","",50,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",50,null],[11,"header_name","","",27,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",27,null],[11,"header_name","","",59,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",59,null],[11,"header_name","","",18,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",18,null],[11,"header_name","","",44,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",44,null],[11,"header_name","","",60,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",60,null],[11,"header_name","","",22,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",22,null],[11,"header_name","","",48,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",48,null],[11,"header_name","","",71,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",71,null],[11,"header_name","","",12,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",12,null],[11,"header_name","","",52,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",52,null],[11,"header_name","","",24,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",24,null],[11,"header_name","","",46,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",46,null],[11,"header_name","","",28,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",28,null],[11,"header_name","","",37,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",37,null],[11,"header_name","","",35,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",35,null],[11,"header_name","","",43,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",43,null],[11,"header_name","","",61,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",61,null],[11,"header_name","","",15,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",15,null],[11,"header_name","","",30,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",30,null],[11,"header_name","","",39,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",39,null],[11,"header_name","","",21,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",21,null],[11,"header_name","","",7,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",7,null],[11,"fmt","reqwest","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","reqwest::header","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","reqwest::header::parsing","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","reqwest::header","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","reqwest","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","reqwest::header","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","reqwest","",75,null],[11,"hash","","",76,null],[11,"hash","","",77,null],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",76,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"ordering"}}],[11,"cmp","reqwest::header","",20,{"inputs":[{"name":"self"},{"name":"httpdate"}],"output":{"name":"ordering"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"quality"}],"output":{"name":"ordering"}}],[11,"cmp","reqwest","",77,{"inputs":[{"name":"self"},{"name":"httpversion"}],"output":{"name":"ordering"}}],[11,"new","reqwest::header","Creates a new, empty headers map.",86,{"inputs":[],"output":{"name":"headers"}}],[11,"set","","Set a header field to the corresponding value.",86,null],[11,"get_raw","","Access the raw value of a header.",86,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",86,null],[11,"append_raw","","Append a value to raw value of this header.",86,null],[11,"remove_raw","","Remove a header set by set_raw",86,null],[11,"get","","Get a reference to the header field's value, if it exists.",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the header field's value, if it exists.",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has","","Returns a boolean of whether a certain header is in the map.",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"remove","","Removes a header from the map, if one existed. Returns true if a header has been removed.",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the header fields.",86,{"inputs":[{"name":"self"}],"output":{"name":"headersitems"}}],[11,"len","","Returns the number of headers in the map.",86,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","Remove all headers from the map.",86,null],[11,"is","","Check if a HeaderView is a certain Header.",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"name","","Get the Header name as a slice.",87,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"value","","Cast the value to a certain Header type.",87,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"value_string","","Get just the header value as a String.",87,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"bytes","","Get the most common byte range header (\"bytes=from-to\")",6,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"range"}}],[11,"bytes_multi","","Get byte range header with multiple subranges (\"bytes=from1-to1,from2-to2,fromX-toX\")",6,{"inputs":[{"name":"vec"}],"output":{"name":"range"}}],[11,"new","","Creates a new `QualityItem` from an item and a quality. The item can be of any type. The quality should be a value in the range [0, 1].",19,{"inputs":[{"name":"t"},{"name":"quality"}],"output":{"name":"qualityitem"}}],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",22,{"inputs":[],"output":{"name":"contenttype"}}],[11,"plaintext","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",22,{"inputs":[],"output":{"name":"contenttype"}}],[11,"html","","A constructor  to easily create a `Content-Type: text/html; charset=utf-8` header.",22,{"inputs":[],"output":{"name":"contenttype"}}],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",22,{"inputs":[],"output":{"name":"contenttype"}}],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",22,{"inputs":[],"output":{"name":"contenttype"}}],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",22,{"inputs":[],"output":{"name":"contenttype"}}],[11,"including_subdomains","","Create an STS header that includes subdomains",34,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",34,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"new","","Creates a new `Origin` header.",47,{"inputs":[{"name":"s"},{"name":"h"},{"name":"option"}],"output":{"name":"origin"}}],[11,"star","","A constructor to easily create `Accept: */*`.",55,{"inputs":[],"output":{"name":"accept"}}],[11,"json","","A constructor to easily create `Accept: application/json`.",55,{"inputs":[],"output":{"name":"accept"}}],[11,"text","","A constructor to easily create `Accept: text/*`.",55,{"inputs":[],"output":{"name":"accept"}}],[11,"image","","A constructor to easily create `Accept: image/*`.",55,{"inputs":[],"output":{"name":"accept"}}],[11,"close","","A constructor to easily create a `Connection: close` header.",59,{"inputs":[],"output":{"name":"connection"}}],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",59,{"inputs":[],"output":{"name":"connection"}}],[11,"new","","Creates a new Protocol with the given name and version",72,{"inputs":[{"name":"protocolname"},{"name":"option"}],"output":{"name":"protocol"}}],[11,"canonical_reason","reqwest","Get the standardised `reason-phrase` for this status code.",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"class","","Determine the class of a status code, based on its first digit.",76,{"inputs":[{"name":"self"}],"output":{"name":"statusclass"}}],[11,"is_informational","","Check if class is Informational.",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_success","","Check if class is Success.",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_redirection","","Check if class is Redirection.",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_client_error","","Check if class is ClientError.",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_server_error","","Check if class is ServerError.",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_strange_status","","Check if class is NoClass",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parse","","Parse an absolute URL from a string.",85,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",85,{"inputs":[{"name":"str"},{"name":"i"}],"output":{"name":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",85,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",85,{"inputs":[],"output":{"name":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",85,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","Return the serialization of this URL.",85,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",85,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",85,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",85,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_host","","Equivalent to `url.host().is_some()`.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port","","Return the port number for this URL, if any.",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",85,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",85,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"fragment","","Return this URL’s fragment identifier, if any.",85,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_fragment","","Change this URL’s fragment identifier.",85,null],[11,"set_query","","Change this URL’s query string.",85,null],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",85,{"inputs":[{"name":"self"}],"output":{"name":"serializer"}}],[11,"set_path","","Change this URL’s path.",85,null],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",85,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_port","","Change this URL’s port number.",85,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_host","","Change this URL’s host.",85,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_ip_host","","Change this URL’s host to the given IP address.",85,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_password","","Change this URL’s password.",85,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_username","","Change this URL’s username.",85,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_scheme","","Change this URL’s scheme.",85,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",85,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",85,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",85,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[8,"IntoUrl"],[4,"HyperError"],[3,"ExtendedValue"],[8,"Header"],[8,"HeaderFormat"],[3,"HeaderFormatter"],[4,"Range"],[4,"Vary"],[4,"CacheDirective"],[3,"Quality"],[4,"RangeUnit"],[4,"Preference"],[3,"Expires"],[3,"AccessControlMaxAge"],[3,"AccessControlRequestMethod"],[3,"Server"],[3,"Host"],[4,"ConnectionOption"],[3,"ContentEncoding"],[3,"QualityItem"],[3,"HttpDate"],[3,"UserAgent"],[3,"ContentType"],[4,"IfRange"],[4,"IfMatch"],[4,"DispositionType"],[4,"Encoding"],[3,"Allow"],[4,"IfNoneMatch"],[3,"AcceptCharset"],[3,"TransferEncoding"],[3,"ContentLength"],[4,"Charset"],[3,"EntityTag"],[3,"StrictTransportSecurity"],[3,"LastModified"],[3,"Basic"],[3,"IfUnmodifiedSince"],[4,"ByteRangeSpec"],[3,"Upgrade"],[3,"Authorization"],[8,"Scheme"],[4,"AccessControlAllowOrigin"],[3,"Location"],[3,"ContentLanguage"],[3,"CacheControl"],[3,"IfModifiedSince"],[3,"Origin"],[3,"Date"],[4,"ContentRangeSpec"],[3,"AcceptRanges"],[3,"AccessControlAllowHeaders"],[3,"From"],[3,"Prefer"],[3,"SetCookie"],[3,"Accept"],[4,"DispositionParam"],[3,"AcceptEncoding"],[4,"Expect"],[3,"Connection"],[3,"ContentRange"],[3,"Referer"],[3,"AccessControlAllowMethods"],[3,"PreferenceApplied"],[3,"AccessControlExposeHeaders"],[3,"AccessControlRequestHeaders"],[4,"ReferrerPolicy"],[3,"ContentDisposition"],[3,"Cookie"],[3,"Bearer"],[3,"AcceptLanguage"],[3,"ETag"],[3,"Protocol"],[4,"ProtocolName"],[4,"Pragma"],[4,"Method"],[4,"StatusCode"],[4,"HttpVersion"],[4,"UrlError"],[4,"Error"],[3,"Body"],[3,"Client"],[3,"RequestBuilder"],[3,"Response"],[3,"RedirectPolicy"],[3,"Url"],[3,"Headers"],[3,"HeaderView"],[3,"AccessControlAllowCredentials"],[3,"HTTP_VALUE"],[3,"HeadersItems"]]};
searchIndex["rustc_demangle"] = {"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",null,null],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when demangling fails.",null,null],[5,"demangle","","De-mangles a Rust symbol into a more readable version",null,{"inputs":[{"name":"str"}],"output":{"name":"demangle"}}],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the string does not appear to be a Rust symbol, rather than \"demangling\" the given string as a no-op.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"trydemangleerror"}}],[11,"as_str","","Returns the underlying string that's being demangled.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"TryDemangleError"],[3,"Demangle"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"newline"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"encodererror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",17,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",17,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","Read a usize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_isize","","Read a isize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_bool","","Read a bool value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_char","","Read a char value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_str","","Read a string value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","Read an struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","Read an optional value.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","Emit a char value.",26,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","Emit a string value.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["serde"] = {"doc":"Serde","items":[[0,"bytes","serde","Wrapper types to enable optimized handling of `&[u8]` and `Vec<u8>`.",null,null],[3,"ByteBuf","serde::bytes","Wraps a `Vec<u8>` in order to serialize and deserialize in an efficient way.",null,null],[3,"Bytes","","Wraps a `&[u8]` in order to serialize in an efficient way. Does not support deserialization.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bytebuf"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"ordering"}}],[11,"new","","Construct a new, empty `ByteBuf`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Wrap existing bytes in a `ByteBuf`.",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","","",0,null],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"new","","Wrap an existing `&[u8]`.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,null],[11,"from","","",1,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",1,null],[11,"deref","","",1,null],[11,"serialize","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[0,"de","serde","Generic data structure deserialization framework.",null,null],[4,"Unexpected","serde::de","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",2,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",2,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",2,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",2,null],[13,"Char","","The input contained a `char` that was not expected.",2,null],[13,"Str","","The input contained a `&str` or `String` that was not expected.",2,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",2,null],[13,"Unit","","The input contained a unit `()` that was not expected.",2,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",2,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",2,null],[13,"Seq","","The input contained a sequence that was not expected.",2,null],[13,"Map","","The input contained a map that was not expected.",2,null],[13,"Enum","","The input contained an enum that was not expected.",2,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",2,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",2,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",2,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",2,null],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",2,null],[0,"value","","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"Error","serde::de::value","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[3,"UnitDeserializer","","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"CowStrDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec<u8>`.",null,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",3,null],[10,"into_deserializer","","Convert this value into a deserializer.",3,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"custom","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deserialize_bool","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",5,null],[11,"deserialize_struct_field","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",5,null],[11,"deserialize_ignored_any","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",6,null],[11,"deserialize_struct_field","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",6,null],[11,"deserialize_ignored_any","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",7,null],[11,"deserialize_struct_field","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",7,null],[11,"deserialize_ignored_any","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",8,null],[11,"deserialize_struct_field","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",8,null],[11,"deserialize_ignored_any","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",9,null],[11,"deserialize_struct_field","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",9,null],[11,"deserialize_ignored_any","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",10,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",10,null],[11,"deserialize_struct_field","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",10,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",10,null],[11,"deserialize_ignored_any","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",11,null],[11,"deserialize_struct_field","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",11,null],[11,"deserialize_ignored_any","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",12,null],[11,"deserialize_struct_field","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",12,null],[11,"deserialize_ignored_any","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",13,null],[11,"deserialize_struct_field","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",13,null],[11,"deserialize_ignored_any","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",14,null],[11,"deserialize_struct_field","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",14,null],[11,"deserialize_ignored_any","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",15,null],[11,"deserialize_struct_field","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",15,null],[11,"deserialize_ignored_any","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",16,null],[11,"deserialize_struct_field","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",16,null],[11,"deserialize_ignored_any","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",17,null],[11,"deserialize_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",17,null],[11,"deserialize_ignored_any","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",18,null],[11,"deserialize_struct_field","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",18,null],[11,"deserialize_ignored_any","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_struct_field","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",19,null],[11,"visit_variant_seed","","",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"deserialize","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",20,null],[11,"deserialize_bool","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",20,null],[11,"deserialize_struct_field","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_variant_seed","","",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"deserialize","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",21,null],[11,"deserialize_bool","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",21,null],[11,"deserialize_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_variant_seed","","",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"deserialize","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",22,null],[11,"deserialize_bool","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",22,null],[11,"deserialize_struct_field","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_variant_seed","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I>`.",23,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",23,null],[11,"deserialize_struct_field","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",23,null],[11,"deserialize_ignored_any","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_seed","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"size_hint","","",23,null],[11,"new","","Construct a new `SeqVisitorDeserializer<V_, E>`.",24,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",24,null],[11,"deserialize_struct_field","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",24,null],[11,"deserialize_ignored_any","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, K, V, E>`.",25,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize","","",25,{"inputs":[{"name":"self"},{"name":"v_"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",25,{"inputs":[{"name":"self"},{"name":"v_"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v_"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",25,null],[11,"deserialize_struct_field","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",25,null],[11,"deserialize_ignored_any","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_key_seed","","",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_value_seed","","",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_seed","","",25,{"inputs":[{"name":"self"},{"name":"tk"},{"name":"tv"}],"output":{"name":"result"}}],[11,"size_hint","","",25,null],[11,"visit_seed","","",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"size_hint","","",25,null],[11,"new","","Construct a new `MapVisitorDeserializer<V_, E>`.",26,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",26,null],[11,"deserialize_struct_field","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",26,null],[11,"deserialize_ignored_any","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",1,{"inputs":[{"name":"self"}],"output":{"name":"bytesdeserializer"}}],[11,"deserialize","serde::de::value","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",27,null],[11,"deserialize_struct_field","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",27,null],[11,"deserialize_ignored_any","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",0,null],[11,"deserialize","serde::de::value","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",28,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",28,null],[11,"deserialize_struct_field","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",28,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",28,null],[11,"deserialize_ignored_any","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[8,"Error","serde::de","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",29,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",29,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",29,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",29,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",29,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",29,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",29,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",29,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",32,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",32,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,null],[10,"deserialize","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq_fixed_size","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a tuple value with a particular number of elements.",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,null],[10,"deserialize_struct_field","","Hint that the `Deserialize` type is expecting the name of a struct field.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,null],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",34,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","Deserialize a `bool` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i8","","Deserialize an `i8` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","Deserialize an `i16` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","Deserialize an `i32` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","Deserialize an `i64` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u8","","Deserialize a `u8` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","Deserialize a `u16` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","Deserialize a `u32` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","Deserialize a `u64` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","Deserialize a `f32` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","Deserialize a `f64` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","Deserialize a `char` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","Deserialize a `&str` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","Deserialize a `String` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_unit","","Deserialize a `()` into a `Value`.",34,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_none","","Deserialize an absent optional `Value`.",34,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","Deserialize a present optional `Value`.",34,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","Deserialize `Value` as a newtype struct.",34,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","Deserialize `Value` as a sequence of elements.",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map","","Deserialize `Value` as a key-value map.",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_enum","","Deserialize `Value` as an enum.",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","Deserialize a `&[u8]` into a `Value`.",34,null],[11,"visit_byte_buf","","Deserialize a `Vec<u8>` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",35,null],[10,"visit_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",35,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",36,null],[10,"visit_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"result"}}],[10,"visit_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_value","","This returns a `Ok(value)` for the next value in the map.",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",36,null],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` in order to identify which variant of an enum to deserialize.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",37,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",37,null],[10,"visit_variant_seed","","`visit_variant` is called to identify which variant to deserialize.",37,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumVisitor`.",38,null],[10,"visit_unit","","Called when deserializing a variant with no values.",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"visit_newtype_seed","","Called when deserializing a variant with a single value.",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_newtype","","Called when deserializing a variant with a single value.",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"visit_tuple","","Called when deserializing a tuple-like variant.",38,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"visit_struct","","Called when deserializing a struct-like variant.",38,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"unexpected"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[11,"serialize_element","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_element","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_key","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",39,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",39,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Raised when a `Serialize` implementation encounters a general error while serializing a type.",40,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",41,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an `io::Write` or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",42,null],[16,"Error","","The error type when some error occurs during serialization.",42,null],[16,"SerializeSeq","","Type returned from `serialize_seq` and `serialize_seq_fixed_size` for serializing the content of the sequence.",42,null],[16,"SerializeTuple","","Type returned from `serialize_tuple` for serializing the content of the tuple.",42,null],[16,"SerializeTupleStruct","","Type returned from `serialize_tuple_struct` for serializing the content of the tuple struct.",42,null],[16,"SerializeTupleVariant","","Type returned from `serialize_tuple_variant` for serializing the content of the tuple variant.",42,null],[16,"SerializeMap","","Type returned from `serialize_map` for serializing the content of the map.",42,null],[16,"SerializeStruct","","Type returned from `serialize_struct` for serializing the content of the struct.",42,null],[16,"SerializeStructVariant","","Type returned from `serialize_struct_variant` for serializing the content of the struct variant.",42,null],[10,"serialize_bool","","Serialize a `bool` value.",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",42,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",42,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",42,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",42,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",42,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",42,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",42,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",42,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",42,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",42,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",42,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",42,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",42,null],[10,"serialize_none","","Serialize a `None` value.",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a `Some(T)` value.",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",42,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a dynamically sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_seq_fixed_size","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a tuple. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq` and `Serializer::serialize_seq_fixed_size`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",43,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",43,null],[10,"serialize_element","","Serialize a sequence element.",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a sequence.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,null],[10,"serialize_element","","Serialize a tuple element.",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple.",44,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,null],[10,"serialize_field","","Serialize a tuple struct field.",45,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple struct.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,null],[10,"serialize_field","","Serialize a tuple variant field.",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple variant.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,null],[10,"serialize_key","","Serialize a map key.",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_value","","Serialize a map value.",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",47,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a map.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,null],[10,"serialize_field","","Serialize a struct field.",48,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct.",48,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,null],[10,"serialize_field","","Serialize a struct variant field.",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct variant.",49,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Serialize","serde","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",41,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an `io::Write` or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",42,null],[16,"Error","","The error type when some error occurs during serialization.",42,null],[16,"SerializeSeq","","Type returned from `serialize_seq` and `serialize_seq_fixed_size` for serializing the content of the sequence.",42,null],[16,"SerializeTuple","","Type returned from `serialize_tuple` for serializing the content of the tuple.",42,null],[16,"SerializeTupleStruct","","Type returned from `serialize_tuple_struct` for serializing the content of the tuple struct.",42,null],[16,"SerializeTupleVariant","","Type returned from `serialize_tuple_variant` for serializing the content of the tuple variant.",42,null],[16,"SerializeMap","","Type returned from `serialize_map` for serializing the content of the map.",42,null],[16,"SerializeStruct","","Type returned from `serialize_struct` for serializing the content of the struct.",42,null],[16,"SerializeStructVariant","","Type returned from `serialize_struct_variant` for serializing the content of the struct variant.",42,null],[10,"serialize_bool","","Serialize a `bool` value.",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",42,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",42,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",42,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",42,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",42,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",42,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",42,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",42,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",42,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",42,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",42,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",42,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",42,null],[10,"serialize_none","","Serialize a `None` value.",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a `Some(T)` value.",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",42,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a dynamically sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_seq_fixed_size","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a tuple. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,null],[10,"deserialize","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq_fixed_size","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a tuple value with a particular number of elements.",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,null],[10,"deserialize_struct_field","","Hint that the `Deserialize` type is expecting the name of a struct field.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,null],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[14,"forward_to_deserialize","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",null,null]],"paths":[[3,"ByteBuf"],[3,"Bytes"],[4,"Unexpected"],[8,"ValueDeserializer"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serde_codegen_internals"] = {"doc":"","items":[[3,"Ctxt","serde_codegen_internals","",null,null],[0,"ast","","",null,null],[3,"Item","serde_codegen_internals::ast","",null,null],[12,"ident","","",0,null],[12,"attrs","","",0,null],[12,"body","","",0,null],[12,"generics","","",0,null],[3,"Variant","","",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"style","","",1,null],[12,"fields","","",1,null],[3,"Field","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"ty","","",2,null],[4,"Body","","",null,null],[13,"Enum","","",3,null],[13,"Struct","","",3,null],[4,"Style","","",null,null],[13,"Struct","","",4,null],[13,"Tuple","","",4,null],[13,"Newtype","","",4,null],[13,"Unit","","",4,null],[11,"from_ast","","",0,{"inputs":[{"name":"ctxt"},{"name":"macroinput"}],"output":{"name":"item"}}],[11,"all_fields","","",3,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[0,"attr","serde_codegen_internals","",null,null],[3,"Name","serde_codegen_internals::attr","",null,null],[3,"Item","","Represents container (e.g. struct) attribute information",null,null],[3,"Variant","","Represents variant attribute information",null,null],[3,"Field","","Represents field attribute information",null,null],[4,"RenameRule","","",null,null],[13,"None","","Don't apply a default rename rule.",5,null],[13,"PascalCase","","Rename direct children to \"PascalCase\" style, as typically used for enum variants.",5,null],[13,"CamelCase","","Rename direct children to \"camelCase\" style.",5,null],[13,"SnakeCase","","Rename direct children to \"snake_case\" style, as commonly used for fields.",5,null],[13,"ScreamingSnakeCase","","Rename direct children to \"SCREAMING_SNAKE_CASE\" style, as commonly used for constants.",5,null],[13,"KebabCase","","Rename direct children to \"kebab-case\" style.",5,null],[4,"EnumTag","","Styles of representing an enum.",null,null],[13,"External","","The default.",6,null],[13,"Internal","","`#[serde(tag = \"type\")]`",6,null],[12,"tag","serde_codegen_internals::attr::EnumTag","",6,null],[13,"Adjacent","serde_codegen_internals::attr","`#[serde(tag = \"t\", content = \"c\")]`",6,null],[12,"tag","serde_codegen_internals::attr::EnumTag","",6,null],[12,"content","","",6,null],[13,"None","serde_codegen_internals::attr","`#[serde(untagged)]`",6,null],[4,"Default","","Represents the default to use for a field when deserializing.",null,null],[13,"None","","Field must always be specified because it does not have a default.",7,null],[13,"Default","","The default is given by `std::default::Default::default()`.",7,null],[13,"Path","","The default is given by this function.",7,null],[5,"get_serde_meta_items","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize_name","","Return the container name for the container when serializing.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deserialize_name","","Return the container name for the container when deserializing.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from an item.",9,{"inputs":[{"name":"ctxt"},{"name":"macroinput"}],"output":{"name":"self"}}],[11,"name","","",9,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_all","","",9,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"deny_unknown_fields","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",9,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"ser_bound","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tag","","",9,{"inputs":[{"name":"self"}],"output":{"name":"enumtag"}}],[11,"from_type","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_type","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","",10,{"inputs":[{"name":"ctxt"},{"name":"variant"}],"output":{"name":"self"}}],[11,"name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",10,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"rename_all","","",10,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"skip_deserializing","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from a struct field.",11,{"inputs":[{"name":"ctxt"},{"name":"usize"},{"name":"field"}],"output":{"name":"self"}}],[11,"name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",11,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"skip_serializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_deserializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing_if","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","","",11,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"serialize_with","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize_with","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ser_bound","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","serde_codegen_internals","",12,{"inputs":[],"output":{"name":"ctxt"}}],[11,"new","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"error","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"check","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","serde_codegen_internals::attr","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":{"name":"bool"}}],[11,"apply_to_variant","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"apply_to_field","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Item"],[3,"Variant"],[3,"Field"],[4,"Body"],[4,"Style"],[4,"RenameRule"],[4,"EnumTag"],[4,"Default"],[3,"Name"],[3,"Item"],[3,"Variant"],[3,"Field"],[3,"Ctxt"]]};
searchIndex["serde_derive"] = {"doc":"","items":[[5,"derive_serialize","serde_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_deserialize","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["serde_json"] = {"doc":"Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[3,"Error","","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[3,"Serializer","","A structure for serializing Rust values into JSON.",null,null],[3,"Map","","Represents a JSON key/value type.",null,null],[3,"Number","","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"from_iter","","Deserialize an instance of type `T` from an iterator over bytes of JSON.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"de","","Deserialize JSON data to a Rust data structure.",null,null],[3,"IoRead","serde_json::de","JSON input source that reads from a std::io input stream.",null,null],[3,"IteratorRead","","JSON input source that reads from an iterator of bytes.",null,null],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",null,null],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",null,null],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[5,"from_iter","","Deserialize an instance of type `T` from an iterator over bytes of JSON.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually \"specialized\" for iterating over &[u8]. Once feature(specialization) is stable we can use actual specialization.",null,null],[11,"new","","Create a JSON deserializer from one of the possible serde_json input sources.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_iter","","Creates a JSON deserializer from a `std::iter::Iterator`.",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_slice","","Creates a JSON deserializer from a `&[u8]`.",1,null],[11,"from_str","","Creates a JSON deserializer from a `&str`.",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",1,{"inputs":[{"name":"self"}],"output":{"name":"streamdeserializer"}}],[11,"new","","Create a JSON stream deserializer from one of the possible serde_json input sources.",2,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",null,null],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[4,"Category","","Categorizes the cause of a `serde_json::Error`.",null,null],[13,"Io","","The error was caused by a failure to read or write bytes on an IO stream.",3,null],[13,"Syntax","","The error was caused by input that was not syntactically valid JSON.",3,null],[13,"Data","","The error was caused by input data that was semantically incorrect.",3,null],[13,"Eof","","The error was caused by prematurely reaching the end of the input data.",3,null],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[11,"line","","One-based line number at which the error was detected.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"column","","One-based column number at which the error was detected.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"classify","","Categorizes the cause of this error.",4,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"category"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"errorimpl"}],"output":{"name":"error"}}],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"custom","","",4,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"custom","","",4,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"map","serde_json","A map of String to serde_json::Value.",null,null],[3,"Map","serde_json::map","Represents a JSON key/value type.",null,null],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",null,null],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",null,null],[3,"Iter","","An iterator over a serde_json::Map's entries.",null,null],[3,"IterMut","","A mutable iterator over a serde_json::Map's entries.",null,null],[3,"IntoIter","","An owning iterator over a serde_json::Map's entries.",null,null],[3,"Keys","","An iterator over a serde_json::Map's keys.",null,null],[3,"Values","","An iterator over a serde_json::Map's values.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`Map`].",null,null],[13,"Vacant","","A vacant Entry.",5,null],[13,"Occupied","","An occupied Entry.",5,null],[11,"new","","Makes a new empty Map.",6,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",6,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Clears the map, removing all values.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",6,{"inputs":[{"name":"self"},{"name":"string"},{"name":"value"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Gets an iterator over the entries of the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"value"}}],[11,"index_mut","","",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"value"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_iter","","",6,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"extend","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"key","","Returns a reference to this entry's key.",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",5,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"value"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",7,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"key","","Gets a reference to the key in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get","","Gets a reference to the value in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",8,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",8,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",8,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_iter","","",6,null],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"next_back","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",null,null],[13,"Quote","","An escaped quote `\"`",14,null],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",14,null],[13,"Solidus","","An escaped solidus `/`",14,null],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",14,null],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",14,null],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",14,null],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",14,null],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",14,null],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as `\\u00XX` where `XX` are two hex characters)",14,null],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to optionally pretty print the JSON output.",null,null],[11,"write_null","","Writes a `null` value to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"f64"}],"output":{"name":"result"}}],[11,"begin_string","","Called before each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_string","","Called after each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_string_fragment","","Writes a string fragment that doesn't need any escaping to the specified writer.",15,null],[11,"write_char_escape","","Writes a character escape code to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"charescape"}],"output":{"name":"result"}}],[11,"begin_array","","Called before every array.  Writes a `[` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_array","","Called after every array.  Writes a `]` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_array_value","","Called after every array value.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object","","Called before every object.  Writes a `{` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object","","Called after every object.  Writes a `}` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_key","","Called before every object key.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_object_key","","Called after every object key.  A `:` should be written to the specified writer by either this method or `begin_object_value`.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_value","","Called before every object value.  A `:` should be written to the specified writer by either this method or `end_object_key`.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object_value","","Called after every object value.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Creates a new JSON serializer.",16,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",16,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer specified.",16,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",16,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"compactformatter"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"prettyformatter"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",18,{"inputs":[],"output":{"name":"self"}}],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",18,null],[11,"default","","",18,{"inputs":[],"output":{"name":"self"}}],[11,"begin_array","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_array","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_array_value","","",18,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_array_value","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_key","","",18,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"begin_object_value","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object_value","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",null,null],[3,"Number","serde_json::value","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[8,"Index","","A type that can be used to index into a `serde_json::Value`. See the `get` and `get_mut` methods of `Value`.",null,null],[8,"ToJson","","Representation of any serializable data as a `serde_json::Value`.",null,null],[10,"to_json","","Represent `self` as a `serde_json::Value`. Note that `Value` is not a JSON string. If you need a string, use `serde_json::to_string` instead.",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Value` is a number that can be represented by i64.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Value` is a number that can be represented by u64.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Value` is a number, represent it as i64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the `Value` is a number, represent it as u64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pointer","","Looks up a value by a JSON Pointer.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"value"}}],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Convert 32-bit floating point number to `Value`",0,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"from","","Convert 64-bit floating point number to `Value`",0,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"from","","Convert boolean to `Value`",0,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"from","","Convert `String` to `Value`",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","Convert string slice to `Value`",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","Convert copy-on-write string to `Value`",0,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","Convert map (with string keys) to `Value`",0,{"inputs":[{"name":"map"}],"output":{"name":"self"}}],[11,"from","","Convert a `Vec` to `Value`",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","Convert a slice to `Value`",0,null],[11,"from_iter","","Convert an iteratable type to a `Value`",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","Display a JSON value as a string.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_newtype_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_struct_field","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"clone","serde_json","",20,{"inputs":[{"name":"self"}],"output":{"name":"number"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns `true` if the number can be represented as `i64`.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns `true` if the number can be represented as `u64`.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns `true` if the number can be represented as `f64`.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","Returns the number represented as `i64` if possible, or else `None`.",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","Returns the number represented as `u64` if possible, or else `None`.",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","Returns the number represented as `f64` if possible, or else `None`.",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",20,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",20,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",20,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",20,null],[11,"deserialize_struct_field","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",20,null],[11,"deserialize_ignored_any","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"from","","",20,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",20,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",20,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",20,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",20,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",20,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",20,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",20,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",20,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",20,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new","serde_json::de","Create a JSON input source to read from an iterator of bytes.",21,{"inputs":[{"name":"iter"}],"output":{"name":"self"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"discard","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",21,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",21,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"parse_str","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"parse_str_raw","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"new","","Create a JSON input source to read from a std::io input stream.",22,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"discard","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",22,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",22,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"parse_str","","",22,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"parse_str_raw","","",22,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"new","","Create a JSON input source to read from a slice of bytes.",23,null],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"discard","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",23,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",23,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"parse_str","","",23,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"parse_str_raw","","",23,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"new","","Create a JSON input source to read from a UTF-8 string.",24,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek","","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"discard","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",24,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",24,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"parse_str","","",24,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"parse_str_raw","","",24,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[6,"Result","serde_json","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",null,null]],"paths":[[4,"Value"],[3,"Deserializer"],[3,"StreamDeserializer"],[4,"Category"],[3,"Error"],[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[8,"ToJson"],[3,"Number"],[3,"IteratorRead"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"]]};
searchIndex["serde_urlencoded"] = {"doc":"`x-www-form-urlencoded` meets Serde","items":[[3,"Deserializer","serde_urlencoded","A deserializer for the `application/x-www-form-urlencoded` format.",null,null],[3,"Serializer","","A serializer for the `application/x-www-form-urlencoded` format.",null,null],[5,"from_bytes","","Deserializes a `application/x-wwww-url-encoded` value from a `&[u8]`.",null,null],[5,"from_reader","","Convenience function that reads all bytes from `reader` and deserializes them with `from_bytes`.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_str","","Deserializes a `application/x-wwww-url-encoded` value from a `&str`.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"to_string","","Serializes a value into a `application/x-wwww-url-encoded` `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"de","","Deserialization support for the `application/x-www-form-urlencoded` format.",null,null],[3,"Error","serde_urlencoded::de","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[3,"Deserializer","","A deserializer for the `application/x-www-form-urlencoded` format.",null,null],[5,"from_bytes","","Deserializes a `application/x-wwww-url-encoded` value from a `&[u8]`.",null,null],[5,"from_str","","Deserializes a `application/x-wwww-url-encoded` value from a `&str`.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"from_reader","","Convenience function that reads all bytes from `reader` and deserializes them with `from_bytes`.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"new","","Returns a new `Deserializer`.",0,{"inputs":[{"name":"urlencodedparse"}],"output":{"name":"self"}}],[11,"deserialize","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_struct_field","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_ignored_any","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[0,"ser","serde_urlencoded","Serialization support for the `application/x-www-form-urlencoded` format.",null,null],[3,"Serializer","serde_urlencoded::ser","A serializer for the `application/x-www-form-urlencoded` format.",null,null],[3,"SeqSerializer","","Sequence serializer.",null,null],[3,"TupleSerializer","","Tuple serializer.",null,null],[3,"TupleStructSerializer","","Tuple struct serializer.",null,null],[3,"TupleVariantSerializer","","Tuple variant serializer.",null,null],[3,"MapSerializer","","Map serializer.",null,null],[3,"StructSerializer","","Struct serializer.",null,null],[3,"StructVariantSerializer","","Struct variant serializer.",null,null],[4,"Error","","Errors returned during serializing to `application/x-www-form-urlencoded`.",null,null],[13,"Custom","","",1,null],[13,"Utf8","","",1,null],[5,"to_string","","Serializes a value into a `application/x-wwww-url-encoded` `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"new","","Returns a new `Serializer`.",2,{"inputs":[{"name":"urlencodedserializer"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","The lower-level cause of this error, in the case of a `Utf8` error.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"custom","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"serialize_bool","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"serialize_i8","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"serialize_i16","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"serialize_i32","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"serialize_i64","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"serialize_u8","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"serialize_u16","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"serialize_u32","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"serialize_u64","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"serialize_f32","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"serialize_f64","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"serialize_char","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"serialize_str","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_bytes","","Returns an error.",2,null],[11,"serialize_unit","","Returns an error.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_unit_struct","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_unit_variant","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_newtype_struct","","Serializes the inner value, ignoring the newtype name.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_newtype_variant","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_none","","Returns `Ok`.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_some","","Serializes the given value.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_seq","","Serialize a sequence, given length (if any) is ignored.",2,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize_seq_fixed_size","","Serializes a sequence, given length is ignored.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_tuple","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_tuple_struct","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_map","","Serializes a map, given length is ignored.",2,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"serialize_struct","","Serializes a struct, given length is ignored.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_struct_variant","","Returns an error.",2,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_element","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_element","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_entry","","",7,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_key","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","serde_urlencoded::de","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"custom","","",10,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[3,"Deserializer"],[4,"Error"],[3,"Serializer"],[3,"SeqSerializer"],[3,"TupleSerializer"],[3,"TupleStructSerializer"],[3,"TupleVariantSerializer"],[3,"MapSerializer"],[3,"StructSerializer"],[3,"StructVariantSerializer"],[3,"Error"]]};
searchIndex["slog"] = {"doc":"Slog -  Structured, composable logging for Rust","items":[[3,"Logger","slog","Logging handle used to execute logging statements",null,null],[3,"Record","","One logging record",null,null],[3,"Discard","","`Drain` discarding everything",null,null],[3,"Filter","","`Drain` filtering records",null,null],[3,"MapError","","`Drain` mapping error returned by another `Drain`",null,null],[3,"LevelFilter","","`Drain` filtering records by `Record` logging level",null,null],[3,"Duplicate","","`Drain` duplicating records into two other `Drain`s",null,null],[3,"Fuse","","`Drain` panicking on error",null,null],[3,"IgnoreErr","","`Drain` ignoring errors",null,null],[3,"OwnedKeyValueList","","Chain of `SyncMultiSerialize`-s of a `Logger` and its ancestors",null,null],[3,"OwnedKeyValueListIterator","","Iterator over `OwnedKeyValue`-s",null,null],[4,"Level","","Logging level associated with a logging `Record`",null,null],[13,"Critical","","Critical",0,null],[13,"Error","","Error",0,null],[13,"Warning","","Warning",0,null],[13,"Info","","Info",0,null],[13,"Debug","","Debug",0,null],[13,"Trace","","Trace",0,null],[4,"FilterLevel","","Logging filtering level",null,null],[13,"Off","","Log nothing",1,null],[13,"Critical","","Log critical level only",1,null],[13,"Error","","Log only error level and above",1,null],[13,"Warning","","Log only warning level and above",1,null],[13,"Info","","Log only info level and above",1,null],[13,"Debug","","Log only debug level and above",1,null],[13,"Trace","","Log everything",1,null],[4,"DuplicateError","","Logging error returned by `Duplicate` drain",null,null],[13,"First","","First `Drain` has returned error",2,null],[13,"Second","","Second `Drain` has returned error",2,null],[13,"Both","","Both `Drain`s have returned error",2,null],[5,"filter","","Filter by `cond` closure",null,{"inputs":[{"name":"f"},{"name":"d"}],"output":{"name":"filter"}}],[5,"level_filter","","Filter by log level",null,{"inputs":[{"name":"level"},{"name":"d"}],"output":{"name":"levelfilter"}}],[5,"duplicate","","Duplicate records to two drains",null,{"inputs":[{"name":"d1"},{"name":"d2"}],"output":{"name":"duplicate"}}],[0,"ser","","Serialization",null,null],[3,"PushLazy","slog::ser","A newtype for non-return based lazy values",null,null],[12,"0","","",3,null],[3,"ValueSerializer","","A handle to `Serializer` for `PushLazy` closure",null,null],[4,"Error","","Serialization Error",null,null],[13,"Io","","`io::Error`",4,null],[13,"Other","","Other error",4,null],[6,"Result","","Serialization `Result`",null,null],[8,"Serialize","","Value that can be serialized",null,null],[10,"serialize","","Serialize self into `Serializer`",5,{"inputs":[{"name":"self"},{"name":"record"},{"name":"str"},{"name":"serializer"}],"output":{"name":"result"}}],[8,"SyncSerialize","","Value that can be serialized and stored in `Logger` itself.",null,null],[8,"SyncMultiSerialize","","Multiple key-values pairs that can be serialized",null,null],[10,"head","","Key and value of the first key-value pair",6,null],[10,"tail","","Next key-value pair (and all following ones)",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Serializer","","Serializer",null,null],[10,"emit_bool","","Emit bool",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_unit","","Emit `()`",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_none","","Emit `None`",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_char","","Emit char",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_u8","","Emit u8",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_i8","","Emit i8",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_u16","","Emit u16",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_i16","","Emit i16",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_u32","","Emit u32",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_i32","","Emit i32",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_f32","","Emit f32",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_u64","","Emit u64",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_i64","","Emit i64",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_f64","","Emit f64",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_usize","","Emit usize",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_isize","","Emit isize",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_str","","Emit str",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_arguments","","Emit `fmt::Arguments`",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","Serialize a value",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"serialize","","",3,{"inputs":[{"name":"self"},{"name":"record"},{"name":"str"},{"name":"serializer"}],"output":{"name":"result"}}],[6,"BorrowedKeyValue","slog","Key value pair that can be part of a logging record",null,null],[6,"OwnedKeyValue","","Key value pair that can be owned by `Logger`",null,null],[7,"LOG_LEVEL_NAMES","","Official capitalized logging (and logging filtering) level names",null,null],[7,"LOG_LEVEL_SHORT_NAMES","","Official capitalized logging (and logging filtering) short level names",null,null],[8,"Drain","","Logging drain",null,null],[16,"Error","","Type of potential errors returned during logging",9,null],[10,"log","","Log one logging record",9,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[8,"DrainExt","","Convenience methods for building drains",null,null],[11,"map_err","","Map logging errors returned by this drain",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperror"}}],[11,"ignore_err","","Make `Self` ignore and not report any error",10,{"inputs":[{"name":"self"}],"output":{"name":"ignoreerr"}}],[11,"fuse","","Make `Self` panic when returning any errors",10,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"filterlevel"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"filterlevel"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"filterlevel"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"filterlevel"}],"output":{"name":"option"}}],[11,"as_short_str","","Convert to `str` from `LOG_LEVEL_SHORT_NAMES`",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_str","","Convert to `str` from `LOG_LEVEL_NAMES`",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_usize","","Cast `Level` to ordering integer ",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_usize","","Get a `Level` from an `usize`",0,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"as_usize","","Convert to `usize` value",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_usize","","Get a `FilterLevel` from an `usize`",1,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"max","","Maximum logging level (log everything)",1,{"inputs":[],"output":{"name":"self"}}],[11,"min","","Minimum logging level (log nothing)",1,{"inputs":[],"output":{"name":"self"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_at_least","","Returns true if `self` is at least `level` logging level",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"logger"}}],[11,"root","","Build a root `Logger`",11,{"inputs":[{"name":"d"},{"name":"option"}],"output":{"name":"logger"}}],[11,"new","","Build a child logger",11,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"logger"}}],[11,"log","","Log one logging record",11,{"inputs":[{"name":"self"},{"name":"record"}],"output":null}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"msg","","Get a log record message",12,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"level","","Get record logging level",12,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"line","","Get line number",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"column","","Get error column",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"file","","Get file path",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"target","","Get target",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"module","","Get module",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"function","","Get function",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"values","","Get Record's key-value pairs",12,null],[11,"log","","",13,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[11,"new","","Create `Filter` wrapping given `drain`",14,{"inputs":[{"name":"d"},{"name":"f"}],"output":{"name":"self"}}],[11,"log","","",14,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[11,"new","","Create `Filter` wrapping given `drain`",15,{"inputs":[{"name":"d"},{"name":"f"}],"output":{"name":"self"}}],[11,"log","","",15,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[11,"new","","Create `LevelFilter`",16,{"inputs":[{"name":"d"},{"name":"level"}],"output":{"name":"self"}}],[11,"log","","",16,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[11,"new","","Create `Duplicate`",17,{"inputs":[{"name":"d1"},{"name":"d2"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"log","","",17,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[11,"new","","Create `Fuse` wrapping given `drain`",18,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"log","","",18,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[11,"new","","Create `IgnoreErr` wrapping `drain`",19,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"log","","",19,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"ownedkeyvaluelist"}}],[11,"new","","New `OwnedKeyValueList` node with an existing parent",20,{"inputs":[{"name":"box"},{"name":"ownedkeyvaluelist"}],"output":{"name":"self"}}],[11,"root","","New `OwnedKeyValue` node without a parent (root)",20,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"parent","","Get the parent node element on the chain of values",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"values","","Get the head node `SyncMultiSerialize` values",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"iter","","Iterator over all `OwnedKeyValue`-s in every `SyncMultiSerialize` of the list",20,{"inputs":[{"name":"self"}],"output":{"name":"ownedkeyvaluelistiterator"}}],[11,"id","","Get a unique stable identifier for this node",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[14,"o","","Convenience macro for building `SyncMultiSerialize` trait object",null,null],[14,"slog_o","","An alternative, longer-name version of `o` macro",null,null],[14,"log","","Log message of a given level",null,null],[14,"slog_log","","Log message of a given level (alias)",null,null],[14,"crit","","Log critical level record",null,null],[14,"slog_crit","","Log critical level record (alias)",null,null],[14,"error","","Log error level record",null,null],[14,"slog_error","","Log error level record",null,null],[14,"warn","","Log warning level record",null,null],[14,"slog_warn","","Log warning level record (alias)",null,null],[14,"info","","Log info level record",null,null],[14,"slog_info","","Log info level record (alias)",null,null],[14,"debug","","Log debug level record",null,null],[14,"slog_debug","","Log debug level record (alias)",null,null],[14,"trace","","Log trace level record",null,null],[14,"slog_trace","","Log trace level record (alias)",null,null]],"paths":[[4,"Level"],[4,"FilterLevel"],[4,"DuplicateError"],[3,"PushLazy"],[4,"Error"],[8,"Serialize"],[8,"SyncMultiSerialize"],[8,"Serializer"],[3,"ValueSerializer"],[8,"Drain"],[8,"DrainExt"],[3,"Logger"],[3,"Record"],[3,"Discard"],[3,"Filter"],[3,"MapError"],[3,"LevelFilter"],[3,"Duplicate"],[3,"Fuse"],[3,"IgnoreErr"],[3,"OwnedKeyValueList"],[3,"OwnedKeyValueListIterator"]]};
searchIndex["slog_envlogger"] = {"doc":"A logger configured via an environment variable.","items":[[3,"EnvLogger","slog_envlogger","`EnvLogger` drain.",null,null],[3,"LogBuilder","","LogBuilder acts as builder for initializing the EnvLogger. It can be used change the enviromental variable used to provide the logging directives and also set the default log level filter.",null,null],[5,"new","","Create a `EnvLogger` using `RUST_LOG` environment variable",null,{"inputs":[{"name":"t"}],"output":{"name":"envlogger"}}],[5,"init","","Use a default `EnvLogger` as global logging drain",null,{"inputs":[],"output":{"name":"result"}}],[11,"new","","Initializes the log builder with defaults",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"filter","","Adds filters to the logger",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"filterlevel"}],"output":{"name":"self"}}],[11,"parse","","Parses the directives string in the same form as the RUST_LOG environment variable.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"build","","Build an env logger.",0,{"inputs":[{"name":"self"}],"output":{"name":"envlogger"}}],[11,"new","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"filter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"filterlevel"}}],[11,"log","","",1,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}]],"paths":[[3,"LogBuilder"],[3,"EnvLogger"]]};
searchIndex["slog_extra"] = {"doc":"Standard slog-rs extensions.","items":[[3,"Async","slog_extra","`Async` drain",null,null],[11,"new","","Create `Async` drain",0,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"log","","",0,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Async"]]};
searchIndex["slog_stdlog"] = {"doc":"Standard Rust log crate adapter to slog-rs","items":[[3,"StdLog","slog_stdlog","Drain logging `Record`s into `log` crate",null,null],[5,"set_logger","","Set a `slog::Logger` as a global `log` create handler",null,{"inputs":[{"name":"logger"}],"output":{"name":"result"}}],[5,"set_logger_level","","Set a `slog::Logger` as a global `log` create handler",null,{"inputs":[{"name":"logger"},{"name":"loglevelfilter"}],"output":{"name":"result"}}],[5,"init","","Minimal initialization with default drain",null,{"inputs":[],"output":{"name":"result"}}],[5,"with_current_logger","","Access the currently active logger",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"logger","","Access the `Logger` for the current logging scope",null,{"inputs":[],"output":{"name":"logger"}}],[5,"scope","","Execute code in a logging scope",null,{"inputs":[{"name":"logger"},{"name":"sf"}],"output":{"name":"r"}}],[11,"log","","",0,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}]],"paths":[[3,"StdLog"]]};
searchIndex["slog_stream"] = {"doc":"`io::Write` streamer for slog-rs","items":[[3,"Streamer","slog_stream","Drain formating records and writing them to a byte-stream (`io::Write`)",null,null],[5,"stream","","Stream logging records to IO",null,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"streamer"}}],[5,"async_stream","","Stream logging records to IO asynchronously",null,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"async"}}],[8,"Format","","Formats `Record`-s into IO",null,null],[10,"format","","Format one logging record and write into `io`",0,{"inputs":[{"name":"self"},{"name":"write"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[8,"Decorator","","Formatted stream decorator",null,null],[16,"RecordDecorator","","Per-record decorator",1,null],[10,"decorate","","Get a `RecordDecorator` for a given `record`",1,null],[8,"RecordDecorator","","Per-record decorator",null,null],[11,"fmt_msg","","Format a field",2,{"inputs":[{"name":"self"},{"name":"write"},{"name":"fn"}],"output":{"name":"result"}}],[11,"fmt_key","","Format a key",2,{"inputs":[{"name":"self"},{"name":"write"},{"name":"fn"}],"output":{"name":"result"}}],[11,"fmt_separator","","Format a separator",2,{"inputs":[{"name":"self"},{"name":"write"},{"name":"fn"}],"output":{"name":"result"}}],[11,"fmt_value","","Format a value",2,{"inputs":[{"name":"self"},{"name":"write"},{"name":"fn"}],"output":{"name":"result"}}],[11,"fmt_timestamp","","Format a timestamp",2,{"inputs":[{"name":"self"},{"name":"write"},{"name":"fn"}],"output":{"name":"result"}}],[11,"fmt_level","","Format a level",2,{"inputs":[{"name":"self"},{"name":"write"},{"name":"fn"}],"output":{"name":"result"}}],[11,"new","","Create new `Streamer` writing to `io` using `format`",3,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"log","","",3,{"inputs":[{"name":"self"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}]],"paths":[[8,"Format"],[8,"Decorator"],[8,"RecordDecorator"],[3,"Streamer"]]};
searchIndex["slog_term"] = {"doc":"Unix terminal formatter and drain for slog-rs","items":[[3,"Format","slog_term","Full formatting with optional color support",null,null],[3,"ColorDecorator","","Record decorator (color) for terminal output",null,null],[3,"ColorRecordDecorator","","Particular record decorator (color) for terminal output",null,null],[3,"StreamerBuilder","","Streamer builder",null,null],[4,"FormatMode","","Formatting mode",null,null],[13,"Compact","","Compact logging format",0,null],[13,"Full","","Full logging format",0,null],[5,"timestamp_local","","Default local timestamp function used by `Format`",null,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[5,"timestamp_utc","","Default UTC timestamp function used by `Format`",null,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[5,"streamer","","Build `slog_stream::Streamer`/`slog_stream::AsyncStreamer` that will output logging records to stderr/stderr.",null,{"inputs":[],"output":{"name":"streamerbuilder"}}],[6,"TimestampFn","","Timestamp function type",null,null],[11,"new","","New Format format that prints using color",1,{"inputs":[{"name":"formatmode"},{"name":"d"},{"name":"box"}],"output":{"name":"self"}}],[11,"new_colored","","New decorator that does color records",2,{"inputs":[],"output":{"name":"self"}}],[11,"new_plain","","New decorator that does not color records",2,{"inputs":[],"output":{"name":"self"}}],[11,"decorate","","",2,{"inputs":[{"name":"self"},{"name":"record"}],"output":{"name":"colorrecorddecorator"}}],[11,"fmt_level","","",3,{"inputs":[{"name":"self"},{"name":"write"},{"name":"fn"}],"output":{"name":"result"}}],[11,"fmt_msg","","",3,{"inputs":[{"name":"self"},{"name":"write"},{"name":"fn"}],"output":{"name":"result"}}],[11,"fmt_key","","",3,{"inputs":[{"name":"self"},{"name":"write"},{"name":"fn"}],"output":{"name":"result"}}],[11,"format","","",1,{"inputs":[{"name":"self"},{"name":"write"},{"name":"record"},{"name":"ownedkeyvaluelist"}],"output":{"name":"result"}}],[11,"new","","New `StreamerBuilder`",4,{"inputs":[],"output":{"name":"self"}}],[11,"color","","Force colored output",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"plain","","Force plain output",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"auto_color","","Auto detect color (default)",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"stderr","","Output to stderr",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"stdout","","Output to stdout (default)",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"full","","Output using full mode",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"compact","","Output using compact mode (default)",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"async","","Use asynchronous streamer",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sync","","Use synchronous streamer (default)",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"use_utc_timestamp","","Use the UTC time zone for the timestamp",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"use_local_timestamp","","Use the local time zone for the timestamp (default)",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"use_custom_timestamp","","Provide a custom function to generate the timestamp",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"build","","Build the streamer",4,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}]],"paths":[[4,"FormatMode"],[3,"Format"],[3,"ColorDecorator"],[3,"ColorRecordDecorator"],[3,"StreamerBuilder"]]};
searchIndex["syn"] = {"doc":"","items":[[3,"Attribute","syn","Doc-comments are promoted to attributes that have `is_sugared_doc` = true",null,null],[12,"style","","",0,null],[12,"value","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"ident","","Name of the field, if any.",1,null],[12,"vis","","Visibility of the field.",1,null],[12,"attrs","","Attributes tagged on the field.",1,null],[12,"ty","","Type of the field.",1,null],[3,"Variant","","An enum variant.",null,null],[12,"ident","","Name of the variant.",2,null],[12,"attrs","","Attributes tagged on the variant.",2,null],[12,"data","","Type of variant.",2,null],[12,"discriminant","","Explicit discriminant, e.g. `Foo = 1`",2,null],[3,"Arm","","An arm of a 'match'.",null,null],[12,"attrs","","",3,null],[12,"pats","","",3,null],[12,"guard","","",3,null],[12,"body","","",3,null],[3,"Block","","A Block (`{ .. }`).",null,null],[12,"stmts","","Statements in a block",4,null],[3,"Expr","","An expression.",null,null],[12,"node","","Type of the expression.",5,null],[12,"attrs","","Attributes tagged on the expression.",5,null],[3,"FieldPat","","A single field in a struct pattern",null,null],[12,"ident","","The identifier for the field",6,null],[12,"pat","","The pattern the field is destructured to",6,null],[12,"is_shorthand","","",6,null],[12,"attrs","","",6,null],[3,"FieldValue","","A field-value pair in a struct literal.",null,null],[12,"ident","","Name of the field.",7,null],[12,"expr","","Value of the field.",7,null],[12,"is_shorthand","","Whether this is a shorthand field, e.g. `Struct { x }` instead of `Struct { x: x }`.",7,null],[12,"attrs","","Attributes tagged on the field.",7,null],[3,"Local","","Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`",null,null],[12,"pat","","",8,null],[12,"ty","","",8,null],[12,"init","","Initializer expression to set the value, if any",8,null],[12,"attrs","","",8,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",9,null],[12,"ty_params","","",9,null],[12,"where_clause","","",9,null],[3,"Lifetime","","",null,null],[12,"ident","","",10,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",11,null],[12,"lifetime","","",11,null],[12,"bounds","","",11,null],[3,"TyParam","","",null,null],[12,"attrs","","",12,null],[12,"ident","","",12,null],[12,"bounds","","",12,null],[12,"default","","",12,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",13,null],[12,"bounded_ty","","The type being bounded",13,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",13,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"predicates","","",14,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"lhs_ty","","",15,null],[12,"rhs_ty","","",15,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"lifetime","","",16,null],[12,"bounds","","",16,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TyGenerics::as_turbofish`.",null,null],[3,"TyGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","",null,null],[3,"FnDecl","","Header (not the body) of a function declaration.",null,null],[12,"inputs","","",17,null],[12,"output","","",17,null],[12,"variadic","","",17,null],[3,"ForeignItem","","",null,null],[12,"ident","","",18,null],[12,"attrs","","",18,null],[12,"node","","",18,null],[12,"vis","","",18,null],[3,"ForeignMod","","Foreign module declaration.",null,null],[12,"abi","","",19,null],[12,"items","","",19,null],[3,"ImplItem","","",null,null],[12,"ident","","",20,null],[12,"vis","","",20,null],[12,"defaultness","","",20,null],[12,"attrs","","",20,null],[12,"node","","",20,null],[3,"Item","","An item",null,null],[12,"ident","","",21,null],[12,"vis","","",21,null],[12,"attrs","","",21,null],[12,"node","","",21,null],[3,"MethodSig","","Represents a method's signature in a trait declaration, or in an implementation.",null,null],[12,"unsafety","","",22,null],[12,"constness","","",22,null],[12,"abi","","",22,null],[12,"decl","","",22,null],[12,"generics","","",22,null],[3,"PathListItem","","",null,null],[12,"name","","",23,null],[12,"rename","","renamed in list, e.g. `use foo::{bar as baz};`",23,null],[3,"TraitItem","","Represents an item declaration within a trait declaration, possibly including a default implementation. A trait item is either required (meaning it doesn't have an implementation, just a signature) or provided (meaning it has a default implementation).",null,null],[12,"ident","","",24,null],[12,"attrs","","",24,null],[12,"node","","",24,null],[3,"Crate","","",null,null],[12,"shebang","","",25,null],[12,"attrs","","",25,null],[12,"items","","",25,null],[3,"ByteStrLit","","",null,null],[12,"value","","",26,null],[12,"style","","",26,null],[3,"FloatLit","","",null,null],[12,"value","","",27,null],[12,"suffix","","",27,null],[3,"IntLit","","",null,null],[12,"value","","",28,null],[12,"suffix","","",28,null],[3,"StrLit","","",null,null],[12,"value","","",29,null],[12,"style","","",29,null],[3,"Delimited","","",null,null],[12,"delim","","The type of delimiter",30,null],[12,"tts","","The delimited sequence of token trees",30,null],[3,"Mac","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",null,null],[12,"path","","",31,null],[12,"tts","","",31,null],[3,"DeriveInput","","Struct or enum sent to a `proc_macro_derive` macro.",null,null],[12,"ident","","Name of the struct or enum.",32,null],[12,"vis","","Visibility of the struct or enum.",32,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",32,null],[12,"generics","","Generics required to complete the definition.",32,null],[12,"body","","Data within the struct or enum.",32,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",33,null],[12,"types","","The type parameters for this path segment, if present.",33,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",33,null],[3,"BareFnArg","","An argument in a function type.",null,null],[12,"name","","",34,null],[12,"ty","","",34,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",35,null],[12,"abi","","",35,null],[12,"lifetimes","","",35,null],[12,"inputs","","",35,null],[12,"output","","",35,null],[12,"variadic","","",35,null],[3,"MutTy","","",null,null],[12,"ty","","",36,null],[12,"mutability","","",36,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"inputs","","`(A, B)`",37,null],[12,"output","","`C`",37,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current module (like paths in an import).",38,null],[12,"segments","","The segments in the path: the things separated by `::`.",38,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"ident","","The identifier portion of this path segment.",39,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction.",39,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",40,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",40,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",41,null],[12,"position","","",41,null],[3,"TypeBinding","","Bind a type to an associated type: `A=Foo`.",null,null],[12,"ident","","",42,null],[12,"ty","","",42,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","Attribute of the form `#![...]`.",43,null],[13,"Inner","","Attribute of the form `#[...]`.",43,null],[4,"MetaItem","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",44,null],[13,"List","","List meta item.",44,null],[13,"NameValue","","Name-value meta item.",44,null],[4,"NestedMetaItem","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full `MetaItem`.",45,null],[13,"Literal","","A Rust literal.",45,null],[4,"ConstExpr","","",null,null],[13,"Call","","A function call",46,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",46,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",46,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",46,null],[13,"Cast","","A cast (`foo as f64`)",46,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::.",46,null],[13,"Index","","An indexing operation (`foo[2]`)",46,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",46,null],[13,"Other","","If compiling with full support for expression syntax, any expression is allowed",46,null],[4,"VariantData","","Data stored within an enum variant or struct.",null,null],[13,"Struct","","Struct variant, e.g. `Point { x: f64, y: f64 }`.",47,null],[13,"Tuple","","Tuple variant, e.g. `Some(T)`.",47,null],[13,"Unit","","Unit variant, e.g. `None`.",47,null],[4,"Visibility","","Visibility level of an item.",null,null],[13,"Public","","Public, i.e. `pub`.",48,null],[13,"Crate","","Crate-visible, i.e. `pub(crate)`.",48,null],[13,"Restricted","","Restricted, e.g. `pub(some::module)`.",48,null],[13,"Inherited","","Inherited, i.e. private.",48,null],[4,"BindingMode","","",null,null],[13,"ByRef","","",49,null],[13,"ByValue","","",49,null],[4,"CaptureBy","","A capture clause",null,null],[13,"Value","","",50,null],[13,"Ref","","",50,null],[4,"ExprKind","","",null,null],[13,"Box","","A `box x` expression.",51,null],[13,"InPlace","","First expr is the place; second expr is the value.",51,null],[13,"Array","","An array, e.g. `[a, b, c, d]`.",51,null],[13,"Call","","A function call.",51,null],[13,"MethodCall","","A method call (`x.foo::<Bar, Baz>(a, b, c, d)`)",51,null],[13,"Tup","","A tuple, e.g. `(a, b, c, d)`.",51,null],[13,"Binary","","A binary operation, e.g. `a + b`, `a * b`.",51,null],[13,"Unary","","A unary operation, e.g. `!x`, `*x`.",51,null],[13,"Lit","","A literal, e.g. `1`, `\"foo\"`.",51,null],[13,"Cast","","A cast, e.g. `foo as f64`.",51,null],[13,"Type","","A type ascription, e.g. `foo: f64`.",51,null],[13,"If","","An `if` block, with an optional else block",51,null],[13,"IfLet","","An `if let` expression with an optional else block",51,null],[13,"While","","A while loop, with an optional label",51,null],[13,"WhileLet","","A while-let loop, with an optional label.",51,null],[13,"ForLoop","","A for loop, with an optional label.",51,null],[13,"Loop","","Conditionless loop with an optional label.",51,null],[13,"Match","","A `match` block.",51,null],[13,"Closure","","A closure (for example, `move |a, b, c| a + b + c`)",51,null],[13,"Block","","A block (`{ ... }` or `unsafe { ... }`)",51,null],[13,"Assign","","An assignment (`a = foo()`)",51,null],[13,"AssignOp","","An assignment with an operator",51,null],[13,"Field","","Access of a named struct field (`obj.foo`)",51,null],[13,"TupField","","Access of an unnamed field of a struct or tuple-struct",51,null],[13,"Index","","An indexing operation (`foo[2]`)",51,null],[13,"Range","","A range (`1..2`, `1..`, `..2`, `1...2`, `1...`, `...2`)",51,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::.",51,null],[13,"AddrOf","","A referencing operation (`&a` or `&mut a`)",51,null],[13,"Break","","A `break`, with an optional label to break, and an optional expression",51,null],[13,"Continue","","A `continue`, with an optional label",51,null],[13,"Ret","","A `return`, with an optional value to be returned",51,null],[13,"Mac","","A macro invocation; pre-expansion",51,null],[13,"Struct","","A struct literal expression.",51,null],[13,"Repeat","","An array literal constructed from one repeated element.",51,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",51,null],[13,"Try","","`expr?`",51,null],[4,"MacStmtStyle","","How a macro was invoked.",null,null],[13,"Semicolon","","The macro statement had a trailing semicolon, e.g. `foo! { ... };` `foo!(...);`, `foo![...];`",52,null],[13,"Braces","","The macro statement had braces; e.g. foo! { ... }",52,null],[13,"NoBraces","","The macro statement had parentheses or brackets and no semicolon; e.g. `foo!(...)`. All of these will end up being converted into macro expressions.",52,null],[4,"Pat","","",null,null],[13,"Wild","","Represents a wildcard pattern (`_`)",53,null],[13,"Ident","","A `Pat::Ident` may either be a new bound variable (`ref mut binding @ OPT_SUBPATTERN`), or a unit struct/variant pattern, or a const pattern (in the last two cases the third field must be `None`). Disambiguation cannot be done with parser alone, so it happens during name resolution.",53,null],[13,"Struct","","A struct or struct variant pattern, e.g. `Variant {x, y, ..}`. The `bool` is `true` in the presence of a `..`.",53,null],[13,"TupleStruct","","A tuple struct/variant pattern `Variant(x, y, .., z)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",53,null],[13,"Path","","A possibly qualified path pattern. Unquailfied path patterns `A::B::C` can legally refer to variants, structs, constants or associated constants. Quailfied path patterns `<A>::B::C`/`<A as Trait>::B::C` can only legally refer to associated constants.",53,null],[13,"Tuple","","A tuple pattern `(a, b)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",53,null],[13,"Box","","A `box` pattern",53,null],[13,"Ref","","A reference pattern, e.g. `&mut (a, b)`",53,null],[13,"Lit","","A literal",53,null],[13,"Range","","A range pattern, e.g. `1...2`",53,null],[13,"Slice","","`[a, b, ..i, y, z]` is represented as: `Pat::Slice(box [a, b], Some(i), box [y, z])`",53,null],[13,"Mac","","A macro pattern; pre-expansion",53,null],[4,"RangeLimits","","Limit types of a range (inclusive or exclusive)",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end",54,null],[13,"Closed","","Inclusive at the beginning and end",54,null],[4,"Stmt","","A statement, usually ending in a semicolon.",null,null],[13,"Local","","A local (let) binding.",55,null],[13,"Item","","An item definition.",55,null],[13,"Expr","","Expr without trailing semicolon.",55,null],[13,"Semi","","Expression with trailing semicolon;",55,null],[13,"Mac","","Macro invocation.",55,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",56,null],[13,"Maybe","","",56,null],[4,"TyParamBound","","The AST represents all type param bounds as types. `typeck::collect::compute_bounds` matches these against the \"special\" built-in traits (see `middle::lang_items`) and detects Copy, Send and Sync.",null,null],[13,"Trait","","",57,null],[13,"Region","","",57,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",58,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",58,null],[13,"EqPredicate","","An equality predicate (unsupported)",58,null],[4,"Constness","","",null,null],[13,"Const","","",59,null],[13,"NotConst","","",59,null],[4,"Defaultness","","",null,null],[13,"Default","","",60,null],[13,"Final","","",60,null],[4,"FnArg","","An argument in a function header.",null,null],[13,"SelfRef","","",61,null],[13,"SelfValue","","",61,null],[13,"Captured","","",61,null],[13,"Ignored","","",61,null],[4,"ForeignItemKind","","An item within an `extern` block",null,null],[13,"Fn","","A foreign function",62,null],[13,"Static","","A foreign static item (`static ext: u8`)",62,null],[4,"ImplItemKind","","",null,null],[13,"Const","","",63,null],[13,"Method","","",63,null],[13,"Type","","",63,null],[13,"Macro","","",63,null],[4,"ImplPolarity","","",null,null],[13,"Positive","","`impl Trait for Type`",64,null],[13,"Negative","","`impl !Trait for Type`",64,null],[4,"ItemKind","","",null,null],[13,"ExternCrate","","An`extern crate` item, with optional original crate name.",65,null],[13,"Use","","A use declaration (`use` or `pub use`) item.",65,null],[13,"Static","","A static item (`static` or `pub static`).",65,null],[13,"Const","","A constant item (`const` or `pub const`).",65,null],[13,"Fn","","A function declaration (`fn` or `pub fn`).",65,null],[13,"Mod","","A module declaration (`mod` or `pub mod`).",65,null],[13,"ForeignMod","","An external module (`extern` or `pub extern`).",65,null],[13,"Ty","","A type alias (`type` or `pub type`).",65,null],[13,"Enum","","An enum definition (`enum` or `pub enum`).",65,null],[13,"Struct","","A struct definition (`struct` or `pub struct`).",65,null],[13,"Union","","A union definition (`union` or `pub union`).",65,null],[13,"Trait","","A Trait declaration (`trait` or `pub trait`).",65,null],[13,"DefaultImpl","","Default trait implementation.",65,null],[13,"Impl","","An implementation.",65,null],[13,"Mac","","A macro invocation (which includes macro definition).",65,null],[4,"TraitItemKind","","",null,null],[13,"Const","","",66,null],[13,"Method","","",66,null],[13,"Type","","",66,null],[13,"Macro","","",66,null],[4,"ViewPath","","",null,null],[13,"Simple","","`foo::bar::baz as quux`",67,null],[13,"Glob","","`foo::bar::*`",67,null],[13,"List","","`foo::bar::{a, b, c}`",67,null],[4,"FloatTy","","",null,null],[13,"F32","","",68,null],[13,"F64","","",68,null],[13,"Unsuffixed","","",68,null],[4,"IntTy","","",null,null],[13,"Isize","","",69,null],[13,"I8","","",69,null],[13,"I16","","",69,null],[13,"I32","","",69,null],[13,"I64","","",69,null],[13,"Usize","","",69,null],[13,"U8","","",69,null],[13,"U16","","",69,null],[13,"U32","","",69,null],[13,"U64","","",69,null],[13,"Unsuffixed","","",69,null],[4,"Lit","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",70,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",70,null],[13,"Byte","","A byte char (`b'f'`)",70,null],[13,"Char","","A character literal (`'a'`)",70,null],[13,"Int","","An integer literal (`1`)",70,null],[13,"Float","","A float literal (`1f64` or `1E10f64` or `1.0E10`)",70,null],[13,"Bool","","A boolean literal",70,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",71,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",71,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",72,null],[13,"Minus","","",72,null],[13,"Star","","",72,null],[13,"Slash","","",72,null],[13,"Percent","","",72,null],[13,"Caret","","",72,null],[13,"And","","",72,null],[13,"Or","","",72,null],[13,"Shl","","",72,null],[13,"Shr","","",72,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",73,null],[13,"Bracket","","A square bracket: `[` or `]`",73,null],[13,"Brace","","A curly brace: `{` or `}`",73,null],[4,"Token","","",null,null],[13,"Eq","","",74,null],[13,"Lt","","",74,null],[13,"Le","","",74,null],[13,"EqEq","","",74,null],[13,"Ne","","",74,null],[13,"Ge","","",74,null],[13,"Gt","","",74,null],[13,"AndAnd","","",74,null],[13,"OrOr","","",74,null],[13,"Not","","",74,null],[13,"Tilde","","",74,null],[13,"BinOp","","",74,null],[13,"BinOpEq","","",74,null],[13,"At","","",74,null],[13,"Dot","","",74,null],[13,"DotDot","","",74,null],[13,"DotDotDot","","",74,null],[13,"Comma","","",74,null],[13,"Semi","","",74,null],[13,"Colon","","",74,null],[13,"ModSep","","",74,null],[13,"RArrow","","",74,null],[13,"LArrow","","",74,null],[13,"FatArrow","","",74,null],[13,"Pound","","",74,null],[13,"Dollar","","",74,null],[13,"Question","","",74,null],[13,"Literal","","",74,null],[13,"Ident","","",74,null],[13,"Underscore","","",74,null],[13,"Lifetime","","",74,null],[13,"DocComment","","",74,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",75,null],[13,"Delimited","","A delimited sequence of token trees",75,null],[4,"Body","","Body of a derived struct or enum.",null,null],[13,"Enum","","It's an enum.",76,null],[13,"Struct","","It's a struct.",76,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",77,null],[13,"Sub","","The `-` operator (subtraction)",77,null],[13,"Mul","","The `*` operator (multiplication)",77,null],[13,"Div","","The `/` operator (division)",77,null],[13,"Rem","","The `%` operator (modulus)",77,null],[13,"And","","The `&&` operator (logical and)",77,null],[13,"Or","","The `||` operator (logical or)",77,null],[13,"BitXor","","The `^` operator (bitwise xor)",77,null],[13,"BitAnd","","The `&` operator (bitwise and)",77,null],[13,"BitOr","","The `|` operator (bitwise or)",77,null],[13,"Shl","","The `<<` operator (shift left)",77,null],[13,"Shr","","The `>>` operator (shift right)",77,null],[13,"Eq","","The `==` operator (equality)",77,null],[13,"Lt","","The `<` operator (less than)",77,null],[13,"Le","","The `<=` operator (less than or equal to)",77,null],[13,"Ne","","The `!=` operator (not equal to)",77,null],[13,"Ge","","The `>=` operator (greater than or equal to)",77,null],[13,"Gt","","The `>` operator (greater than)",77,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",78,null],[13,"Not","","The `!` operator for logical inversion",78,null],[13,"Neg","","The `-` operator for negation",78,null],[4,"Abi","","",null,null],[13,"Named","","",79,null],[13,"Rust","","",79,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",80,null],[13,"Ty","","Everything else",80,null],[4,"Mutability","","",null,null],[13,"Mutable","","",81,null],[13,"Immutable","","",81,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`",82,null],[13,"Parenthesized","","The `(A, B)` and `C` in `Foo(A, B) -> C`",82,null],[4,"Ty","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length array (`[T]`)",83,null],[13,"Array","","A fixed length array (`[T; n]`)",83,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",83,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",83,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",83,null],[13,"Never","","The never type (`!`)",83,null],[13,"Tup","","A tuple (`(A, B, C, D, ...)`)",83,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",83,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",83,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",83,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",83,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",83,null],[13,"Mac","","A macro in the type position.",83,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",84,null],[13,"Normal","","",84,null],[5,"parse_derive_input","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_crate","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_item","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_items","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_expr","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_type","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_path","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_where_clause","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_token_trees","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ident","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ty_param_bound","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_outer_attr","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_inner_attr","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"aster","","",null,null],[5,"id","syn::aster","",null,{"inputs":[{"name":"i"}],"output":{"name":"ident"}}],[5,"from_generics","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"genericsbuilder"}}],[5,"where_predicate","","",null,{"inputs":[],"output":{"name":"wherepredicatebuilder"}}],[5,"ty","","",null,{"inputs":[],"output":{"name":"tybuilder"}}],[5,"path","","",null,{"inputs":[],"output":{"name":"pathbuilder"}}],[0,"generics","","",null,null],[3,"GenericsBuilder","syn::aster::generics","",null,null],[11,"new","","",85,{"inputs":[],"output":{"name":"self"}}],[11,"from_generics","","",85,{"inputs":[{"name":"generics"}],"output":{"name":"self"}}],[11,"with_callback","","",85,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"from_generics_with_callback","","",85,{"inputs":[{"name":"generics"},{"name":"f"}],"output":{"name":"self"}}],[11,"with","","",85,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",85,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_lifetime_names","","",85,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_lifetime","","",85,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"lifetime_name","","",85,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"lifetime","","",85,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"with_ty_params","","",85,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty_param_ids","","",85,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty_param","","",85,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"ty_param_id","","",85,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"ty_param","","",85,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"typarambuilder"}}],[11,"with_predicates","","",85,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_predicate","","",85,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"self"}}],[11,"predicate","","",85,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicatebuilder"}}],[11,"add_lifetime_bound","","",85,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"add_ty_param_bound","","",85,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"self"}}],[11,"strip_bounds","","",85,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"strip_lifetimes","","",85,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"strip_ty_params","","",85,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"strip_predicates","","",85,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"build","","",85,null],[11,"invoke","","",85,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"invoke","","",85,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"invoke","","",85,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"self"}}],[0,"ident","syn::aster","",null,null],[8,"ToIdent","syn::aster::ident","",null,null],[10,"to_ident","","",86,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"to_ident","syn","",87,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[0,"invoke","syn::aster","",null,null],[3,"Identity","syn::aster::invoke","",null,null],[8,"Invoke","","",null,null],[16,"Result","","",88,null],[10,"invoke","","",88,null],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"identity"}}],[11,"invoke","","",89,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"a"}}],[0,"lifetime","syn::aster","",null,null],[3,"LifetimeDefBuilder","syn::aster::lifetime","",null,null],[8,"IntoLifetime","","",null,null],[10,"into_lifetime","","",90,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[8,"IntoLifetimeDef","","",null,null],[10,"into_lifetime_def","","",91,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"into_lifetime","syn","",10,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"into_lifetime_def","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"into_lifetime_def","","",10,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"new","syn::aster::lifetime","",92,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"with_callback","","",92,{"inputs":[{"name":"n"},{"name":"f"}],"output":{"name":"self"}}],[11,"bound","","",92,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"build","","",92,null],[0,"path","syn::aster","",null,null],[3,"PathBuilder","syn::aster::path","",null,null],[3,"PathSegmentsBuilder","","",null,null],[3,"PathSegmentBuilder","","",null,null],[3,"TypeBindingBuilder","","",null,null],[3,"PathSegmentReturnBuilder","","",null,null],[8,"IntoPath","","",null,null],[10,"into_path","","",93,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"into_path","syn","",38,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"into_path","","",87,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"new","syn::aster::path","",94,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",94,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",94,null],[11,"global","","",94,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"ids","","",94,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"id","","",94,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"segment","","",94,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"pathsegmentbuilder"}}],[11,"ids","","",95,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"id","","",95,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"segment","","",95,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pathsegmentbuilder"}}],[11,"build","","",95,null],[11,"invoke","","",95,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"self"}}],[11,"with_callback","","",96,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"with_generics","","",96,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",96,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_lifetime","","",96,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"lifetime","","",96,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"with_tys","","",96,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty","","",96,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"ty","","",96,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"with_binding","","",96,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"self"}}],[11,"binding","","",96,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"tybuilder"}}],[11,"no_return","","",96,null],[11,"return_","","",96,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"build_return","","",96,null],[11,"build","","",96,null],[11,"invoke","","",96,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"invoke","","",97,null],[11,"invoke","","",98,null],[0,"qpath","syn::aster","",null,null],[3,"QPathBuilder","syn::aster::qpath","",null,null],[3,"QPathTyBuilder","","",null,null],[3,"QPathQSelfBuilder","","",null,null],[11,"new","","",99,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","Construct a `QPathBuilder` that will call the `callback` with a constructed `QSelf` and `Path`.",99,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"with_ty","","Build a qualified path first by starting with a type builder.",99,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"qpathtybuilder"}}],[11,"ty","","Build a qualified path first by starting with a type builder.",99,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"build","","Build a qualified path with a concrete type and path.",99,null],[11,"invoke","","",99,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"qpathtybuilder"}}],[11,"as_","","Build a qualified path with a path builder.",100,{"inputs":[{"name":"self"}],"output":{"name":"pathbuilder"}}],[11,"id","","",100,null],[11,"segment","","",100,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pathsegmentbuilder"}}],[11,"invoke","","",100,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"qpathqselfbuilder"}}],[11,"id","","",101,null],[11,"segment","","",101,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"pathsegmentbuilder"}}],[11,"invoke","","",101,null],[0,"ty","syn::aster","",null,null],[3,"TyBuilder","syn::aster::ty","",null,null],[3,"TyPathBuilder","","",null,null],[3,"TyQPathBuilder","","",null,null],[3,"TySliceBuilder","","",null,null],[3,"TyRefBuilder","","",null,null],[3,"TyOptionBuilder","","",null,null],[3,"TyResultOkBuilder","","",null,null],[3,"TyResultErrBuilder","","",null,null],[3,"TyPhantomDataBuilder","","",null,null],[3,"TyBoxBuilder","","",null,null],[3,"TyIteratorBuilder","","",null,null],[3,"TyImplTraitTyBuilder","","",null,null],[3,"TyTupleBuilder","","",null,null],[11,"new","","",102,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",102,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",102,null],[11,"id","","",102,null],[11,"build_path","","",102,null],[11,"build_qpath","","",102,null],[11,"path","","",102,{"inputs":[{"name":"self"}],"output":{"name":"pathbuilder"}}],[11,"qpath","","",102,{"inputs":[{"name":"self"}],"output":{"name":"qpathbuilder"}}],[11,"isize","","",102,null],[11,"i8","","",102,null],[11,"i16","","",102,null],[11,"i32","","",102,null],[11,"i64","","",102,null],[11,"usize","","",102,null],[11,"u8","","",102,null],[11,"u16","","",102,null],[11,"u32","","",102,null],[11,"u64","","",102,null],[11,"f32","","",102,null],[11,"f64","","",102,null],[11,"bool","","",102,null],[11,"unit","","",102,null],[11,"tuple","","",102,{"inputs":[{"name":"self"}],"output":{"name":"tytuplebuilder"}}],[11,"build_slice","","",102,null],[11,"slice","","",102,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"ref_","","",102,{"inputs":[{"name":"self"}],"output":{"name":"tyrefbuilder"}}],[11,"never","","",102,null],[11,"infer","","",102,null],[11,"option","","",102,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"result","","",102,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"phantom_data","","",102,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"box_","","",102,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"iterator","","",102,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"impl_trait","","",102,{"inputs":[{"name":"self"}],"output":{"name":"tyimpltraittybuilder"}}],[11,"invoke","","",103,null],[11,"invoke","","",104,null],[11,"invoke","","",105,null],[11,"mut_","","",106,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"lifetime","","",106,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"self"}}],[11,"build_ty","","",106,null],[11,"ty","","",106,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"invoke","","",106,null],[11,"invoke","","",107,null],[11,"invoke","","",108,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"tybuilder"}}],[11,"invoke","","",109,null],[11,"invoke","","",110,null],[11,"invoke","","",111,null],[11,"invoke","","",112,null],[11,"with_bounds","","",113,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_bound","","",113,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",113,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"with_generics","","",113,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",113,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"lifetime","","",113,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",113,null],[11,"invoke","","",113,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"with_tys","","",114,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty","","",114,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"ty","","",114,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"build","","",114,null],[11,"invoke","","",114,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[0,"ty_param","syn::aster","",null,null],[3,"TyParamBuilder","syn::aster::ty_param","",null,null],[3,"TyParamBoundBuilder","","",null,null],[3,"TraitTyParamBoundBuilder","","",null,null],[3,"PolyTraitRefBuilder","","",null,null],[11,"new","","",115,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_ty_param","","",115,{"inputs":[{"name":"typaram"}],"output":{"name":"self"}}],[11,"with_callback","","",115,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"from_ty_param_with_callback","","",115,{"inputs":[{"name":"f"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"with_default","","",115,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"default","","",115,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"with_bound","","",115,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",115,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"with_trait_bound","","",115,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"self"}}],[11,"trait_bound","","",115,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime_bound","","",115,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",115,null],[11,"invoke","","",115,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"self"}}],[11,"invoke","","",115,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"invoke","","",115,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"self"}}],[11,"new","","",116,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",116,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build_trait","","",116,null],[11,"trait_","","",116,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"maybe_trait","","",116,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"iterator","","",116,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime","","",116,null],[11,"invoke","","",117,null],[11,"with_callback","","",118,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"self"}}],[11,"with_lifetime","","",118,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"lifetime","","",118,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"build","","",118,null],[11,"invoke","","",118,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[0,"where_predicate","syn::aster","",null,null],[3,"WherePredicateBuilder","syn::aster::where_predicate","",null,null],[3,"WhereBoundPredicateBuilder","","",null,null],[3,"WhereBoundPredicateTyBuilder","","",null,null],[3,"WhereBoundPredicateTyBoundsBuilder","","",null,null],[3,"WhereRegionPredicateBuilder","","",null,null],[11,"new","","",119,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",119,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"bound","","",119,{"inputs":[{"name":"self"}],"output":{"name":"tybuilder"}}],[11,"lifetime","","",119,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"whereregionpredicatebuilder"}}],[11,"invoke","","",119,null],[11,"invoke","","",120,null],[11,"with_for_lifetime","","",121,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"for_lifetime","","",121,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"with_bound","","",121,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"whereboundpredicatetyboundsbuilder"}}],[11,"bound","","",121,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"trait_","","",121,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime","","",121,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"whereboundpredicatetyboundsbuilder"}}],[11,"invoke","","",121,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"invoke","","",121,null],[11,"with_for_lifetime","","",122,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"for_lifetime","","",122,{"inputs":[{"name":"self"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"with_bound","","",122,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",122,{"inputs":[{"name":"self"}],"output":{"name":"typaramboundbuilder"}}],[11,"trait_","","",122,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime","","",122,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",122,null],[11,"invoke","","",122,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"invoke","","",122,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",123,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",123,null],[11,"to_tokens","syn","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",45,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"name","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"name","","Name of the item.",44,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"nestedmetaitem"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"constexpr"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"fields","","Slice containing the fields stored in the variant.",47,null],[11,"fields_mut","","Mutable slice containing the fields stored in the variant.",47,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",49,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",50,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"from","","",5,{"inputs":[{"name":"exprkind"}],"output":{"name":"expr"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"exprkind"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fieldvalue"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"fieldvalue"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"fieldvalue"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"stmt"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"hash","","",55,null],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"macstmtstyle"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"macstmtstyle"}],"output":{"name":"bool"}}],[11,"hash","","",52,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"pat"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"arm"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"captureby"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"captureby"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"rangelimits"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"rangelimits"}],"output":{"name":"bool"}}],[11,"hash","","",54,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fieldpat"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bindingmode"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",124,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",125,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",126,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",11,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",12,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",14,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",58,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",13,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"generics"}}],[11,"hash","","",9,null],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",9,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",125,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"new","","",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"new","","",11,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"hash","","",12,null],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"hash","","",57,null],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"hash","","",56,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"whereclause"}}],[11,"hash","","",14,null],[11,"none","","",14,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",58,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"to_tokens","","",87,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",87,null],[11,"cmp","","",87,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"option"}}],[11,"lt","","",87,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"le","","",87,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"gt","","",87,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ge","","",87,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"new","","",87,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",87,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",87,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",87,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",87,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"as_ref","","",87,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",21,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",67,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",61,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",59,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",60,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",64,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"itemkind"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"bool"}}],[11,"hash","","",65,null],[11,"from","","",21,{"inputs":[{"name":"deriveinput"}],"output":{"name":"item"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"viewpath"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"viewpath"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"viewpath"}],"output":{"name":"bool"}}],[11,"hash","","",67,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"pathlistitem"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"pathlistitem"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"pathlistitem"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"constness"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"constness"}],"output":{"name":"bool"}}],[11,"hash","","",59,null],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"defaultness"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"defaultness"}],"output":{"name":"bool"}}],[11,"hash","","",60,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"foreignmod"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"foreignitem"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"foreignitemkind"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"foreignitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"foreignitemkind"}],"output":{"name":"bool"}}],[11,"hash","","",62,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"traititem"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"traititemkind"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"hash","","",66,null],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"implpolarity"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"implpolarity"}],"output":{"name":"bool"}}],[11,"hash","","",64,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"implitem"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"implitemkind"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"hash","","",63,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"methodsig"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"fndecl"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"fnarg"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"fnarg"}],"output":{"name":"bool"}}],[11,"hash","","",61,null],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"to_tokens","","",70,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",70,null],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"hash","","",71,null],[11,"from","","",70,{"inputs":[{"name":"string"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"str"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"from","","",70,null],[11,"from","","",70,{"inputs":[{"name":"char"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"bool"}],"output":{"name":"lit"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"hash","","",69,null],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"hash","","",68,null],[11,"from","","",70,{"inputs":[{"name":"isize"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"i8"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"i16"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"i32"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"i64"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"usize"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"u8"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"u16"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"u32"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"u64"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"f32"}],"output":{"name":"lit"}}],[11,"from","","",70,{"inputs":[{"name":"f64"}],"output":{"name":"lit"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"strlit"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bytestrlit"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"intlit"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"floatlit"}}],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",75,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",30,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",74,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",72,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"mac"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"hash","","",75,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",74,null],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",72,null],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",73,null],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"hash","","",76,null],[11,"op","","",77,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"assign_op","","",77,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_tokens","","",77,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"op","","",78,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_tokens","","",78,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"hash","","",77,null],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"hash","","",78,null],[11,"to_tokens","","",83,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",81,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",38,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",82,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",33,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",42,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",37,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",40,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",34,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",84,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",79,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"hash","","",83,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"hash","","",81,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"from","","",38,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"from","","",39,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"hash","","",82,null],[11,"none","","",82,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"hash","","",33,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"hash","","",84,null],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",79,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"hash","","",80,null],[0,"visit","","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",null,null],[5,"walk_opt_ident","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_variant_data","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"walk_const_expr","","",null,{"inputs":[{"name":"v"},{"name":"constexpr"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[5,"walk_crate","","",null,{"inputs":[{"name":"v"},{"name":"crate"}],"output":null}],[5,"walk_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":null}],[5,"walk_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"walk_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":null}],[5,"walk_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":null}],[5,"walk_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":null}],[5,"walk_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":null}],[5,"walk_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":null}],[5,"walk_method_sig","","",null,{"inputs":[{"name":"v"},{"name":"methodsig"}],"output":null}],[5,"walk_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":null}],[5,"walk_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":null}],[5,"walk_view_path","","",null,{"inputs":[{"name":"v"},{"name":"viewpath"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_ident","","",127,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_derive_input","","",127,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_ty","","",127,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",127,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ty_param_bound","","",127,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",127,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",127,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"}],"output":null}],[11,"visit_field","","",127,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_variant","","",127,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"visit_lifetime","","",127,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",127,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_path","","",127,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_segment","","",127,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",127,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",127,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",127,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_fn_ret_ty","","",127,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":null}],[11,"visit_const_expr","","",127,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":null}],[11,"visit_lit","","",127,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_mac","","",127,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[11,"visit_crate","","",127,{"inputs":[{"name":"self"},{"name":"crate"}],"output":null}],[11,"visit_item","","",127,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_expr","","",127,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_foreign_item","","",127,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_pat","","",127,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_fn_decl","","",127,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":null}],[11,"visit_trait_item","","",127,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",127,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_method_sig","","",127,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":null}],[11,"visit_stmt","","",127,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_local","","",127,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_view_path","","",127,{"inputs":[{"name":"self"},{"name":"viewpath"}],"output":null}],[0,"parse","syn","This module contains a set of exported nom parsers which can be used to parse custom grammars when used alongside the `synom` crate.",null,null],[4,"IResult","syn::parse","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",128,null],[13,"Error","","Parsing failed.",128,null],[5,"item","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"expr","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"pat","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"block","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"stmt","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"lit","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"string","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"byte_string","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"byte","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"character","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"float","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"int","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"boolean","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"ty","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"path","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"tt","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"ident","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"lifetime","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",128,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}]],"paths":[[3,"Attribute"],[3,"Field"],[3,"Variant"],[3,"Arm"],[3,"Block"],[3,"Expr"],[3,"FieldPat"],[3,"FieldValue"],[3,"Local"],[3,"Generics"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"TyParam"],[3,"WhereBoundPredicate"],[3,"WhereClause"],[3,"WhereEqPredicate"],[3,"WhereRegionPredicate"],[3,"FnDecl"],[3,"ForeignItem"],[3,"ForeignMod"],[3,"ImplItem"],[3,"Item"],[3,"MethodSig"],[3,"PathListItem"],[3,"TraitItem"],[3,"Crate"],[3,"ByteStrLit"],[3,"FloatLit"],[3,"IntLit"],[3,"StrLit"],[3,"Delimited"],[3,"Mac"],[3,"DeriveInput"],[3,"AngleBracketedParameterData"],[3,"BareFnArg"],[3,"BareFnTy"],[3,"MutTy"],[3,"ParenthesizedParameterData"],[3,"Path"],[3,"PathSegment"],[3,"PolyTraitRef"],[3,"QSelf"],[3,"TypeBinding"],[4,"AttrStyle"],[4,"MetaItem"],[4,"NestedMetaItem"],[4,"ConstExpr"],[4,"VariantData"],[4,"Visibility"],[4,"BindingMode"],[4,"CaptureBy"],[4,"ExprKind"],[4,"MacStmtStyle"],[4,"Pat"],[4,"RangeLimits"],[4,"Stmt"],[4,"TraitBoundModifier"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"Constness"],[4,"Defaultness"],[4,"FnArg"],[4,"ForeignItemKind"],[4,"ImplItemKind"],[4,"ImplPolarity"],[4,"ItemKind"],[4,"TraitItemKind"],[4,"ViewPath"],[4,"FloatTy"],[4,"IntTy"],[4,"Lit"],[4,"StrStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Token"],[4,"TokenTree"],[4,"Body"],[4,"BinOp"],[4,"UnOp"],[4,"Abi"],[4,"FunctionRetTy"],[4,"Mutability"],[4,"PathParameters"],[4,"Ty"],[4,"Unsafety"],[3,"GenericsBuilder"],[8,"ToIdent"],[3,"Ident"],[8,"Invoke"],[3,"Identity"],[8,"IntoLifetime"],[8,"IntoLifetimeDef"],[3,"LifetimeDefBuilder"],[8,"IntoPath"],[3,"PathBuilder"],[3,"PathSegmentsBuilder"],[3,"PathSegmentBuilder"],[3,"TypeBindingBuilder"],[3,"PathSegmentReturnBuilder"],[3,"QPathBuilder"],[3,"QPathTyBuilder"],[3,"QPathQSelfBuilder"],[3,"TyBuilder"],[3,"TyPathBuilder"],[3,"TyQPathBuilder"],[3,"TySliceBuilder"],[3,"TyRefBuilder"],[3,"TyOptionBuilder"],[3,"TyResultOkBuilder"],[3,"TyResultErrBuilder"],[3,"TyPhantomDataBuilder"],[3,"TyBoxBuilder"],[3,"TyIteratorBuilder"],[3,"TyImplTraitTyBuilder"],[3,"TyTupleBuilder"],[3,"TyParamBuilder"],[3,"TyParamBoundBuilder"],[3,"TraitTyParamBoundBuilder"],[3,"PolyTraitRefBuilder"],[3,"WherePredicateBuilder"],[3,"WhereBoundPredicateBuilder"],[3,"WhereBoundPredicateTyBuilder"],[3,"WhereBoundPredicateTyBoundsBuilder"],[3,"WhereRegionPredicateBuilder"],[3,"ImplGenerics"],[3,"TyGenerics"],[3,"Turbofish"],[8,"Visitor"],[4,"IResult"]]};
searchIndex["synom"] = {"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,null],[13,"Error","","Parsing failed.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",null,null],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",null,null],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",null,null],[14,"named","","Define a function from a parser combination.",null,null],[14,"call","","Invoke the given parser function with the passed in arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",null,null],[14,"cond","","Conditionally execute the given parser.",null,null],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",null,null],[14,"preceded","","Parse two things, returning the value of the second.",null,null],[14,"terminated","","Parse two things, returning the value of the first.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"peek","","Parse a value without consuming it from the input data.",null,null],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",null,null],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",null,null],[14,"delimited","","Value surrounded by a pair of delimiters.",null,null],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",null,null]],"paths":[[4,"IResult"]]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,{"inputs":[{"name":"self"}],"output":{"name":"cacheditermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cachedintoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is -76060 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"outofrangeerror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"inputs":[{"name":"self"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["traitobject"] = {"doc":"traitobject","items":[[5,"data","traitobject","Get the data pointer from this trait object.",null,null],[5,"data_mut","","Get the data pointer from this trait object, mutably.",null,null],[8,"Trait","","A trait implemented for all trait objects.",null,null]],"paths":[]};
searchIndex["typeable"] = {"doc":"Exposes `Typeable`, which exposes the `get_type` method, which gives the `TypeId` of any 'static type.","items":[[8,"Typeable","typeable","Universal mixin trait for adding a `get_type` method.",null,null],[11,"get_type","","Get the `TypeId` of this object.",0,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}]],"paths":[[8,"Typeable"]]};
searchIndex["unicase"] = {"doc":"Case","items":[[3,"UniCase","unicase","Case Insensitive wrapper of strings.",null,null],[12,"0","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"unicase"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"s2"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}]],"paths":[[3,"UniCase"]]};
searchIndex["unicode_bidi"] = {"doc":"This crate implements the [Unicode Bidirectional Algorithm][tr9] for display of mixed right-to-left and left-to-right text.  It is written in safe Rust, compatible with the current stable release.","items":[[3,"BidiInfo","unicode_bidi","Output of `process_text`",null,null],[12,"classes","","The BidiClass of the character at each byte in the text.",0,null],[12,"levels","","The directional embedding level of each byte in the text.",0,null],[12,"paragraphs","","The boundaries and paragraph embedding level of each paragraph within the text.",0,null],[3,"ParagraphInfo","","Info about a single paragraph ",null,null],[12,"range","","The paragraphs boundaries within the text, as byte indices.",1,null],[12,"level","","The paragraph embedding level. http://www.unicode.org/reports/tr9/#BD4",1,null],[3,"InitialProperties","","Output of `initial_scan`",null,null],[12,"initial_classes","","The BidiClass of the character at each byte in the text. If a character is multiple bytes, its class will appear multiple times in the vector.",2,null],[12,"paragraphs","","The boundaries and level of each paragraph within the text.",2,null],[5,"process_text","","Determine the bidirectional embedding levels for a single paragraph.",null,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"bidiinfo"}}],[5,"is_ltr","","Even embedding levels are left-to-right.",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_rtl","","Odd levels are right-to-left.",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"reorder_line","","Re-order a line based on resolved levels.",null,null],[5,"visual_runs","","Find the level runs within a line and return them in visual order.",null,null],[5,"initial_scan","","Find the paragraphs and BidiClasses in a string of text.",null,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"initialproperties"}}],[0,"tables","","",null,null],[4,"BidiClass","unicode_bidi::tables","Represents the Unicode character property Bidi_Class, also known as the bidirectional character type.",null,null],[13,"AL","","",3,null],[13,"AN","","",3,null],[13,"B","","",3,null],[13,"BN","","",3,null],[13,"CS","","",3,null],[13,"EN","","",3,null],[13,"ES","","",3,null],[13,"ET","","",3,null],[13,"FSI","","",3,null],[13,"L","","",3,null],[13,"LRE","","",3,null],[13,"LRI","","",3,null],[13,"LRO","","",3,null],[13,"NSM","","",3,null],[13,"ON","","",3,null],[13,"PDF","","",3,null],[13,"PDI","","",3,null],[13,"R","","",3,null],[13,"RLE","","",3,null],[13,"RLI","","",3,null],[13,"RLO","","",3,null],[13,"S","","",3,null],[13,"WS","","",3,null],[5,"bidi_class","","Find the BidiClass of a single char.",null,{"inputs":[{"name":"char"}],"output":{"name":"bidiclass"}}],[17,"UNICODE_VERSION","","The version of Unicode that the `bidi_class` function is based on.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bidiclass"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bidiclass"}],"output":{"name":"bool"}}],[6,"LevelRun","unicode_bidi","A maximal substring of characters with the same embedding level.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"initialproperties"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"initialproperties"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"BidiInfo"],[3,"ParagraphInfo"],[3,"InitialProperties"],[4,"BidiClass"]]};
searchIndex["unicode_normalization"] = {"doc":"Unicode character composition and decomposition utilities as described in Unicode Standard Annex #15.","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition's characters.",null,null],[3,"Recompositions","","External iterator for a string recomposition's characters.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"char","","Methods for composing and decomposing characters.",null,null],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"compose","","Compose two characters into a single character, if possible. See Unicode Standard Annex #15 for more information.",null,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"option"}}],[5,"canonical_combining_class","","",null,{"inputs":[{"name":"char"}],"output":{"name":"u8"}}],[5,"is_combining_mark","","Return whether the given character is a combining mark (`General_Category=Mark`)",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"UNICODE_VERSION","unicode_normalization","The version of Unicode that this version of unicode-normalization is based on.",null,null],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations as described in Unicode Standard Annex #15.",null,null],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D (canonical decomposition).",2,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD (compatibility decomposition).",2,{"inputs":[{"name":"self"}],"output":{"name":"decompositions"}}],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C (canonical decomposition followed by canonical composition).",2,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC (compatibility decomposition followed by canonical composition).",2,{"inputs":[{"name":"self"}],"output":{"name":"recompositions"}}]],"paths":[[3,"Decompositions"],[3,"Recompositions"],[8,"UnicodeNormalization"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"] = {"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"inputs":[{"name":"self"}],"output":null}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["url"] = {"doc":"rust-url is an implementation of the URL Standard for the Rust programming language.","items":[[3,"OpaqueOrigin","url","Opaque identifier for URLs that have file or other schemes",null,null],[3,"HostAndPort","","This mostly exists because coherence rules don’t allow us to implement `ToSocketAddrs for (Host<S>, u16)`.",null,null],[12,"host","","",0,null],[12,"port","","",0,null],[3,"SocketAddrs","","Socket addresses for an URL.",null,null],[3,"PathSegmentsMut","","Exposes methods to manipulate the path of an URL that is not cannot-be-base.",null,null],[3,"Url","","A parsed URL record.",null,null],[3,"ParseOptions","","Full configuration for the URL parser.",null,null],[3,"UrlQuery","","Implementation detail of `Url::query_pairs_mut`. Typically not used directly.",null,null],[4,"Origin","","The origin of an URL",null,null],[13,"Opaque","","A globally unique identifier",1,null],[13,"Tuple","","Consists of the URL's scheme, host and port",1,null],[4,"Host","","The host name of an URL.",null,null],[13,"Domain","","A DNS domain name, as '.' dot-separated labels. Non-ASCII labels are encoded in punycode per IDNA.",2,null],[13,"Ipv4","","An IPv4 address. `Url::host_str` returns the serialization of this address, as four decimal integers separated by `.` dots.",2,null],[13,"Ipv6","","An IPv6 address. `Url::host_str` returns the serialization of that address between `[` and `]` brackets, in the format per RFC 5952 A Recommendation for IPv6 Address Text Representation: lowercase hexadecimal with maximal `::` compression.",2,null],[4,"ParseError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",3,null],[13,"IdnaError","","",3,null],[13,"InvalidPort","","",3,null],[13,"InvalidIpv4Address","","",3,null],[13,"InvalidIpv6Address","","",3,null],[13,"InvalidDomainCharacter","","",3,null],[13,"RelativeUrlWithoutBase","","",3,null],[13,"RelativeUrlWithCannotBeABaseBase","","",3,null],[13,"SetHostOnCannotBeABaseUrl","","",3,null],[13,"Overflow","","",3,null],[4,"Position","","Indicates a position within a URL based on its components.",null,null],[13,"BeforeScheme","","",4,null],[13,"AfterScheme","","",4,null],[13,"BeforeUsername","","",4,null],[13,"AfterUsername","","",4,null],[13,"BeforePassword","","",4,null],[13,"AfterPassword","","",4,null],[13,"BeforeHost","","",4,null],[13,"AfterHost","","",4,null],[13,"BeforePort","","",4,null],[13,"AfterPort","","",4,null],[13,"BeforePath","","",4,null],[13,"AfterPath","","",4,null],[13,"BeforeQuery","","",4,null],[13,"AfterQuery","","",4,null],[13,"BeforeFragment","","",4,null],[13,"AfterFragment","","",4,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"host"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",2,{"inputs":[{"name":"self"}],"output":{"name":"host"}}],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"hostandport"}}],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.",0,{"inputs":[{"name":"self"}],"output":{"name":"hostandport"}}],[11,"to_socket_addrs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_opaque","","Creates a new opaque origin that is only equal to itself.",1,{"inputs":[],"output":{"name":"origin"}}],[11,"is_tuple","","Return whether this origin is a (scheme, host, port) tuple (as opposed to an opaque origin).",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"ascii_serialization","","https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"unicode_serialization","","https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"opaqueorigin"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pop_if_empty","","Remove the last segment of this URL’s path if it is empty, except if these was only one segment to begin with.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pop","","Remove the last segment of this URL’s path.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"push","","Append the given segment at the end of this URL’s path.",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"extend","","Append each segment from the given iterator at the end of this URL’s path.",7,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"errors"}],"output":{"name":"parseerror"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"str"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"form_urlencoded","","Parser and serializer for the `application/x-www-form-urlencoded` syntax, as used by HTML forms.",null,null],[3,"Parse","url::form_urlencoded","The return type of `parse()`.",null,null],[3,"ParseIntoOwned","","Like `Parse`, but yields pairs of `String` instead of pairs of `Cow<str>`.",null,null],[3,"ByteSerialize","","Return value of `byte_serialize()`.",null,null],[3,"Serializer","","The `application/x-www-form-urlencoded` serializer.",null,null],[5,"parse","","Convert a byte string in the `application/x-www-form-urlencoded` syntax into a iterator of (name, value) pairs.",null,null],[5,"byte_serialize","","The `application/x-www-form-urlencoded` byte serializer.",null,null],[8,"Target","","",null,null],[10,"as_mut_string","","",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"finish","","",9,null],[16,"Finished","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_owned","","Return a new iterator that yields pairs of `String` instead of pairs of `Cow<str>`.",10,{"inputs":[{"name":"self"}],"output":{"name":"parseintoowned"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"as_mut_string","url","",13,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"finish","","",13,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"new","url::form_urlencoded","Create a new `application/x-www-form-urlencoded` serializer for the given target.",14,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"for_suffix","","Create a new `application/x-www-form-urlencoded` serializer for a suffix of the given target.",14,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Remove any existing name/value pair.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"append_pair","","Serialize and append a name/value pair.",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"extend_pairs","","Serialize and append a number of name/value pairs.",14,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"finish","","If this serializer was constructed with a string, take and return that string.",14,null],[0,"percent_encoding","url","",null,null],[3,"SIMPLE_ENCODE_SET","url::percent_encoding","This encode set is used for the path of cannot-be-a-base URLs.",null,null],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",null,null],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",null,null],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on '/'-separated path segment",null,null],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",null,null],[3,"PercentEncode","","The return type of `percent_encode()` and `utf8_percent_encode()`.",null,null],[3,"PercentDecode","","The return type of `percent_decode()`.",null,null],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",null,{"inputs":[{"name":"u8"}],"output":{"name":"str"}}],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",null,null],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",null,{"inputs":[{"name":"str"},{"name":"e"}],"output":{"name":"percentencode"}}],[5,"percent_decode","","Percent-decode the given bytes.",null,null],[8,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded.",null,null],[10,"contains","","Called with UTF-8 bytes rather than code points. Should return true for all non-ASCII bytes.",15,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"simple_encode_set"}}],[11,"contains","","",16,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"query_encode_set"}}],[11,"contains","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"default_encode_set"}}],[11,"contains","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"path_segment_encode_set"}}],[11,"contains","","",19,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"userinfo_encode_set"}}],[11,"contains","","",20,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"percentencode"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"percentdecode"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"if_any","","If the percent-decoding is different from the input, return it as a new bytes vector.",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",22,{"inputs":[{"name":"self"}],"output":{"name":"cow"}}],[0,"quirks","url","Getters and setters for URL components implemented per https://url.spec.whatwg.org/#api",null,null],[5,"domain_to_ascii","url::quirks","https://url.spec.whatwg.org/#dom-url-domaintoascii",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"domain_to_unicode","","https://url.spec.whatwg.org/#dom-url-domaintounicode",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"href","","Getter for https://url.spec.whatwg.org/#dom-url-href",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_href","","Setter for https://url.spec.whatwg.org/#dom-url-href",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"origin","","Getter for https://url.spec.whatwg.org/#dom-url-origin",null,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[5,"protocol","","Getter for https://url.spec.whatwg.org/#dom-url-protocol",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_protocol","","Setter for https://url.spec.whatwg.org/#dom-url-protocol",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"username","","Getter for https://url.spec.whatwg.org/#dom-url-username",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_username","","Setter for https://url.spec.whatwg.org/#dom-url-username",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"password","","Getter for https://url.spec.whatwg.org/#dom-url-password",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_password","","Setter for https://url.spec.whatwg.org/#dom-url-password",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"host","","Getter for https://url.spec.whatwg.org/#dom-url-host",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_host","","Setter for https://url.spec.whatwg.org/#dom-url-host",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"hostname","","Getter for https://url.spec.whatwg.org/#dom-url-hostname",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_hostname","","Setter for https://url.spec.whatwg.org/#dom-url-hostname",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"port","","Getter for https://url.spec.whatwg.org/#dom-url-port",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_port","","Setter for https://url.spec.whatwg.org/#dom-url-port",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"pathname","","Getter for https://url.spec.whatwg.org/#dom-url-pathname",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_pathname","","Setter for https://url.spec.whatwg.org/#dom-url-pathname",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[5,"search","","Getter for https://url.spec.whatwg.org/#dom-url-search",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_search","","Setter for https://url.spec.whatwg.org/#dom-url-search",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[5,"hash","","Getter for https://url.spec.whatwg.org/#dom-url-hash",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_hash","","Setter for https://url.spec.whatwg.org/#dom-url-hash",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[11,"clone","url","",8,{"inputs":[{"name":"self"}],"output":{"name":"url"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"parseoptions"}}],[11,"base_url","","Change the base URL",23,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"log_syntax_violation","","Call the provided function or closure on non-fatal parse errors.",23,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[11,"parse","","Parse an URL string with the configuration so far.",23,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse","","Parse an absolute URL from a string.",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"parse_with_params","","Parse an absolute URL from a string and add params to its query string.",8,{"inputs":[{"name":"str"},{"name":"i"}],"output":{"name":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",8,{"inputs":[],"output":{"name":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","Return the serialization of this URL.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",8,{"inputs":[{"name":"self"}],"output":{"name":"origin"}}],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the ':' delimiter.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"has_authority","","Return whether the URL has an 'authority', which can contain a username, password, host, and port number.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL, meaning that parsing a relative URL string with this URL as the base will return an error.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"username","","Return the username for this URL (typically the empty string) as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_host","","Equivalent to `url.host().is_some()`.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"host","","Return the parsed representation of the host for this URL. Non-ASCII domain labels are punycode-encoded per IDNA.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port","","Return the port number for this URL, if any.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string. For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'. For other URLs, this starts with a '/' slash and continues with slash-separated path segments.",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"path_segments","","Unless this URL is cannot-be-a-base, return an iterator of '/' slash-separated path segments, each as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded` and return an iterator of (key, value) pairs.",8,{"inputs":[{"name":"self"}],"output":{"name":"parse"}}],[11,"fragment","","Return this URL’s fragment identifier, if any.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_fragment","","Change this URL’s fragment identifier.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_query","","Change this URL’s query string.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs in `application/x-www-form-urlencoded` syntax.",8,{"inputs":[{"name":"self"}],"output":{"name":"serializer"}}],[11,"set_path","","Change this URL’s path.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_port","","Change this URL’s port number.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_host","","Change this URL’s host.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_ip_host","","Change this URL’s host to the given IP address.",8,{"inputs":[{"name":"self"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_password","","Change this URL’s password.",8,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_username","","Change this URL’s username.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_scheme","","Change this URL’s scheme.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",8,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",8,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar, convert its path to an absolute `std::path::Path`.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",8,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"as_ref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[14,"define_encode_set","","Define a new struct that implements the `EncodeSet` trait, for use in `percent_decode()` and related functions.",null,null]],"paths":[[3,"HostAndPort"],[4,"Origin"],[4,"Host"],[4,"ParseError"],[4,"Position"],[3,"SocketAddrs"],[3,"OpaqueOrigin"],[3,"PathSegmentsMut"],[3,"Url"],[8,"Target"],[3,"Parse"],[3,"ParseIntoOwned"],[3,"ByteSerialize"],[3,"UrlQuery"],[3,"Serializer"],[8,"EncodeSet"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"],[3,"PercentDecode"],[3,"ParseOptions"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utf8sequence"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"utf8range"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"void"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
initSearch(searchIndex);
